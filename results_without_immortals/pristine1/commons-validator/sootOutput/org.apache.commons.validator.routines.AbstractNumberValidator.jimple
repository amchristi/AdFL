public abstract class org.apache.commons.validator.routines.AbstractNumberValidator extends org.apache.commons.validator.routines.AbstractFormatValidator
{
    private static final long serialVersionUID;
    public static final int STANDARD_FORMAT;
    public static final int CURRENCY_FORMAT;
    public static final int PERCENT_FORMAT;
    private final boolean allowFractions;
    private final int formatType;

    public void <init>(boolean, int, boolean)
    {
        org.apache.commons.validator.routines.AbstractNumberValidator r0;
        boolean z0, z1;
        int i0;

        r0 := @this: org.apache.commons.validator.routines.AbstractNumberValidator;
        z0 := @parameter0: boolean;
        i0 := @parameter1: int;
        z1 := @parameter2: boolean;
        specialinvoke r0.<org.apache.commons.validator.routines.AbstractFormatValidator: void <init>(boolean)>(z0);
        r0.<org.apache.commons.validator.routines.AbstractNumberValidator: boolean allowFractions> = z1;
        r0.<org.apache.commons.validator.routines.AbstractNumberValidator: int formatType> = i0;
        return;
    }

    public boolean isAllowFractions()
    {
        org.apache.commons.validator.routines.AbstractNumberValidator r0;
        boolean $z0;

        r0 := @this: org.apache.commons.validator.routines.AbstractNumberValidator;
        $z0 = r0.<org.apache.commons.validator.routines.AbstractNumberValidator: boolean allowFractions>;
        return $z0;
    }

    public int getFormatType()
    {
        org.apache.commons.validator.routines.AbstractNumberValidator r0;
        int $i0;

        r0 := @this: org.apache.commons.validator.routines.AbstractNumberValidator;
        $i0 = r0.<org.apache.commons.validator.routines.AbstractNumberValidator: int formatType>;
        return $i0;
    }

    public boolean isValid(java.lang.String, java.lang.String, java.util.Locale)
    {
        org.apache.commons.validator.routines.AbstractNumberValidator r0;
        java.lang.String r1, r2;
        java.util.Locale r3;
        java.lang.Object r4;
        boolean $z0;

        r0 := @this: org.apache.commons.validator.routines.AbstractNumberValidator;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.util.Locale;
        r4 = virtualinvoke r0.<org.apache.commons.validator.routines.AbstractNumberValidator: java.lang.Object parse(java.lang.String,java.lang.String,java.util.Locale)>(r1, r2, r3);
        if r4 != null goto label0;

        $z0 = 0;
        goto label1;

     label0:
        $z0 = 1;

     label1:
        return $z0;
    }

    public boolean isInRange(java.lang.Number, java.lang.Number, java.lang.Number)
    {
        org.apache.commons.validator.routines.AbstractNumberValidator r0;
        java.lang.Number r1, r2, r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.validator.routines.AbstractNumberValidator;
        r1 := @parameter0: java.lang.Number;
        r2 := @parameter1: java.lang.Number;
        r3 := @parameter2: java.lang.Number;
        $z0 = virtualinvoke r0.<org.apache.commons.validator.routines.AbstractNumberValidator: boolean minValue(java.lang.Number,java.lang.Number)>(r1, r2);
        if $z0 == 0 goto label0;

        $z1 = virtualinvoke r0.<org.apache.commons.validator.routines.AbstractNumberValidator: boolean maxValue(java.lang.Number,java.lang.Number)>(r1, r3);
        if $z1 == 0 goto label0;

        return 1;

     label0:
        return 0;
    }

    public boolean minValue(java.lang.Number, java.lang.Number)
    {
        org.apache.commons.validator.routines.AbstractNumberValidator r0;
        java.lang.Number r1, r2;
        boolean $z0;
        double $d0, $d1;
        byte $b0, $b3;
        long $l1, $l2;

        r0 := @this: org.apache.commons.validator.routines.AbstractNumberValidator;
        r1 := @parameter0: java.lang.Number;
        r2 := @parameter1: java.lang.Number;
        $z0 = virtualinvoke r0.<org.apache.commons.validator.routines.AbstractNumberValidator: boolean isAllowFractions()>();
        if $z0 == 0 goto label1;

        $d0 = virtualinvoke r1.<java.lang.Number: double doubleValue()>();
        $d1 = virtualinvoke r2.<java.lang.Number: double doubleValue()>();
        $b0 = $d0 cmpl $d1;
        if $b0 < 0 goto label0;

        return 1;

     label0:
        return 0;

     label1:
        $l1 = virtualinvoke r1.<java.lang.Number: long longValue()>();
        $l2 = virtualinvoke r2.<java.lang.Number: long longValue()>();
        $b3 = $l1 cmp $l2;
        if $b3 < 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean maxValue(java.lang.Number, java.lang.Number)
    {
        org.apache.commons.validator.routines.AbstractNumberValidator r0;
        java.lang.Number r1, r2;
        boolean $z0;
        double $d0, $d1;
        byte $b0, $b3;
        long $l1, $l2;

        r0 := @this: org.apache.commons.validator.routines.AbstractNumberValidator;
        r1 := @parameter0: java.lang.Number;
        r2 := @parameter1: java.lang.Number;
        $z0 = virtualinvoke r0.<org.apache.commons.validator.routines.AbstractNumberValidator: boolean isAllowFractions()>();
        if $z0 == 0 goto label1;

        $d0 = virtualinvoke r1.<java.lang.Number: double doubleValue()>();
        $d1 = virtualinvoke r2.<java.lang.Number: double doubleValue()>();
        $b0 = $d0 cmpg $d1;
        if $b0 > 0 goto label0;

        return 1;

     label0:
        return 0;

     label1:
        $l1 = virtualinvoke r1.<java.lang.Number: long longValue()>();
        $l2 = virtualinvoke r2.<java.lang.Number: long longValue()>();
        $b3 = $l1 cmp $l2;
        if $b3 > 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    protected java.lang.Object parse(java.lang.String, java.lang.String, java.util.Locale)
    {
        org.apache.commons.validator.routines.AbstractNumberValidator r0;
        java.lang.String r1, r2, $r5, r6;
        java.util.Locale r3;
        java.text.Format r4;
        int $i0;
        java.lang.Object $r7;

        r0 := @this: org.apache.commons.validator.routines.AbstractNumberValidator;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.util.Locale;
        if r1 != null goto label0;

        $r5 = null;
        goto label1;

     label0:
        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

     label1:
        r6 = $r5;
        if r6 == null goto label2;

        $i0 = virtualinvoke r6.<java.lang.String: int length()>();
        if $i0 != 0 goto label3;

     label2:
        return null;

     label3:
        r4 = virtualinvoke r0.<org.apache.commons.validator.routines.AbstractNumberValidator: java.text.Format getFormat(java.lang.String,java.util.Locale)>(r2, r3);
        $r7 = virtualinvoke r0.<org.apache.commons.validator.routines.AbstractNumberValidator: java.lang.Object parse(java.lang.String,java.text.Format)>(r6, r4);
        return $r7;
    }

    protected abstract java.lang.Object processParsedValue(java.lang.Object, java.text.Format);

    protected java.text.Format getFormat(java.lang.String, java.util.Locale)
    {
        org.apache.commons.validator.routines.AbstractNumberValidator r0;
        java.lang.String r1;
        java.util.Locale r2;
        null_type n0;
        boolean z0, $z1;
        java.text.DecimalFormatSymbols r3, $r7;
        int $i0, $i1;
        java.text.Format $r4;
        java.text.NumberFormat r5;
        java.text.DecimalFormat $r6, $r8;

        r0 := @this: org.apache.commons.validator.routines.AbstractNumberValidator;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.util.Locale;
        n0 = null;
        if r1 == null goto label0;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i0 <= 0 goto label0;

        $z1 = 1;
        goto label1;

     label0:
        $z1 = 0;

     label1:
        z0 = $z1;
        if z0 != 0 goto label2;

        $r4 = virtualinvoke r0.<org.apache.commons.validator.routines.AbstractNumberValidator: java.text.Format getFormat(java.util.Locale)>(r2);
        r5 = (java.text.NumberFormat) $r4;
        goto label4;

     label2:
        if r2 != null goto label3;

        $r6 = new java.text.DecimalFormat;
        specialinvoke $r6.<java.text.DecimalFormat: void <init>(java.lang.String)>(r1);
        r5 = $r6;
        goto label4;

     label3:
        $r7 = new java.text.DecimalFormatSymbols;
        specialinvoke $r7.<java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>(r2);
        r3 = $r7;
        $r8 = new java.text.DecimalFormat;
        specialinvoke $r8.<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>(r1, r3);
        r5 = $r8;

     label4:
        $i1 = virtualinvoke r0.<org.apache.commons.validator.routines.AbstractNumberValidator: int determineScale(java.text.NumberFormat)>(r5);
        if $i1 != 0 goto label5;

        virtualinvoke r5.<java.text.NumberFormat: void setParseIntegerOnly(boolean)>(1);

     label5:
        return r5;
    }

    protected int determineScale(java.text.NumberFormat)
    {
        org.apache.commons.validator.routines.AbstractNumberValidator r0;
        java.text.NumberFormat r1;
        int i0, i1, i2, i3, $i4;
        boolean $z0, $z1, $z2, $z3;
        java.text.DecimalFormat $r2;

        r0 := @this: org.apache.commons.validator.routines.AbstractNumberValidator;
        r1 := @parameter0: java.text.NumberFormat;
        $z0 = virtualinvoke r0.<org.apache.commons.validator.routines.AbstractNumberValidator: boolean isStrict()>();
        if $z0 != 0 goto label0;

        return -1;

     label0:
        $z1 = virtualinvoke r0.<org.apache.commons.validator.routines.AbstractNumberValidator: boolean isAllowFractions()>();
        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r1.<java.text.NumberFormat: boolean isParseIntegerOnly()>();
        if $z2 == 0 goto label2;

     label1:
        return 0;

     label2:
        i0 = virtualinvoke r1.<java.text.NumberFormat: int getMinimumFractionDigits()>();
        i1 = virtualinvoke r1.<java.text.NumberFormat: int getMaximumFractionDigits()>();
        if i0 == i1 goto label3;

        return -1;

     label3:
        i2 = i0;
        $z3 = r1 instanceof java.text.DecimalFormat;
        if $z3 == 0 goto label5;

        $r2 = (java.text.DecimalFormat) r1;
        i3 = virtualinvoke $r2.<java.text.DecimalFormat: int getMultiplier()>();
        if i3 != 100 goto label4;

        i2 = i2 + 2;
        goto label6;

     label4:
        if i3 != 1000 goto label6;

        i2 = i2 + 3;
        goto label6;

     label5:
        $i4 = r0.<org.apache.commons.validator.routines.AbstractNumberValidator: int formatType>;
        if $i4 != 2 goto label6;

        i2 = i2 + 2;

     label6:
        return i2;
    }

    protected java.text.Format getFormat(java.util.Locale)
    {
        org.apache.commons.validator.routines.AbstractNumberValidator r0;
        java.util.Locale r1;
        null_type n0;
        int $i0;
        java.text.NumberFormat r2;

        r0 := @this: org.apache.commons.validator.routines.AbstractNumberValidator;
        r1 := @parameter0: java.util.Locale;
        n0 = null;
        $i0 = r0.<org.apache.commons.validator.routines.AbstractNumberValidator: int formatType>;
        tableswitch($i0)
        {
            case 1: goto label0;
            case 2: goto label2;
            default: goto label4;
        };

     label0:
        if r1 != null goto label1;

        r2 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getCurrencyInstance()>();
        goto label6;

     label1:
        r2 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getCurrencyInstance(java.util.Locale)>(r1);
        goto label6;

     label2:
        if r1 != null goto label3;

        r2 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getPercentInstance()>();
        goto label6;

     label3:
        r2 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getPercentInstance(java.util.Locale)>(r1);
        goto label6;

     label4:
        if r1 != null goto label5;

        r2 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance()>();
        goto label6;

     label5:
        r2 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale)>(r1);

     label6:
        return r2;
    }
}
