public final class org.apache.commons.validator.routines.checkdigit.VerhoeffCheckDigit extends java.lang.Object implements org.apache.commons.validator.routines.checkdigit.CheckDigit, java.io.Serializable
{
    private static final long serialVersionUID;
    public static final org.apache.commons.validator.routines.checkdigit.CheckDigit VERHOEFF_CHECK_DIGIT;
    private static final int[][] D_TABLE;
    private static final int[][] P_TABLE;
    private static final int[] INV_TABLE;

    static void <clinit>()
    {
        org.apache.commons.validator.routines.checkdigit.VerhoeffCheckDigit $r0;
        int[][] $r1, $r12;
        int[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;

        $r0 = new org.apache.commons.validator.routines.checkdigit.VerhoeffCheckDigit;
        specialinvoke $r0.<org.apache.commons.validator.routines.checkdigit.VerhoeffCheckDigit: void <init>()>();
        <org.apache.commons.validator.routines.checkdigit.VerhoeffCheckDigit: org.apache.commons.validator.routines.checkdigit.CheckDigit VERHOEFF_CHECK_DIGIT> = $r0;
        $r1 = newarray (int[])[10];
        $r2 = newarray (int)[10];
        $r2[1] = 1;
        $r2[2] = 2;
        $r2[3] = 3;
        $r2[4] = 4;
        $r2[5] = 5;
        $r2[6] = 6;
        $r2[7] = 7;
        $r2[8] = 8;
        $r2[9] = 9;
        $r1[0] = $r2;
        $r3 = newarray (int)[10];
        $r3[0] = 1;
        $r3[1] = 2;
        $r3[2] = 3;
        $r3[3] = 4;
        $r3[5] = 6;
        $r3[6] = 7;
        $r3[7] = 8;
        $r3[8] = 9;
        $r3[9] = 5;
        $r1[1] = $r3;
        $r4 = newarray (int)[10];
        $r4[0] = 2;
        $r4[1] = 3;
        $r4[2] = 4;
        $r4[4] = 1;
        $r4[5] = 7;
        $r4[6] = 8;
        $r4[7] = 9;
        $r4[8] = 5;
        $r4[9] = 6;
        $r1[2] = $r4;
        $r5 = newarray (int)[10];
        $r5[0] = 3;
        $r5[1] = 4;
        $r5[3] = 1;
        $r5[4] = 2;
        $r5[5] = 8;
        $r5[6] = 9;
        $r5[7] = 5;
        $r5[8] = 6;
        $r5[9] = 7;
        $r1[3] = $r5;
        $r6 = newarray (int)[10];
        $r6[0] = 4;
        $r6[2] = 1;
        $r6[3] = 2;
        $r6[4] = 3;
        $r6[5] = 9;
        $r6[6] = 5;
        $r6[7] = 6;
        $r6[8] = 7;
        $r6[9] = 8;
        $r1[4] = $r6;
        $r7 = newarray (int)[10];
        $r7[0] = 5;
        $r7[1] = 9;
        $r7[2] = 8;
        $r7[3] = 7;
        $r7[4] = 6;
        $r7[6] = 4;
        $r7[7] = 3;
        $r7[8] = 2;
        $r7[9] = 1;
        $r1[5] = $r7;
        $r8 = newarray (int)[10];
        $r8[0] = 6;
        $r8[1] = 5;
        $r8[2] = 9;
        $r8[3] = 8;
        $r8[4] = 7;
        $r8[5] = 1;
        $r8[7] = 4;
        $r8[8] = 3;
        $r8[9] = 2;
        $r1[6] = $r8;
        $r9 = newarray (int)[10];
        $r9[0] = 7;
        $r9[1] = 6;
        $r9[2] = 5;
        $r9[3] = 9;
        $r9[4] = 8;
        $r9[5] = 2;
        $r9[6] = 1;
        $r9[8] = 4;
        $r9[9] = 3;
        $r1[7] = $r9;
        $r10 = newarray (int)[10];
        $r10[0] = 8;
        $r10[1] = 7;
        $r10[2] = 6;
        $r10[3] = 5;
        $r10[4] = 9;
        $r10[5] = 3;
        $r10[6] = 2;
        $r10[7] = 1;
        $r10[9] = 4;
        $r1[8] = $r10;
        $r11 = newarray (int)[10];
        $r11[0] = 9;
        $r11[1] = 8;
        $r11[2] = 7;
        $r11[3] = 6;
        $r11[4] = 5;
        $r11[5] = 4;
        $r11[6] = 3;
        $r11[7] = 2;
        $r11[8] = 1;
        $r1[9] = $r11;
        <org.apache.commons.validator.routines.checkdigit.VerhoeffCheckDigit: int[][] D_TABLE> = $r1;
        $r12 = newarray (int[])[8];
        $r13 = newarray (int)[10];
        $r13[1] = 1;
        $r13[2] = 2;
        $r13[3] = 3;
        $r13[4] = 4;
        $r13[5] = 5;
        $r13[6] = 6;
        $r13[7] = 7;
        $r13[8] = 8;
        $r13[9] = 9;
        $r12[0] = $r13;
        $r14 = newarray (int)[10];
        $r14[0] = 1;
        $r14[1] = 5;
        $r14[2] = 7;
        $r14[3] = 6;
        $r14[4] = 2;
        $r14[5] = 8;
        $r14[6] = 3;
        $r14[8] = 9;
        $r14[9] = 4;
        $r12[1] = $r14;
        $r15 = newarray (int)[10];
        $r15[0] = 5;
        $r15[1] = 8;
        $r15[3] = 3;
        $r15[4] = 7;
        $r15[5] = 9;
        $r15[6] = 6;
        $r15[7] = 1;
        $r15[8] = 4;
        $r15[9] = 2;
        $r12[2] = $r15;
        $r16 = newarray (int)[10];
        $r16[0] = 8;
        $r16[1] = 9;
        $r16[2] = 1;
        $r16[3] = 6;
        $r16[5] = 4;
        $r16[6] = 3;
        $r16[7] = 5;
        $r16[8] = 2;
        $r16[9] = 7;
        $r12[3] = $r16;
        $r17 = newarray (int)[10];
        $r17[0] = 9;
        $r17[1] = 4;
        $r17[2] = 5;
        $r17[3] = 3;
        $r17[4] = 1;
        $r17[5] = 2;
        $r17[6] = 6;
        $r17[7] = 8;
        $r17[8] = 7;
        $r12[4] = $r17;
        $r18 = newarray (int)[10];
        $r18[0] = 4;
        $r18[1] = 2;
        $r18[2] = 8;
        $r18[3] = 6;
        $r18[4] = 5;
        $r18[5] = 7;
        $r18[6] = 3;
        $r18[7] = 9;
        $r18[9] = 1;
        $r12[5] = $r18;
        $r19 = newarray (int)[10];
        $r19[0] = 2;
        $r19[1] = 7;
        $r19[2] = 9;
        $r19[3] = 3;
        $r19[4] = 8;
        $r19[6] = 6;
        $r19[7] = 4;
        $r19[8] = 1;
        $r19[9] = 5;
        $r12[6] = $r19;
        $r20 = newarray (int)[10];
        $r20[0] = 7;
        $r20[2] = 4;
        $r20[3] = 6;
        $r20[4] = 9;
        $r20[5] = 1;
        $r20[6] = 3;
        $r20[7] = 2;
        $r20[8] = 5;
        $r20[9] = 8;
        $r12[7] = $r20;
        <org.apache.commons.validator.routines.checkdigit.VerhoeffCheckDigit: int[][] P_TABLE> = $r12;
        $r21 = newarray (int)[10];
        $r21[1] = 4;
        $r21[2] = 3;
        $r21[3] = 2;
        $r21[4] = 1;
        $r21[5] = 5;
        $r21[6] = 6;
        $r21[7] = 7;
        $r21[8] = 8;
        $r21[9] = 9;
        <org.apache.commons.validator.routines.checkdigit.VerhoeffCheckDigit: int[] INV_TABLE> = $r21;
        return;
    }

    public void <init>()
    {
        org.apache.commons.validator.routines.checkdigit.VerhoeffCheckDigit r0;

        r0 := @this: org.apache.commons.validator.routines.checkdigit.VerhoeffCheckDigit;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public boolean isValid(java.lang.String)
    {
        org.apache.commons.validator.routines.checkdigit.VerhoeffCheckDigit r0;
        java.lang.String r1;
        org.apache.commons.validator.routines.checkdigit.CheckDigitException r2, $r3;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.commons.validator.routines.checkdigit.VerhoeffCheckDigit;
        r1 := @parameter0: java.lang.String;
        if r1 == null goto label0;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i0 != 0 goto label1;

     label0:
        return 0;

     label1:
        $i1 = specialinvoke r0.<org.apache.commons.validator.routines.checkdigit.VerhoeffCheckDigit: int calculateChecksum(java.lang.String,boolean)>(r1, 1);
        if $i1 != 0 goto label2;

        return 1;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $r3 := @caughtexception;
        r2 = $r3;
        return 0;

        catch org.apache.commons.validator.routines.checkdigit.CheckDigitException from label1 to label3 with label4;
    }

    public java.lang.String calculate(java.lang.String) throws org.apache.commons.validator.routines.checkdigit.CheckDigitException
    {
        org.apache.commons.validator.routines.checkdigit.VerhoeffCheckDigit r0;
        java.lang.String r1, $r4;
        int i0, $i1, $i2;
        org.apache.commons.validator.routines.checkdigit.CheckDigitException $r2;
        int[] $r3;

        r0 := @this: org.apache.commons.validator.routines.checkdigit.VerhoeffCheckDigit;
        r1 := @parameter0: java.lang.String;
        if r1 == null goto label0;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i1 != 0 goto label1;

     label0:
        $r2 = new org.apache.commons.validator.routines.checkdigit.CheckDigitException;
        specialinvoke $r2.<org.apache.commons.validator.routines.checkdigit.CheckDigitException: void <init>(java.lang.String)>("Code is missing");
        throw $r2;

     label1:
        i0 = specialinvoke r0.<org.apache.commons.validator.routines.checkdigit.VerhoeffCheckDigit: int calculateChecksum(java.lang.String,boolean)>(r1, 0);
        $r3 = <org.apache.commons.validator.routines.checkdigit.VerhoeffCheckDigit: int[] INV_TABLE>;
        $i2 = $r3[i0];
        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);
        return $r4;
    }

    private int calculateChecksum(java.lang.String, boolean) throws org.apache.commons.validator.routines.checkdigit.CheckDigitException
    {
        org.apache.commons.validator.routines.checkdigit.VerhoeffCheckDigit r0;
        java.lang.String r1, $r8;
        boolean z0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i9, $i10, $i11, $i12;
        char $c7, $c8;
        org.apache.commons.validator.routines.checkdigit.CheckDigitException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        int[][] $r9, $r11;
        int[] $r10, $r12;

        r0 := @this: org.apache.commons.validator.routines.checkdigit.VerhoeffCheckDigit;
        r1 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        i0 = 0;
        i1 = 0;
        goto label5;

     label0:
        $i5 = virtualinvoke r1.<java.lang.String: int length()>();
        $i6 = i1 + 1;
        i2 = $i5 - $i6;
        $c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);
        i3 = staticinvoke <java.lang.Character: int getNumericValue(char)>($c7);
        if i3 < 0 goto label1;

        if i3 <= 9 goto label2;

     label1:
        $r2 = new org.apache.commons.validator.routines.checkdigit.CheckDigitException;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid Character[");
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] = \'");
        $c8 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($c8);
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<org.apache.commons.validator.routines.checkdigit.CheckDigitException: void <init>(java.lang.String)>($r8);
        throw $r2;

     label2:
        if z0 == 0 goto label3;

        $i9 = i1;
        goto label4;

     label3:
        $i9 = i1 + 1;

     label4:
        i4 = $i9;
        $r9 = <org.apache.commons.validator.routines.checkdigit.VerhoeffCheckDigit: int[][] D_TABLE>;
        $r10 = $r9[i0];
        $r11 = <org.apache.commons.validator.routines.checkdigit.VerhoeffCheckDigit: int[][] P_TABLE>;
        $i10 = i4 % 8;
        $r12 = $r11[$i10];
        $i11 = $r12[i3];
        i0 = $r10[$i11];
        i1 = i1 + 1;

     label5:
        $i12 = virtualinvoke r1.<java.lang.String: int length()>();
        if i1 < $i12 goto label0;

        return i0;
    }
}
