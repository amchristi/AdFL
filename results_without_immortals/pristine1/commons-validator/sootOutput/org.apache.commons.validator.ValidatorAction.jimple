public class org.apache.commons.validator.ValidatorAction extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private transient org.apache.commons.logging.Log log;
    private java.lang.String name;
    private java.lang.String classname;
    private java.lang.Class validationClass;
    private java.lang.String method;
    private java.lang.reflect.Method validationMethod;
    private java.lang.String methodParams;
    private java.lang.Class[] parameterClasses;
    private java.lang.String depends;
    private java.lang.String msg;
    private java.lang.String jsFunctionName;
    private java.lang.String jsFunction;
    private java.lang.String javascript;
    private java.lang.Object instance;
    private final java.util.List dependencyList;
    private final java.util.List methodParameterList;

    public void <init>()
    {
        org.apache.commons.validator.ValidatorAction r0;
        org.apache.commons.logging.Log $r1;
        java.util.ArrayList $r2, $r4;
        java.util.List $r3;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "org/apache/commons/validator/ValidatorAction");
        r0.<org.apache.commons.validator.ValidatorAction: org.apache.commons.logging.Log log> = $r1;
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.String name> = null;
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.String classname> = null;
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.Class validationClass> = null;
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.String method> = null;
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.reflect.Method validationMethod> = null;
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.String methodParams> = "java.lang.Object,org.apache.commons.validator.ValidatorAction,org.apache.commons.validator.Field";
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.Class[] parameterClasses> = null;
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.String depends> = null;
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.String msg> = null;
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.String jsFunctionName> = null;
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.String jsFunction> = null;
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.String javascript> = null;
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.Object instance> = null;
        $r2 = new java.util.ArrayList;
        specialinvoke $r2.<java.util.ArrayList: void <init>()>();
        $r3 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>($r2);
        r0.<org.apache.commons.validator.ValidatorAction: java.util.List dependencyList> = $r3;
        $r4 = new java.util.ArrayList;
        specialinvoke $r4.<java.util.ArrayList: void <init>()>();
        r0.<org.apache.commons.validator.ValidatorAction: java.util.List methodParameterList> = $r4;
        return;
    }

    public java.lang.String getName()
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        $r1 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.String name>;
        return $r1;
    }

    public void setName(java.lang.String)
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        r1 := @parameter0: java.lang.String;
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.String name> = r1;
        return;
    }

    public java.lang.String getClassname()
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        $r1 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.String classname>;
        return $r1;
    }

    public void setClassname(java.lang.String)
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        r1 := @parameter0: java.lang.String;
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.String classname> = r1;
        return;
    }

    public java.lang.String getMethod()
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        $r1 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.String method>;
        return $r1;
    }

    public void setMethod(java.lang.String)
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        r1 := @parameter0: java.lang.String;
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.String method> = r1;
        return;
    }

    public java.lang.String getMethodParams()
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        $r1 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.String methodParams>;
        return $r1;
    }

    public void setMethodParams(java.lang.String)
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.String r1, r3, $r6;
        java.util.StringTokenizer r2, $r5;
        java.util.List $r4, $r7;
        int $i0;
        boolean $z1;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        r1 := @parameter0: java.lang.String;
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.String methodParams> = r1;
        $r4 = r0.<org.apache.commons.validator.ValidatorAction: java.util.List methodParameterList>;
        interfaceinvoke $r4.<java.util.List: void clear()>();
        $r5 = new java.util.StringTokenizer;
        specialinvoke $r5.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, ",");
        r2 = $r5;
        goto label1;

     label0:
        $r6 = virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>();
        r3 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();
        if r3 == null goto label1;

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();
        if $i0 <= 0 goto label1;

        $r7 = r0.<org.apache.commons.validator.ValidatorAction: java.util.List methodParameterList>;
        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r3);

     label1:
        $z1 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();
        if $z1 != 0 goto label0;

        return;
    }

    public java.lang.String getDepends()
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        $r1 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.String depends>;
        return $r1;
    }

    public void setDepends(java.lang.String)
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.String r1, r3, $r6;
        java.util.StringTokenizer r2, $r5;
        java.util.List $r4, $r7;
        int $i0;
        boolean $z1;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        r1 := @parameter0: java.lang.String;
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.String depends> = r1;
        $r4 = r0.<org.apache.commons.validator.ValidatorAction: java.util.List dependencyList>;
        interfaceinvoke $r4.<java.util.List: void clear()>();
        $r5 = new java.util.StringTokenizer;
        specialinvoke $r5.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, ",");
        r2 = $r5;
        goto label1;

     label0:
        $r6 = virtualinvoke r2.<java.util.StringTokenizer: java.lang.String nextToken()>();
        r3 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();
        if r3 == null goto label1;

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();
        if $i0 <= 0 goto label1;

        $r7 = r0.<org.apache.commons.validator.ValidatorAction: java.util.List dependencyList>;
        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r3);

     label1:
        $z1 = virtualinvoke r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();
        if $z1 != 0 goto label0;

        return;
    }

    public java.lang.String getMsg()
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        $r1 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.String msg>;
        return $r1;
    }

    public void setMsg(java.lang.String)
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        r1 := @parameter0: java.lang.String;
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.String msg> = r1;
        return;
    }

    public java.lang.String getJsFunctionName()
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        $r1 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.String jsFunctionName>;
        return $r1;
    }

    public void setJsFunctionName(java.lang.String)
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        r1 := @parameter0: java.lang.String;
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.String jsFunctionName> = r1;
        return;
    }

    public void setJsFunction(java.lang.String)
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.String r1, $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        r1 := @parameter0: java.lang.String;
        $r2 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.String javascript>;
        if $r2 == null goto label0;

        $r3 = new java.lang.IllegalStateException;
        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot call setJsFunction() after calling setJavascript()");
        throw $r3;

     label0:
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.String jsFunction> = r1;
        return;
    }

    public java.lang.String getJavascript()
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        $r1 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.String javascript>;
        return $r1;
    }

    public void setJavascript(java.lang.String)
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.String r1, $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        r1 := @parameter0: java.lang.String;
        $r2 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.String jsFunction>;
        if $r2 == null goto label0;

        $r3 = new java.lang.IllegalStateException;
        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot call setJavascript() after calling setJsFunction()");
        throw $r3;

     label0:
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.String javascript> = r1;
        return;
    }

    protected void init()
    {
        org.apache.commons.validator.ValidatorAction r0;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        virtualinvoke r0.<org.apache.commons.validator.ValidatorAction: void loadJavascriptFunction()>();
        return;
    }

    protected synchronized void loadJavascriptFunction()
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.String r1, $r4, $r5, $r11, $r12;
        boolean $z0, $z1, $z2, $z3;
        org.apache.commons.logging.Log $r2, $r3, $r6, $r7, $r13, $r14;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        $z0 = specialinvoke r0.<org.apache.commons.validator.ValidatorAction: boolean javascriptAlreadyLoaded()>();
        if $z0 == 0 goto label0;

        return;

     label0:
        $r2 = specialinvoke r0.<org.apache.commons.validator.ValidatorAction: org.apache.commons.logging.Log getLog()>();
        $z1 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();
        if $z1 == 0 goto label1;

        $r3 = specialinvoke r0.<org.apache.commons.validator.ValidatorAction: org.apache.commons.logging.Log getLog()>();
        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("  Loading function begun");

     label1:
        $r4 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.String jsFunction>;
        if $r4 != null goto label2;

        $r5 = specialinvoke r0.<org.apache.commons.validator.ValidatorAction: java.lang.String generateJsFunction()>();
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.String jsFunction> = $r5;

     label2:
        r1 = specialinvoke r0.<org.apache.commons.validator.ValidatorAction: java.lang.String formatJavascriptFileName()>();
        $r6 = specialinvoke r0.<org.apache.commons.validator.ValidatorAction: org.apache.commons.logging.Log getLog()>();
        $z2 = interfaceinvoke $r6.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();
        if $z2 == 0 goto label3;

        $r7 = specialinvoke r0.<org.apache.commons.validator.ValidatorAction: org.apache.commons.logging.Log getLog()>();
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("  Loading js function \'");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r7.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r11);

     label3:
        $r12 = specialinvoke r0.<org.apache.commons.validator.ValidatorAction: java.lang.String readJavascriptFile(java.lang.String)>(r1);
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.String javascript> = $r12;
        $r13 = specialinvoke r0.<org.apache.commons.validator.ValidatorAction: org.apache.commons.logging.Log getLog()>();
        $z3 = interfaceinvoke $r13.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();
        if $z3 == 0 goto label4;

        $r14 = specialinvoke r0.<org.apache.commons.validator.ValidatorAction: org.apache.commons.logging.Log getLog()>();
        interfaceinvoke $r14.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("  Loading javascript function completed");

     label4:
        return;
    }

    private java.lang.String readJavascriptFile(java.lang.String)
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.String r1, $r14, $r20, r21, r34, $r35;
        java.lang.Thread $r2;
        java.lang.ClassLoader r3;
        java.io.InputStream r4;
        java.lang.StringBuilder r5, $r12, $r13, $r15, $r18;
        java.io.BufferedReader r6, $r16;
        null_type n0;
        java.io.IOException r7, $r22, r23, $r25, $r28, r29, $r31, r32;
        java.lang.Throwable r8, $r27;
        java.lang.Class $r9, $r10;
        org.apache.commons.logging.Log $r11, $r24, $r26, $r30, $r33;
        java.io.InputStreamReader $r17;
        boolean $z0;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        r1 := @parameter0: java.lang.String;
        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        r3 = virtualinvoke $r2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
        if r3 != null goto label0;

        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        r3 = virtualinvoke $r9.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label0:
        r4 = virtualinvoke r3.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r1);
        if r4 != null goto label1;

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        r4 = virtualinvoke $r10.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>(r1);

     label1:
        if r4 != null goto label2;

        $r11 = specialinvoke r0.<org.apache.commons.validator.ValidatorAction: org.apache.commons.logging.Log getLog()>();
        $r12 = new java.lang.StringBuilder;
        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("  Unable to read javascript name ");
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r14);
        return null;

     label2:
        $r15 = new java.lang.StringBuilder;
        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();
        r5 = $r15;
        $r16 = new java.io.BufferedReader;
        $r17 = new java.io.InputStreamReader;
        specialinvoke $r17.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r4);
        specialinvoke $r16.<java.io.BufferedReader: void <init>(java.io.Reader)>($r17);
        r6 = $r16;

     label3:
        n0 = null;
        goto label5;

     label4:
        $r18 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);
        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label5:
        $r20 = virtualinvoke r6.<java.io.BufferedReader: java.lang.String readLine()>();
        r21 = $r20;
        if $r20 != null goto label4;

     label6:
        goto label16;

     label7:
        $r22 := @caughtexception;
        r23 = $r22;
        $r24 = specialinvoke r0.<org.apache.commons.validator.ValidatorAction: org.apache.commons.logging.Log getLog()>();
        interfaceinvoke $r24.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("Error reading javascript file.", r23);

     label8:
        virtualinvoke r6.<java.io.BufferedReader: void close()>();

     label9:
        goto label19;

     label10:
        $r25 := @caughtexception;
        r7 = $r25;
        $r26 = specialinvoke r0.<org.apache.commons.validator.ValidatorAction: org.apache.commons.logging.Log getLog()>();
        interfaceinvoke $r26.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("Error closing stream to javascript file.", r7);
        goto label19;

     label11:
        $r27 := @caughtexception;
        r8 = $r27;

     label12:
        virtualinvoke r6.<java.io.BufferedReader: void close()>();

     label13:
        goto label15;

     label14:
        $r28 := @caughtexception;
        r29 = $r28;
        $r30 = specialinvoke r0.<org.apache.commons.validator.ValidatorAction: org.apache.commons.logging.Log getLog()>();
        interfaceinvoke $r30.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("Error closing stream to javascript file.", r29);

     label15:
        throw r8;

     label16:
        virtualinvoke r6.<java.io.BufferedReader: void close()>();

     label17:
        goto label19;

     label18:
        $r31 := @caughtexception;
        r32 = $r31;
        $r33 = specialinvoke r0.<org.apache.commons.validator.ValidatorAction: org.apache.commons.logging.Log getLog()>();
        interfaceinvoke $r33.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>("Error closing stream to javascript file.", r32);

     label19:
        r34 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();
        $z0 = virtualinvoke r34.<java.lang.String: boolean equals(java.lang.Object)>("");
        if $z0 == 0 goto label20;

        $r35 = null;
        goto label21;

     label20:
        $r35 = r34;

     label21:
        return $r35;

        catch java.io.IOException from label3 to label6 with label7;
        catch java.io.IOException from label8 to label9 with label10;
        catch java.lang.Throwable from label3 to label8 with label11;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.io.IOException from label16 to label17 with label18;
    }

    private java.lang.String formatJavascriptFileName()
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.String r1, $r2, $r3, $r5, $r6, $r7;
        boolean $z0;
        java.lang.StringBuilder $r4, $r8;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        $r2 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.String jsFunction>;
        r1 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(1);
        $r3 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.String jsFunction>;
        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("/");
        if $z0 != 0 goto label0;

        $r4 = new java.lang.StringBuilder;
        $r5 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.String jsFunction>;
        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String replace(char,char)>(46, 47);
        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6);
        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r7);
        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".js");
        r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label0:
        return r1;
    }

    private boolean javascriptAlreadyLoaded()
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        $r1 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.String javascript>;
        if $r1 == null goto label0;

        return 1;

     label0:
        return 0;
    }

    private java.lang.String generateJsFunction()
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.StringBuilder $r1, r2;
        java.lang.String $r4, $r5, $r6, $r8, $r9, $r10, $r12;
        int $i0;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("org.apache.commons.validator.javascript");
        r2 = $r1;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".validate");
        $r4 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.String name>;
        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, 1);
        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String toUpperCase()>();
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
        $r8 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.String name>;
        $r9 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.String name>;
        $i0 = virtualinvoke $r9.<java.lang.String: int length()>();
        $r10 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>(1, $i0);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);
        $r12 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r12;
    }

    public boolean isDependency(java.lang.String)
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.String r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        r1 := @parameter0: java.lang.String;
        $r2 = r0.<org.apache.commons.validator.ValidatorAction: java.util.List dependencyList>;
        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);
        return $z0;
    }

    public java.util.List getDependencyList()
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.util.List $r1, $r2;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        $r1 = r0.<org.apache.commons.validator.ValidatorAction: java.util.List dependencyList>;
        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);
        return $r2;
    }

    public java.lang.String toString()
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.StringBuilder $r1, r2;
        java.lang.String $r3, $r6;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("ValidatorAction: ");
        r2 = $r1;
        $r3 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.String name>;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r6;
    }

    boolean executeValidationMethod(org.apache.commons.validator.Field, java.util.Map, org.apache.commons.validator.ValidatorResults, int) throws org.apache.commons.validator.ValidatorException
    {
        org.apache.commons.validator.ValidatorAction r0, r4;
        org.apache.commons.validator.Field r1;
        java.util.Map r2;
        org.apache.commons.validator.ValidatorResults r3;
        int i0;
        java.lang.ClassLoader r5;
        java.lang.IllegalArgumentException r6, $r15;
        java.lang.reflect.Method $r8, $r13;
        java.lang.Throwable $r10, $r24, $r25, $r27, $r28;
        java.lang.Object[] r11;
        boolean $z0, $z1, $z2, z3, $z4, $z5;
        java.lang.Object r12, $r14;
        org.apache.commons.validator.ValidatorException $r16, $r20, $r33;
        java.lang.String $r17, $r21, $r30, $r36, $r38, $r39;
        java.lang.IllegalAccessException $r18, r19;
        java.lang.reflect.InvocationTargetException $r22, r23;
        java.lang.Exception $r26, $r31, r32;
        java.lang.Error $r29;
        org.apache.commons.logging.Log $r34;
        java.lang.StringBuilder $r35, $r37;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        r1 := @parameter0: org.apache.commons.validator.Field;
        r2 := @parameter1: java.util.Map;
        r3 := @parameter2: org.apache.commons.validator.ValidatorResults;
        i0 := @parameter3: int;
        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.apache.commons.validator.ValidatorAction", r0);

     label0:
        $r8 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.reflect.Method validationMethod>;
        if $r8 != null goto label6;

        r4 = r0;
        entermonitor r0;

     label1:
        r5 = specialinvoke r0.<org.apache.commons.validator.ValidatorAction: java.lang.ClassLoader getClassLoader(java.util.Map)>(r2);
        specialinvoke r0.<org.apache.commons.validator.ValidatorAction: void loadValidationClass(java.lang.ClassLoader)>(r5);
        specialinvoke r0.<org.apache.commons.validator.ValidatorAction: void loadParameterClasses(java.lang.ClassLoader)>(r5);
        specialinvoke r0.<org.apache.commons.validator.ValidatorAction: void loadValidationMethod()>();
        exitmonitor r4;

     label2:
        goto label6;

     label3:
        $r10 := @caughtexception;

     label4:
        exitmonitor r4;

     label5:
        throw $r10;

     label6:
        r11 = specialinvoke r0.<org.apache.commons.validator.ValidatorAction: java.lang.Object[] getParameterValues(java.util.Map)>(r2);
        $z0 = virtualinvoke r1.<org.apache.commons.validator.Field: boolean isIndexed()>();
        if $z0 == 0 goto label7;

        specialinvoke r0.<org.apache.commons.validator.ValidatorAction: void handleIndexedField(org.apache.commons.validator.Field,int,java.lang.Object[])>(r1, i0, r11);

     label7:
        r12 = null;

     label8:
        $r13 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.reflect.Method validationMethod>;
        $r14 = specialinvoke r0.<org.apache.commons.validator.ValidatorAction: java.lang.Object getValidationClassInstance()>();
        r12 = virtualinvoke $r13.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r14, r11);

     label9:
        goto label14;

     label10:
        $r15 := @caughtexception;
        r6 = $r15;
        $r16 = new org.apache.commons.validator.ValidatorException;
        $r17 = virtualinvoke r6.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();
        specialinvoke $r16.<org.apache.commons.validator.ValidatorException: void <init>(java.lang.String)>($r17);
        throw $r16;

     label11:
        $r18 := @caughtexception;
        r19 = $r18;
        $r20 = new org.apache.commons.validator.ValidatorException;
        $r21 = virtualinvoke r19.<java.lang.IllegalAccessException: java.lang.String getMessage()>();
        specialinvoke $r20.<org.apache.commons.validator.ValidatorException: void <init>(java.lang.String)>($r21);
        throw $r20;

     label12:
        $r22 := @caughtexception;
        r23 = $r22;
        $r24 = virtualinvoke r23.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();
        $z1 = $r24 instanceof java.lang.Exception;
        if $z1 == 0 goto label13;

        $r25 = virtualinvoke r23.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();
        $r26 = (java.lang.Exception) $r25;
        throw $r26;

     label13:
        $r27 = virtualinvoke r23.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();
        $z2 = $r27 instanceof java.lang.Error;
        if $z2 == 0 goto label14;

        $r28 = virtualinvoke r23.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();
        $r29 = (java.lang.Error) $r28;
        throw $r29;

     label14:
        z3 = specialinvoke r0.<org.apache.commons.validator.ValidatorAction: boolean isValid(java.lang.Object)>(r12);
        if z3 == 0 goto label15;

        if z3 == 0 goto label16;

        $z4 = specialinvoke r0.<org.apache.commons.validator.ValidatorAction: boolean onlyReturnErrors(java.util.Map)>(r2);
        if $z4 != 0 goto label16;

     label15:
        $r30 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.String name>;
        virtualinvoke r3.<org.apache.commons.validator.ValidatorResults: void add(org.apache.commons.validator.Field,java.lang.String,boolean,java.lang.Object)>(r1, $r30, z3, r12);

     label16:
        if z3 != 0 goto label20;

     label17:
        return 0;

     label18:
        $r31 := @caughtexception;
        r32 = $r31;
        $z5 = r32 instanceof org.apache.commons.validator.ValidatorException;
        if $z5 == 0 goto label19;

        $r33 = (org.apache.commons.validator.ValidatorException) r32;
        throw $r33;

     label19:
        $r34 = specialinvoke r0.<org.apache.commons.validator.ValidatorAction: org.apache.commons.logging.Log getLog()>();
        $r35 = new java.lang.StringBuilder;
        specialinvoke $r35.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unhandled exception thrown during validation: ");
        $r36 = virtualinvoke r32.<java.lang.Exception: java.lang.String getMessage()>();
        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);
        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke $r34.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r38, r32);
        $r39 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.String name>;
        virtualinvoke r3.<org.apache.commons.validator.ValidatorResults: void add(org.apache.commons.validator.Field,java.lang.String,boolean)>(r1, $r39, 0);
        return 0;

     label20:
        return 1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
        catch java.lang.IllegalArgumentException from label8 to label9 with label10;
        catch java.lang.IllegalAccessException from label8 to label9 with label11;
        catch java.lang.reflect.InvocationTargetException from label8 to label9 with label12;
        catch java.lang.Exception from label0 to label17 with label18;
    }

    private void loadValidationMethod() throws org.apache.commons.validator.ValidatorException
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.NoSuchMethodException r1, $r7;
        java.lang.reflect.Method $r2, $r6;
        java.lang.Class $r3;
        java.lang.String $r4, $r10, $r12;
        java.lang.Class[] $r5;
        org.apache.commons.validator.ValidatorException $r8;
        java.lang.StringBuilder $r9, $r11;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        $r2 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.reflect.Method validationMethod>;
        if $r2 == null goto label0;

        return;

     label0:
        $r3 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.Class validationClass>;
        $r4 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.String method>;
        $r5 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.Class[] parameterClasses>;
        $r6 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r4, $r5);
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.reflect.Method validationMethod> = $r6;

     label1:
        goto label3;

     label2:
        $r7 := @caughtexception;
        r1 = $r7;
        $r8 = new org.apache.commons.validator.ValidatorException;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("No such validation method: ");
        $r10 = virtualinvoke r1.<java.lang.NoSuchMethodException: java.lang.String getMessage()>();
        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r8.<org.apache.commons.validator.ValidatorException: void <init>(java.lang.String)>($r12);
        throw $r8;

     label3:
        return;

        catch java.lang.NoSuchMethodException from label0 to label1 with label2;
    }

    private void loadValidationClass(java.lang.ClassLoader) throws org.apache.commons.validator.ValidatorException
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.ClassLoader r1;
        java.lang.ClassNotFoundException r2, $r6;
        java.lang.Class $r3, $r5;
        java.lang.String $r4, $r8;
        org.apache.commons.validator.ValidatorException $r7;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        r1 := @parameter0: java.lang.ClassLoader;
        $r3 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.Class validationClass>;
        if $r3 == null goto label0;

        return;

     label0:
        $r4 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.String classname>;
        $r5 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r4);
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.Class validationClass> = $r5;

     label1:
        goto label3;

     label2:
        $r6 := @caughtexception;
        r2 = $r6;
        $r7 = new org.apache.commons.validator.ValidatorException;
        $r8 = virtualinvoke r2.<java.lang.ClassNotFoundException: java.lang.String toString()>();
        specialinvoke $r7.<org.apache.commons.validator.ValidatorException: void <init>(java.lang.String)>($r8);
        throw $r7;

     label3:
        return;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    private void loadParameterClasses(java.lang.ClassLoader) throws org.apache.commons.validator.ValidatorException
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.ClassLoader r1;
        java.lang.Class[] r2, $r5;
        int i0, $i1, $i2;
        java.lang.String r3, $r12;
        java.lang.ClassNotFoundException r4, $r10;
        java.util.List $r6, $r7, $r13;
        java.lang.Object $r8;
        java.lang.Class $r9;
        org.apache.commons.validator.ValidatorException $r11;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        r1 := @parameter0: java.lang.ClassLoader;
        $r5 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.Class[] parameterClasses>;
        if $r5 == null goto label0;

        return;

     label0:
        $r6 = r0.<org.apache.commons.validator.ValidatorAction: java.util.List methodParameterList>;
        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();
        r2 = newarray (java.lang.Class)[$i1];
        i0 = 0;
        goto label6;

     label1:
        $r7 = r0.<org.apache.commons.validator.ValidatorAction: java.util.List methodParameterList>;
        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i0);
        r3 = (java.lang.String) $r8;

     label2:
        $r9 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r3);
        r2[i0] = $r9;

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;
        r4 = $r10;
        $r11 = new org.apache.commons.validator.ValidatorException;
        $r12 = virtualinvoke r4.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();
        specialinvoke $r11.<org.apache.commons.validator.ValidatorException: void <init>(java.lang.String)>($r12);
        throw $r11;

     label5:
        i0 = i0 + 1;

     label6:
        $r13 = r0.<org.apache.commons.validator.ValidatorAction: java.util.List methodParameterList>;
        $i2 = interfaceinvoke $r13.<java.util.List: int size()>();
        if i0 < $i2 goto label1;

        r0.<org.apache.commons.validator.ValidatorAction: java.lang.Class[] parameterClasses> = r2;
        return;

        catch java.lang.ClassNotFoundException from label2 to label3 with label4;
    }

    private java.lang.Object[] getParameterValues(java.util.Map)
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.util.Map r1;
        java.lang.Object[] r2;
        int i0, $i1, $i2;
        java.lang.String r3;
        java.util.List $r4, $r5, $r8;
        java.lang.Object $r6, $r7;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        r1 := @parameter0: java.util.Map;
        $r4 = r0.<org.apache.commons.validator.ValidatorAction: java.util.List methodParameterList>;
        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();
        r2 = newarray (java.lang.Object)[$i1];
        i0 = 0;
        goto label1;

     label0:
        $r5 = r0.<org.apache.commons.validator.ValidatorAction: java.util.List methodParameterList>;
        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i0);
        r3 = (java.lang.String) $r6;
        $r7 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);
        r2[i0] = $r7;
        i0 = i0 + 1;

     label1:
        $r8 = r0.<org.apache.commons.validator.ValidatorAction: java.util.List methodParameterList>;
        $i2 = interfaceinvoke $r8.<java.util.List: int size()>();
        if i0 < $i2 goto label0;

        return r2;
    }

    private java.lang.Object getValidationClassInstance() throws org.apache.commons.validator.ValidatorException
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.InstantiationException r1, $r7;
        java.lang.String r2, $r9, $r12, $r18, $r21, r23;
        java.lang.reflect.Method $r3;
        int $i0;
        boolean $z0;
        java.lang.Object $r4, $r6, $r25;
        java.lang.Class $r5;
        java.lang.StringBuilder $r8, $r10, $r11, $r13, $r17, $r19, $r20, $r22;
        org.apache.commons.validator.ValidatorException $r14, $r24;
        java.lang.IllegalAccessException $r15, r16;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        $r3 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.reflect.Method validationMethod>;
        $i0 = virtualinvoke $r3.<java.lang.reflect.Method: int getModifiers()>();
        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);
        if $z0 == 0 goto label0;

        r0.<org.apache.commons.validator.ValidatorAction: java.lang.Object instance> = null;
        goto label5;

     label0:
        $r4 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.Object instance>;
        if $r4 != null goto label5;

     label1:
        $r5 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.Class validationClass>;
        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Object newInstance()>();
        r0.<org.apache.commons.validator.ValidatorAction: java.lang.Object instance> = $r6;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;
        r1 = $r7;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Couldn\'t create instance of ");
        $r9 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.String classname>;
        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  ");
        $r12 = virtualinvoke r1.<java.lang.InstantiationException: java.lang.String getMessage()>();
        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);
        r2 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        $r14 = new org.apache.commons.validator.ValidatorException;
        specialinvoke $r14.<org.apache.commons.validator.ValidatorException: void <init>(java.lang.String)>(r2);
        throw $r14;

     label4:
        $r15 := @caughtexception;
        r16 = $r15;
        $r17 = new java.lang.StringBuilder;
        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Couldn\'t create instance of ");
        $r18 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.String classname>;
        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  ");
        $r21 = virtualinvoke r16.<java.lang.IllegalAccessException: java.lang.String getMessage()>();
        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);
        r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();
        $r24 = new org.apache.commons.validator.ValidatorException;
        specialinvoke $r24.<org.apache.commons.validator.ValidatorException: void <init>(java.lang.String)>(r23);
        throw $r24;

     label5:
        $r25 = r0.<org.apache.commons.validator.ValidatorAction: java.lang.Object instance>;
        return $r25;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }

    private void handleIndexedField(org.apache.commons.validator.Field, int, java.lang.Object[]) throws org.apache.commons.validator.ValidatorException
    {
        org.apache.commons.validator.ValidatorAction r0;
        org.apache.commons.validator.Field r1, r4;
        int i0, i1, i2;
        java.lang.Object[] r2, r3;
        java.util.List $r5, $r6;
        java.lang.Object $r7, $r8, $r9;
        java.lang.String $r10, $r14, $r15;
        java.lang.StringBuilder $r11, $r12, $r13;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        r1 := @parameter0: org.apache.commons.validator.Field;
        i0 := @parameter1: int;
        r2 := @parameter2: java.lang.Object[];
        $r5 = r0.<org.apache.commons.validator.ValidatorAction: java.util.List methodParameterList>;
        i1 = interfaceinvoke $r5.<java.util.List: int indexOf(java.lang.Object)>("java.lang.Object");
        $r6 = r0.<org.apache.commons.validator.ValidatorAction: java.util.List methodParameterList>;
        i2 = interfaceinvoke $r6.<java.util.List: int indexOf(java.lang.Object)>("org.apache.commons.validator.Field");
        $r7 = r2[i1];
        r3 = virtualinvoke r1.<org.apache.commons.validator.Field: java.lang.Object[] getIndexedProperty(java.lang.Object)>($r7);
        $r8 = r3[i0];
        r2[i1] = $r8;
        $r9 = virtualinvoke r1.<org.apache.commons.validator.Field: java.lang.Object clone()>();
        r4 = (org.apache.commons.validator.Field) $r9;
        $r10 = virtualinvoke r4.<org.apache.commons.validator.Field: java.lang.String getKey()>();
        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("[");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();
        $r15 = staticinvoke <org.apache.commons.validator.util.ValidatorUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>($r10, "[]", $r14);
        virtualinvoke r4.<org.apache.commons.validator.Field: void setKey(java.lang.String)>($r15);
        r2[i2] = r4;
        return;
    }

    private boolean isValid(java.lang.Object)
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.lang.Object r1;
        java.lang.Boolean r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        r1 := @parameter0: java.lang.Object;
        $z0 = r1 instanceof java.lang.Boolean;
        if $z0 == 0 goto label0;

        r2 = (java.lang.Boolean) r1;
        $z1 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>();
        return $z1;

     label0:
        if r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    private java.lang.ClassLoader getClassLoader(java.util.Map)
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.util.Map r1;
        org.apache.commons.validator.Validator r2;
        java.lang.Object $r3;
        java.lang.ClassLoader $r4;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        r1 := @parameter0: java.util.Map;
        $r3 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.apache.commons.validator.Validator");
        r2 = (org.apache.commons.validator.Validator) $r3;
        $r4 = virtualinvoke r2.<org.apache.commons.validator.Validator: java.lang.ClassLoader getClassLoader()>();
        return $r4;
    }

    private boolean onlyReturnErrors(java.util.Map)
    {
        org.apache.commons.validator.ValidatorAction r0;
        java.util.Map r1;
        org.apache.commons.validator.Validator r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        r1 := @parameter0: java.util.Map;
        $r3 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("org.apache.commons.validator.Validator");
        r2 = (org.apache.commons.validator.Validator) $r3;
        $z0 = virtualinvoke r2.<org.apache.commons.validator.Validator: boolean getOnlyReturnErrors()>();
        return $z0;
    }

    private org.apache.commons.logging.Log getLog()
    {
        org.apache.commons.validator.ValidatorAction r0;
        org.apache.commons.logging.Log $r1, $r2, $r3;

        r0 := @this: org.apache.commons.validator.ValidatorAction;
        $r1 = r0.<org.apache.commons.validator.ValidatorAction: org.apache.commons.logging.Log log>;
        if $r1 != null goto label0;

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "org/apache/commons/validator/ValidatorAction");
        r0.<org.apache.commons.validator.ValidatorAction: org.apache.commons.logging.Log log> = $r2;

     label0:
        $r3 = r0.<org.apache.commons.validator.ValidatorAction: org.apache.commons.logging.Log log>;
        return $r3;
    }
}
