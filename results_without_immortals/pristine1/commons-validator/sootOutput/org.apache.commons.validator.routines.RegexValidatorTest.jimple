public class org.apache.commons.validator.routines.RegexValidatorTest extends junit.framework.TestCase
{
    private static final java.lang.String REGEX;
    private static final java.lang.String COMPONENT_1;
    private static final java.lang.String COMPONENT_2;
    private static final java.lang.String COMPONENT_3;
    private static final java.lang.String SEPARATOR_1;
    private static final java.lang.String SEPARATOR_2;
    private static final java.lang.String REGEX_1;
    private static final java.lang.String REGEX_2;
    private static final java.lang.String REGEX_3;
    private static final java.lang.String[] MULTIPLE_REGEX;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[3];
        $r0[0] = "^([abc]{3})(?:\\-)([DEF]{3})(?:\\-)([123]{3})$";
        $r0[1] = "^([abc]{3})(?:\\s)([DEF]{3})(?:\\s)([123]{3})$";
        $r0[2] = "^([abc]{3})([DEF]{3})([123]{3})$";
        <org.apache.commons.validator.routines.RegexValidatorTest: java.lang.String[] MULTIPLE_REGEX> = $r0;
        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.commons.validator.routines.RegexValidatorTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.validator.routines.RegexValidatorTest;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<junit.framework.TestCase: void <init>(java.lang.String)>(r1);
        return;
    }

    protected void setUp() throws java.lang.Exception
    {
        org.apache.commons.validator.routines.RegexValidatorTest r0;

        r0 := @this: org.apache.commons.validator.routines.RegexValidatorTest;
        specialinvoke r0.<junit.framework.TestCase: void setUp()>();
        return;
    }

    protected void tearDown() throws java.lang.Exception
    {
        org.apache.commons.validator.routines.RegexValidatorTest r0;

        r0 := @this: org.apache.commons.validator.routines.RegexValidatorTest;
        specialinvoke r0.<junit.framework.TestCase: void tearDown()>();
        return;
    }

    public void testSingle()
    {
        org.apache.commons.validator.routines.RegexValidatorTest r0;
        org.apache.commons.validator.routines.RegexValidator $r1, r2, r3, $r4, $r15, $r18;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r5, $r6, $r7, $r8, $r16;
        java.lang.String[] $r9, $r10, $r11, $r12, $r13, $r14, $r17, $r19;

        r0 := @this: org.apache.commons.validator.routines.RegexValidatorTest;
        $r1 = new org.apache.commons.validator.routines.RegexValidator;
        specialinvoke $r1.<org.apache.commons.validator.routines.RegexValidator: void <init>(java.lang.String)>("^([abc]*)(?:\\-)([DEF]*)(?:\\-)([123]*)$");
        r2 = $r1;
        $r4 = new org.apache.commons.validator.routines.RegexValidator;
        specialinvoke $r4.<org.apache.commons.validator.routines.RegexValidator: void <init>(java.lang.String,boolean)>("^([abc]*)(?:\\-)([DEF]*)(?:\\-)([123]*)$", 0);
        r3 = $r4;
        $z0 = virtualinvoke r2.<org.apache.commons.validator.routines.RegexValidator: boolean isValid(java.lang.String)>("ac-DE-1");
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,boolean,boolean)>("Sensitive isValid() valid", 1, $z0);
        $z1 = virtualinvoke r2.<org.apache.commons.validator.routines.RegexValidator: boolean isValid(java.lang.String)>("AB-de-1");
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,boolean,boolean)>("Sensitive isValid() invalid", 0, $z1);
        $z2 = virtualinvoke r3.<org.apache.commons.validator.routines.RegexValidator: boolean isValid(java.lang.String)>("AB-de-1");
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,boolean,boolean)>("Insensitive isValid() valid", 1, $z2);
        $z3 = virtualinvoke r3.<org.apache.commons.validator.routines.RegexValidator: boolean isValid(java.lang.String)>("ABd-de-1");
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,boolean,boolean)>("Insensitive isValid() invalid", 0, $z3);
        $r5 = virtualinvoke r2.<org.apache.commons.validator.routines.RegexValidator: java.lang.String validate(java.lang.String)>("ac-DE-1");
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Sensitive validate() valid", "acDE1", $r5);
        $r6 = virtualinvoke r2.<org.apache.commons.validator.routines.RegexValidator: java.lang.String validate(java.lang.String)>("AB-de-1");
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Sensitive validate() invalid", null, $r6);
        $r7 = virtualinvoke r3.<org.apache.commons.validator.routines.RegexValidator: java.lang.String validate(java.lang.String)>("AB-de-1");
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Insensitive validate() valid", "ABde1", $r7);
        $r8 = virtualinvoke r3.<org.apache.commons.validator.routines.RegexValidator: java.lang.String validate(java.lang.String)>("ABd-de-1");
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Insensitive validate() invalid", null, $r8);
        $r9 = newarray (java.lang.String)[3];
        $r9[0] = "ac";
        $r9[1] = "DE";
        $r9[2] = "1";
        $r10 = virtualinvoke r2.<org.apache.commons.validator.routines.RegexValidator: java.lang.String[] match(java.lang.String)>("ac-DE-1");
        specialinvoke r0.<org.apache.commons.validator.routines.RegexValidatorTest: void checkArray(java.lang.String,java.lang.String[],java.lang.String[])>("Sensitive match() valid", $r9, $r10);
        $r11 = virtualinvoke r2.<org.apache.commons.validator.routines.RegexValidator: java.lang.String[] match(java.lang.String)>("AB-de-1");
        specialinvoke r0.<org.apache.commons.validator.routines.RegexValidatorTest: void checkArray(java.lang.String,java.lang.String[],java.lang.String[])>("Sensitive match() invalid", null, $r11);
        $r12 = newarray (java.lang.String)[3];
        $r12[0] = "AB";
        $r12[1] = "de";
        $r12[2] = "1";
        $r13 = virtualinvoke r3.<org.apache.commons.validator.routines.RegexValidator: java.lang.String[] match(java.lang.String)>("AB-de-1");
        specialinvoke r0.<org.apache.commons.validator.routines.RegexValidatorTest: void checkArray(java.lang.String,java.lang.String[],java.lang.String[])>("Insensitive match() valid", $r12, $r13);
        $r14 = virtualinvoke r3.<org.apache.commons.validator.routines.RegexValidator: java.lang.String[] match(java.lang.String)>("ABd-de-1");
        specialinvoke r0.<org.apache.commons.validator.routines.RegexValidatorTest: void checkArray(java.lang.String,java.lang.String[],java.lang.String[])>("Insensitive match() invalid", null, $r14);
        $r15 = new org.apache.commons.validator.routines.RegexValidator;
        specialinvoke $r15.<org.apache.commons.validator.routines.RegexValidator: void <init>(java.lang.String)>("^([A-Z]*)$");
        $r16 = virtualinvoke $r15.<org.apache.commons.validator.routines.RegexValidator: java.lang.String validate(java.lang.String)>("ABC");
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("validate one", "ABC", $r16);
        $r17 = newarray (java.lang.String)[1];
        $r17[0] = "ABC";
        $r18 = new org.apache.commons.validator.routines.RegexValidator;
        specialinvoke $r18.<org.apache.commons.validator.routines.RegexValidator: void <init>(java.lang.String)>("^([A-Z]*)$");
        $r19 = virtualinvoke $r18.<org.apache.commons.validator.routines.RegexValidator: java.lang.String[] match(java.lang.String)>("ABC");
        specialinvoke r0.<org.apache.commons.validator.routines.RegexValidatorTest: void checkArray(java.lang.String,java.lang.String[],java.lang.String[])>("match one", $r17, $r19);
        return;
    }

    public void testMultipleSensitive()
    {
        org.apache.commons.validator.routines.RegexValidatorTest r0;
        org.apache.commons.validator.routines.RegexValidator $r1, r3, r4, r5, r6, $r10, $r11, $r12;
        java.lang.String[] $r2, r9, $r13, $r18, $r19, $r20, $r21, $r24;
        java.lang.String r7, r8, $r14, $r15, $r16, $r17, r22, $r23;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.commons.validator.routines.RegexValidatorTest;
        $r1 = new org.apache.commons.validator.routines.RegexValidator;
        $r2 = <org.apache.commons.validator.routines.RegexValidatorTest: java.lang.String[] MULTIPLE_REGEX>;
        specialinvoke $r1.<org.apache.commons.validator.routines.RegexValidator: void <init>(java.lang.String[])>($r2);
        r3 = $r1;
        $r10 = new org.apache.commons.validator.routines.RegexValidator;
        specialinvoke $r10.<org.apache.commons.validator.routines.RegexValidator: void <init>(java.lang.String)>("^([abc]{3})(?:\\-)([DEF]{3})(?:\\-)([123]{3})$");
        r4 = $r10;
        $r11 = new org.apache.commons.validator.routines.RegexValidator;
        specialinvoke $r11.<org.apache.commons.validator.routines.RegexValidator: void <init>(java.lang.String)>("^([abc]{3})(?:\\s)([DEF]{3})(?:\\s)([123]{3})$");
        r5 = $r11;
        $r12 = new org.apache.commons.validator.routines.RegexValidator;
        specialinvoke $r12.<org.apache.commons.validator.routines.RegexValidator: void <init>(java.lang.String)>("^([abc]{3})([DEF]{3})([123]{3})$");
        r6 = $r12;
        r7 = "aac FDE 321";
        r8 = "aacFDE321";
        $r13 = newarray (java.lang.String)[3];
        $r13[0] = "aac";
        $r13[1] = "FDE";
        $r13[2] = "321";
        r9 = $r13;
        $z0 = virtualinvoke r3.<org.apache.commons.validator.routines.RegexValidator: boolean isValid(java.lang.String)>(r7);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,boolean,boolean)>("Sensitive isValid() Multiple", 1, $z0);
        $z1 = virtualinvoke r4.<org.apache.commons.validator.routines.RegexValidator: boolean isValid(java.lang.String)>(r7);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,boolean,boolean)>("Sensitive isValid() 1st", 0, $z1);
        $z2 = virtualinvoke r5.<org.apache.commons.validator.routines.RegexValidator: boolean isValid(java.lang.String)>(r7);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,boolean,boolean)>("Sensitive isValid() 2nd", 1, $z2);
        $z3 = virtualinvoke r6.<org.apache.commons.validator.routines.RegexValidator: boolean isValid(java.lang.String)>(r7);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,boolean,boolean)>("Sensitive isValid() 3rd", 0, $z3);
        $r14 = virtualinvoke r3.<org.apache.commons.validator.routines.RegexValidator: java.lang.String validate(java.lang.String)>(r7);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Sensitive validate() Multiple", r8, $r14);
        $r15 = virtualinvoke r4.<org.apache.commons.validator.routines.RegexValidator: java.lang.String validate(java.lang.String)>(r7);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Sensitive validate() 1st", null, $r15);
        $r16 = virtualinvoke r5.<org.apache.commons.validator.routines.RegexValidator: java.lang.String validate(java.lang.String)>(r7);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Sensitive validate() 2nd", r8, $r16);
        $r17 = virtualinvoke r6.<org.apache.commons.validator.routines.RegexValidator: java.lang.String validate(java.lang.String)>(r7);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Sensitive validate() 3rd", null, $r17);
        $r18 = virtualinvoke r3.<org.apache.commons.validator.routines.RegexValidator: java.lang.String[] match(java.lang.String)>(r7);
        specialinvoke r0.<org.apache.commons.validator.routines.RegexValidatorTest: void checkArray(java.lang.String,java.lang.String[],java.lang.String[])>("Sensitive match() Multiple", r9, $r18);
        $r19 = virtualinvoke r4.<org.apache.commons.validator.routines.RegexValidator: java.lang.String[] match(java.lang.String)>(r7);
        specialinvoke r0.<org.apache.commons.validator.routines.RegexValidatorTest: void checkArray(java.lang.String,java.lang.String[],java.lang.String[])>("Sensitive match() 1st", null, $r19);
        $r20 = virtualinvoke r5.<org.apache.commons.validator.routines.RegexValidator: java.lang.String[] match(java.lang.String)>(r7);
        specialinvoke r0.<org.apache.commons.validator.routines.RegexValidatorTest: void checkArray(java.lang.String,java.lang.String[],java.lang.String[])>("Sensitive match() 2nd", r9, $r20);
        $r21 = virtualinvoke r6.<org.apache.commons.validator.routines.RegexValidator: java.lang.String[] match(java.lang.String)>(r7);
        specialinvoke r0.<org.apache.commons.validator.routines.RegexValidatorTest: void checkArray(java.lang.String,java.lang.String[],java.lang.String[])>("Sensitive match() 3rd", null, $r21);
        r22 = "AAC*FDE*321";
        $z4 = virtualinvoke r3.<org.apache.commons.validator.routines.RegexValidator: boolean isValid(java.lang.String)>(r22);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,boolean,boolean)>("isValid() Invalid", 0, $z4);
        $r23 = virtualinvoke r3.<org.apache.commons.validator.routines.RegexValidator: java.lang.String validate(java.lang.String)>(r22);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("validate() Invalid", null, $r23);
        $r24 = virtualinvoke r3.<org.apache.commons.validator.routines.RegexValidator: java.lang.String[] match(java.lang.String)>(r22);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("match() Multiple", null, $r24);
        return;
    }

    public void testMultipleInsensitive()
    {
        org.apache.commons.validator.routines.RegexValidatorTest r0;
        org.apache.commons.validator.routines.RegexValidator $r1, r3, r4, r5, r6, $r10, $r11, $r12;
        java.lang.String[] $r2, r9, $r13, $r18, $r19, $r20, $r21, $r24;
        java.lang.String r7, r8, $r14, $r15, $r16, $r17, r22, $r23;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.commons.validator.routines.RegexValidatorTest;
        $r1 = new org.apache.commons.validator.routines.RegexValidator;
        $r2 = <org.apache.commons.validator.routines.RegexValidatorTest: java.lang.String[] MULTIPLE_REGEX>;
        specialinvoke $r1.<org.apache.commons.validator.routines.RegexValidator: void <init>(java.lang.String[],boolean)>($r2, 0);
        r3 = $r1;
        $r10 = new org.apache.commons.validator.routines.RegexValidator;
        specialinvoke $r10.<org.apache.commons.validator.routines.RegexValidator: void <init>(java.lang.String,boolean)>("^([abc]{3})(?:\\-)([DEF]{3})(?:\\-)([123]{3})$", 0);
        r4 = $r10;
        $r11 = new org.apache.commons.validator.routines.RegexValidator;
        specialinvoke $r11.<org.apache.commons.validator.routines.RegexValidator: void <init>(java.lang.String,boolean)>("^([abc]{3})(?:\\s)([DEF]{3})(?:\\s)([123]{3})$", 0);
        r5 = $r11;
        $r12 = new org.apache.commons.validator.routines.RegexValidator;
        specialinvoke $r12.<org.apache.commons.validator.routines.RegexValidator: void <init>(java.lang.String,boolean)>("^([abc]{3})([DEF]{3})([123]{3})$", 0);
        r6 = $r12;
        r7 = "AAC FDE 321";
        r8 = "AACFDE321";
        $r13 = newarray (java.lang.String)[3];
        $r13[0] = "AAC";
        $r13[1] = "FDE";
        $r13[2] = "321";
        r9 = $r13;
        $z0 = virtualinvoke r3.<org.apache.commons.validator.routines.RegexValidator: boolean isValid(java.lang.String)>(r7);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,boolean,boolean)>("isValid() Multiple", 1, $z0);
        $z1 = virtualinvoke r4.<org.apache.commons.validator.routines.RegexValidator: boolean isValid(java.lang.String)>(r7);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,boolean,boolean)>("isValid() 1st", 0, $z1);
        $z2 = virtualinvoke r5.<org.apache.commons.validator.routines.RegexValidator: boolean isValid(java.lang.String)>(r7);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,boolean,boolean)>("isValid() 2nd", 1, $z2);
        $z3 = virtualinvoke r6.<org.apache.commons.validator.routines.RegexValidator: boolean isValid(java.lang.String)>(r7);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,boolean,boolean)>("isValid() 3rd", 0, $z3);
        $r14 = virtualinvoke r3.<org.apache.commons.validator.routines.RegexValidator: java.lang.String validate(java.lang.String)>(r7);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("validate() Multiple", r8, $r14);
        $r15 = virtualinvoke r4.<org.apache.commons.validator.routines.RegexValidator: java.lang.String validate(java.lang.String)>(r7);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("validate() 1st", null, $r15);
        $r16 = virtualinvoke r5.<org.apache.commons.validator.routines.RegexValidator: java.lang.String validate(java.lang.String)>(r7);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("validate() 2nd", r8, $r16);
        $r17 = virtualinvoke r6.<org.apache.commons.validator.routines.RegexValidator: java.lang.String validate(java.lang.String)>(r7);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("validate() 3rd", null, $r17);
        $r18 = virtualinvoke r3.<org.apache.commons.validator.routines.RegexValidator: java.lang.String[] match(java.lang.String)>(r7);
        specialinvoke r0.<org.apache.commons.validator.routines.RegexValidatorTest: void checkArray(java.lang.String,java.lang.String[],java.lang.String[])>("match() Multiple", r9, $r18);
        $r19 = virtualinvoke r4.<org.apache.commons.validator.routines.RegexValidator: java.lang.String[] match(java.lang.String)>(r7);
        specialinvoke r0.<org.apache.commons.validator.routines.RegexValidatorTest: void checkArray(java.lang.String,java.lang.String[],java.lang.String[])>("match() 1st", null, $r19);
        $r20 = virtualinvoke r5.<org.apache.commons.validator.routines.RegexValidator: java.lang.String[] match(java.lang.String)>(r7);
        specialinvoke r0.<org.apache.commons.validator.routines.RegexValidatorTest: void checkArray(java.lang.String,java.lang.String[],java.lang.String[])>("match() 2nd", r9, $r20);
        $r21 = virtualinvoke r6.<org.apache.commons.validator.routines.RegexValidator: java.lang.String[] match(java.lang.String)>(r7);
        specialinvoke r0.<org.apache.commons.validator.routines.RegexValidatorTest: void checkArray(java.lang.String,java.lang.String[],java.lang.String[])>("match() 3rd", null, $r21);
        r22 = "AAC*FDE*321";
        $z4 = virtualinvoke r3.<org.apache.commons.validator.routines.RegexValidator: boolean isValid(java.lang.String)>(r22);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,boolean,boolean)>("isValid() Invalid", 0, $z4);
        $r23 = virtualinvoke r3.<org.apache.commons.validator.routines.RegexValidator: java.lang.String validate(java.lang.String)>(r22);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("validate() Invalid", null, $r23);
        $r24 = virtualinvoke r3.<org.apache.commons.validator.routines.RegexValidator: java.lang.String[] match(java.lang.String)>(r22);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("match() Multiple", null, $r24);
        return;
    }

    public void testNullValue()
    {
        org.apache.commons.validator.routines.RegexValidatorTest r0;
        org.apache.commons.validator.routines.RegexValidator $r1, r2;
        boolean $z0;
        java.lang.String $r3;
        java.lang.String[] $r4;

        r0 := @this: org.apache.commons.validator.routines.RegexValidatorTest;
        $r1 = new org.apache.commons.validator.routines.RegexValidator;
        specialinvoke $r1.<org.apache.commons.validator.routines.RegexValidator: void <init>(java.lang.String)>("^([abc]*)(?:\\-)([DEF]*)(?:\\-)([123]*)$");
        r2 = $r1;
        $z0 = virtualinvoke r2.<org.apache.commons.validator.routines.RegexValidator: boolean isValid(java.lang.String)>(null);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,boolean,boolean)>("Instance isValid()", 0, $z0);
        $r3 = virtualinvoke r2.<org.apache.commons.validator.routines.RegexValidator: java.lang.String validate(java.lang.String)>(null);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Instance validate()", null, $r3);
        $r4 = virtualinvoke r2.<org.apache.commons.validator.routines.RegexValidator: java.lang.String[] match(java.lang.String)>(null);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Instance match()", null, $r4);
        return;
    }

    public void testMissingRegex()
    {
        org.apache.commons.validator.routines.RegexValidatorTest r0;
        org.apache.commons.validator.routines.RegexValidator $r1, $r6, $r10, $r14, $r21, $r26;
        java.lang.IllegalArgumentException r2, r3, $r4, $r7, r8, $r11, r12, $r16, r17, $r22, $r27, r28;
        java.lang.String $r5, $r9, $r13, $r18, $r23, $r29;
        java.lang.String[] $r15, $r19, r20, $r24, r25;

        r0 := @this: org.apache.commons.validator.routines.RegexValidatorTest;

     label0:
        $r1 = new org.apache.commons.validator.routines.RegexValidator;
        specialinvoke $r1.<org.apache.commons.validator.routines.RegexValidator: void <init>(java.lang.String)>(null);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void fail(java.lang.String)>("Single Null - expected IllegalArgumentException");

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r2 = $r4;
        $r5 = virtualinvoke r2.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Single Null", "Regular expression[0] is missing", $r5);

     label3:
        $r6 = new org.apache.commons.validator.routines.RegexValidator;
        specialinvoke $r6.<org.apache.commons.validator.routines.RegexValidator: void <init>(java.lang.String)>("");
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void fail(java.lang.String)>("Single Zero Length - expected IllegalArgumentException");

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;
        r8 = $r7;
        $r9 = virtualinvoke r8.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Single Zero Length", "Regular expression[0] is missing", $r9);

     label6:
        $r10 = new org.apache.commons.validator.routines.RegexValidator;
        specialinvoke $r10.<org.apache.commons.validator.routines.RegexValidator: void <init>(java.lang.String[])>(null);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void fail(java.lang.String)>("Null Array - expected IllegalArgumentException");

     label7:
        goto label9;

     label8:
        $r11 := @caughtexception;
        r12 = $r11;
        $r13 = virtualinvoke r12.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Null Array", "Regular expressions are missing", $r13);

     label9:
        $r14 = new org.apache.commons.validator.routines.RegexValidator;
        $r15 = newarray (java.lang.String)[0];
        specialinvoke $r14.<org.apache.commons.validator.routines.RegexValidator: void <init>(java.lang.String[])>($r15);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void fail(java.lang.String)>("Zero Length Array - expected IllegalArgumentException");

     label10:
        goto label12;

     label11:
        $r16 := @caughtexception;
        r17 = $r16;
        $r18 = virtualinvoke r17.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Zero Length Array", "Regular expressions are missing", $r18);

     label12:
        $r19 = newarray (java.lang.String)[2];
        $r19[0] = "ABC";
        r20 = $r19;

     label13:
        $r21 = new org.apache.commons.validator.routines.RegexValidator;
        specialinvoke $r21.<org.apache.commons.validator.routines.RegexValidator: void <init>(java.lang.String[])>(r20);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void fail(java.lang.String)>("Array has Null - expected IllegalArgumentException");

     label14:
        goto label16;

     label15:
        $r22 := @caughtexception;
        r3 = $r22;
        $r23 = virtualinvoke r3.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Array has Null", "Regular expression[1] is missing", $r23);

     label16:
        $r24 = newarray (java.lang.String)[2];
        $r24[0] = "";
        $r24[1] = "ABC";
        r25 = $r24;

     label17:
        $r26 = new org.apache.commons.validator.routines.RegexValidator;
        specialinvoke $r26.<org.apache.commons.validator.routines.RegexValidator: void <init>(java.lang.String[])>(r25);
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void fail(java.lang.String)>("Array has Zero Length - expected IllegalArgumentException");

     label18:
        goto label20;

     label19:
        $r27 := @caughtexception;
        r28 = $r27;
        $r29 = virtualinvoke r28.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Array has Zero Length", "Regular expression[0] is missing", $r29);

     label20:
        return;

        catch java.lang.IllegalArgumentException from label0 to label1 with label2;
        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
        catch java.lang.IllegalArgumentException from label6 to label7 with label8;
        catch java.lang.IllegalArgumentException from label9 to label10 with label11;
        catch java.lang.IllegalArgumentException from label13 to label14 with label15;
        catch java.lang.IllegalArgumentException from label17 to label18 with label19;
    }

    public void testExceptions()
    {
        org.apache.commons.validator.routines.RegexValidatorTest r0;
        java.lang.String r1;
        java.util.regex.PatternSyntaxException r2, $r4;
        org.apache.commons.validator.routines.RegexValidator $r3;

        r0 := @this: org.apache.commons.validator.routines.RegexValidatorTest;
        r1 = "^([abCD12]*$";

     label0:
        $r3 = new org.apache.commons.validator.routines.RegexValidator;
        specialinvoke $r3.<org.apache.commons.validator.routines.RegexValidator: void <init>(java.lang.String)>(r1);

     label1:
        goto label3;

     label2:
        $r4 := @caughtexception;
        r2 = $r4;

     label3:
        return;

        catch java.util.regex.PatternSyntaxException from label0 to label1 with label2;
    }

    public void testToString()
    {
        org.apache.commons.validator.routines.RegexValidatorTest r0;
        org.apache.commons.validator.routines.RegexValidator $r1, r2, r3, $r5;
        java.lang.String $r4, $r7;
        java.lang.String[] $r6;

        r0 := @this: org.apache.commons.validator.routines.RegexValidatorTest;
        $r1 = new org.apache.commons.validator.routines.RegexValidator;
        specialinvoke $r1.<org.apache.commons.validator.routines.RegexValidator: void <init>(java.lang.String)>("^([abc]*)(?:\\-)([DEF]*)(?:\\-)([123]*)$");
        r2 = $r1;
        $r4 = virtualinvoke r2.<org.apache.commons.validator.routines.RegexValidator: java.lang.String toString()>();
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Single", "RegexValidator{^([abc]*)(?:\\-)([DEF]*)(?:\\-)([123]*)$}", $r4);
        $r5 = new org.apache.commons.validator.routines.RegexValidator;
        $r6 = newarray (java.lang.String)[2];
        $r6[0] = "^([abc]*)(?:\\-)([DEF]*)(?:\\-)([123]*)$";
        $r6[1] = "^([abc]*)(?:\\-)([DEF]*)(?:\\-)([123]*)$";
        specialinvoke $r5.<org.apache.commons.validator.routines.RegexValidator: void <init>(java.lang.String[])>($r6);
        r3 = $r5;
        $r7 = virtualinvoke r3.<org.apache.commons.validator.routines.RegexValidator: java.lang.String toString()>();
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Multiple", "RegexValidator{^([abc]*)(?:\\-)([DEF]*)(?:\\-)([123]*)$,^([abc]*)(?:\\-)([DEF]*)(?:\\-)([123]*)$}", $r7);
        return;
    }

    private void checkArray(java.lang.String, java.lang.String[], java.lang.String[])
    {
        org.apache.commons.validator.routines.RegexValidatorTest r0;
        java.lang.String r1, $r5, $r10, $r12, $r17, $r19, $r23, $r24, $r25;
        java.lang.String[] r2, r3;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r9, $r11, $r13, $r14, $r15, $r16, $r18, $r20, $r21, $r22;

        r0 := @this: org.apache.commons.validator.routines.RegexValidatorTest;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String[];
        r3 := @parameter2: java.lang.String[];
        if r2 == null goto label0;

        if r3 != null goto label2;

     label0:
        if r2 != null goto label1;

        if r3 != null goto label1;

        return;

     label1:
        $r4 = new java.lang.StringBuilder;
        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);
        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);
        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Null expect=");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" result=");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void fail(java.lang.String)>($r10);
        return;

     label2:
        $i1 = lengthof r2;
        $i2 = lengthof r3;
        if $i1 == $i2 goto label3;

        $r11 = new java.lang.StringBuilder;
        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);
        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r12);
        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Length expect=");
        $i3 = lengthof r2;
        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" result=");
        $i4 = lengthof r3;
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void fail(java.lang.String)>($r17);

     label3:
        i0 = 0;
        goto label5;

     label4:
        $r18 = new java.lang.StringBuilder;
        $r19 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);
        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>($r19);
        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" value[");
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();
        $r24 = r2[i0];
        $r25 = r3[i0];
        staticinvoke <org.apache.commons.validator.routines.RegexValidatorTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>($r23, $r24, $r25);
        i0 = i0 + 1;

     label5:
        $i5 = lengthof r2;
        if i0 < $i5 goto label4;

        return;
    }
}
