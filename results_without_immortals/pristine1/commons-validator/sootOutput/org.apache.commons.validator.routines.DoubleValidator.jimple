public class org.apache.commons.validator.routines.DoubleValidator extends org.apache.commons.validator.routines.AbstractNumberValidator
{
    private static final long serialVersionUID;
    private static final org.apache.commons.validator.routines.DoubleValidator VALIDATOR;

    static void <clinit>()
    {
        org.apache.commons.validator.routines.DoubleValidator $r0;

        $r0 = new org.apache.commons.validator.routines.DoubleValidator;
        specialinvoke $r0.<org.apache.commons.validator.routines.DoubleValidator: void <init>()>();
        <org.apache.commons.validator.routines.DoubleValidator: org.apache.commons.validator.routines.DoubleValidator VALIDATOR> = $r0;
        return;
    }

    public static org.apache.commons.validator.routines.DoubleValidator getInstance()
    {
        org.apache.commons.validator.routines.DoubleValidator $r0;

        $r0 = <org.apache.commons.validator.routines.DoubleValidator: org.apache.commons.validator.routines.DoubleValidator VALIDATOR>;
        return $r0;
    }

    public void <init>()
    {
        org.apache.commons.validator.routines.DoubleValidator r0;

        r0 := @this: org.apache.commons.validator.routines.DoubleValidator;
        specialinvoke r0.<org.apache.commons.validator.routines.DoubleValidator: void <init>(boolean,int)>(1, 0);
        return;
    }

    public void <init>(boolean, int)
    {
        org.apache.commons.validator.routines.DoubleValidator r0;
        boolean z0;
        int i0;

        r0 := @this: org.apache.commons.validator.routines.DoubleValidator;
        z0 := @parameter0: boolean;
        i0 := @parameter1: int;
        specialinvoke r0.<org.apache.commons.validator.routines.AbstractNumberValidator: void <init>(boolean,int,boolean)>(z0, i0, 1);
        return;
    }

    public java.lang.Double validate(java.lang.String)
    {
        org.apache.commons.validator.routines.DoubleValidator r0;
        java.lang.String r1;
        java.lang.Object $r2;
        java.lang.Double $r3;

        r0 := @this: org.apache.commons.validator.routines.DoubleValidator;
        r1 := @parameter0: java.lang.String;
        $r2 = virtualinvoke r0.<org.apache.commons.validator.routines.DoubleValidator: java.lang.Object parse(java.lang.String,java.lang.String,java.util.Locale)>(r1, null, null);
        $r3 = (java.lang.Double) $r2;
        return $r3;
    }

    public java.lang.Double validate(java.lang.String, java.lang.String)
    {
        org.apache.commons.validator.routines.DoubleValidator r0;
        java.lang.String r1, r2;
        java.lang.Object $r3;
        java.lang.Double $r4;

        r0 := @this: org.apache.commons.validator.routines.DoubleValidator;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        $r3 = virtualinvoke r0.<org.apache.commons.validator.routines.DoubleValidator: java.lang.Object parse(java.lang.String,java.lang.String,java.util.Locale)>(r1, r2, null);
        $r4 = (java.lang.Double) $r3;
        return $r4;
    }

    public java.lang.Double validate(java.lang.String, java.util.Locale)
    {
        org.apache.commons.validator.routines.DoubleValidator r0;
        java.lang.String r1;
        java.util.Locale r2;
        java.lang.Object $r3;
        java.lang.Double $r4;

        r0 := @this: org.apache.commons.validator.routines.DoubleValidator;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.util.Locale;
        $r3 = virtualinvoke r0.<org.apache.commons.validator.routines.DoubleValidator: java.lang.Object parse(java.lang.String,java.lang.String,java.util.Locale)>(r1, null, r2);
        $r4 = (java.lang.Double) $r3;
        return $r4;
    }

    public java.lang.Double validate(java.lang.String, java.lang.String, java.util.Locale)
    {
        org.apache.commons.validator.routines.DoubleValidator r0;
        java.lang.String r1, r2;
        java.util.Locale r3;
        java.lang.Object $r4;
        java.lang.Double $r5;

        r0 := @this: org.apache.commons.validator.routines.DoubleValidator;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        r3 := @parameter2: java.util.Locale;
        $r4 = virtualinvoke r0.<org.apache.commons.validator.routines.DoubleValidator: java.lang.Object parse(java.lang.String,java.lang.String,java.util.Locale)>(r1, r2, r3);
        $r5 = (java.lang.Double) $r4;
        return $r5;
    }

    public boolean isInRange(double, double, double)
    {
        org.apache.commons.validator.routines.DoubleValidator r0;
        double d0, d1, d2;
        byte $b0, $b1;

        r0 := @this: org.apache.commons.validator.routines.DoubleValidator;
        d0 := @parameter0: double;
        d1 := @parameter1: double;
        d2 := @parameter2: double;
        $b0 = d0 cmpl d1;
        if $b0 < 0 goto label0;

        $b1 = d0 cmpg d2;
        if $b1 > 0 goto label0;

        return 1;

     label0:
        return 0;
    }

    public boolean isInRange(java.lang.Double, double, double)
    {
        org.apache.commons.validator.routines.DoubleValidator r0;
        java.lang.Double r1;
        double d0, d1, $d2;
        boolean $z0;

        r0 := @this: org.apache.commons.validator.routines.DoubleValidator;
        r1 := @parameter0: java.lang.Double;
        d0 := @parameter1: double;
        d1 := @parameter2: double;
        $d2 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();
        $z0 = virtualinvoke r0.<org.apache.commons.validator.routines.DoubleValidator: boolean isInRange(double,double,double)>($d2, d0, d1);
        return $z0;
    }

    public boolean minValue(double, double)
    {
        org.apache.commons.validator.routines.DoubleValidator r0;
        double d0, d1;
        byte $b0;

        r0 := @this: org.apache.commons.validator.routines.DoubleValidator;
        d0 := @parameter0: double;
        d1 := @parameter1: double;
        $b0 = d0 cmpl d1;
        if $b0 < 0 goto label0;

        return 1;

     label0:
        return 0;
    }

    public boolean minValue(java.lang.Double, double)
    {
        org.apache.commons.validator.routines.DoubleValidator r0;
        java.lang.Double r1;
        double d0, $d1;
        boolean $z0;

        r0 := @this: org.apache.commons.validator.routines.DoubleValidator;
        r1 := @parameter0: java.lang.Double;
        d0 := @parameter1: double;
        $d1 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();
        $z0 = virtualinvoke r0.<org.apache.commons.validator.routines.DoubleValidator: boolean minValue(double,double)>($d1, d0);
        return $z0;
    }

    public boolean maxValue(double, double)
    {
        org.apache.commons.validator.routines.DoubleValidator r0;
        double d0, d1;
        byte $b0;

        r0 := @this: org.apache.commons.validator.routines.DoubleValidator;
        d0 := @parameter0: double;
        d1 := @parameter1: double;
        $b0 = d0 cmpg d1;
        if $b0 > 0 goto label0;

        return 1;

     label0:
        return 0;
    }

    public boolean maxValue(java.lang.Double, double)
    {
        org.apache.commons.validator.routines.DoubleValidator r0;
        java.lang.Double r1;
        double d0, $d1;
        boolean $z0;

        r0 := @this: org.apache.commons.validator.routines.DoubleValidator;
        r1 := @parameter0: java.lang.Double;
        d0 := @parameter1: double;
        $d1 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();
        $z0 = virtualinvoke r0.<org.apache.commons.validator.routines.DoubleValidator: boolean maxValue(double,double)>($d1, d0);
        return $z0;
    }

    protected java.lang.Object processParsedValue(java.lang.Object, java.text.Format)
    {
        org.apache.commons.validator.routines.DoubleValidator r0;
        java.lang.Object r1;
        java.text.Format r2;
        boolean $z0;
        java.lang.Double $r3;
        java.lang.Number $r4;
        double $d0;

        r0 := @this: org.apache.commons.validator.routines.DoubleValidator;
        r1 := @parameter0: java.lang.Object;
        r2 := @parameter1: java.text.Format;
        $z0 = r1 instanceof java.lang.Double;
        if $z0 == 0 goto label0;

        return r1;

     label0:
        $r3 = new java.lang.Double;
        $r4 = (java.lang.Number) r1;
        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();
        specialinvoke $r3.<java.lang.Double: void <init>(double)>($d0);
        return $r3;
    }
}
