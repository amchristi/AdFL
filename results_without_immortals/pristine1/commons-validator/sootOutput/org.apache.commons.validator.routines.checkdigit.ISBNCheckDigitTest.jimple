public class org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest extends org.apache.commons.validator.routines.checkdigit.AbstractCheckDigitTest
{

    public void <init>(java.lang.String)
    {
        org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<org.apache.commons.validator.routines.checkdigit.AbstractCheckDigitTest: void <init>(java.lang.String)>(r1);
        return;
    }

    protected void setUp() throws java.lang.Exception
    {
        org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest r0;
        org.apache.commons.validator.routines.checkdigit.CheckDigit $r1;
        java.lang.String[] $r2;

        r0 := @this: org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest;
        specialinvoke r0.<org.apache.commons.validator.routines.checkdigit.AbstractCheckDigitTest: void setUp()>();
        $r1 = <org.apache.commons.validator.routines.checkdigit.ISBNCheckDigit: org.apache.commons.validator.routines.checkdigit.CheckDigit ISBN_CHECK_DIGIT>;
        r0.<org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest: org.apache.commons.validator.routines.checkdigit.CheckDigit routine> = $r1;
        $r2 = newarray (java.lang.String)[6];
        $r2[0] = "9780072129519";
        $r2[1] = "9780764558313";
        $r2[2] = "1930110995";
        $r2[3] = "020163385X";
        $r2[4] = "1590596277";
        $r2[5] = "9781590596272";
        r0.<org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest: java.lang.String[] valid> = $r2;
        r0.<org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest: java.lang.String missingMessage> = "ISBN Code is missing";
        r0.<org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest: java.lang.String zeroSum> = "000000000000";
        return;
    }

    public void testInvalidLength()
    {
        org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest r0;
        java.lang.Exception r1, $r8, $r12, r13, $r17, r18, $r22, r23;
        org.apache.commons.validator.routines.checkdigit.CheckDigit $r2, $r3, $r4, $r5, $r6, $r10, $r15, $r20;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r9, $r14, $r19, $r24;

        r0 := @this: org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest;
        $r2 = r0.<org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest: org.apache.commons.validator.routines.checkdigit.CheckDigit routine>;
        $z0 = interfaceinvoke $r2.<org.apache.commons.validator.routines.checkdigit.CheckDigit: boolean isValid(java.lang.String)>("123456789");
        staticinvoke <org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest: void assertFalse(java.lang.String,boolean)>("isValid() Lth 9 ", $z0);
        $r3 = r0.<org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest: org.apache.commons.validator.routines.checkdigit.CheckDigit routine>;
        $z1 = interfaceinvoke $r3.<org.apache.commons.validator.routines.checkdigit.CheckDigit: boolean isValid(java.lang.String)>("12345678901");
        staticinvoke <org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest: void assertFalse(java.lang.String,boolean)>("isValid() Lth 11", $z1);
        $r4 = r0.<org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest: org.apache.commons.validator.routines.checkdigit.CheckDigit routine>;
        $z2 = interfaceinvoke $r4.<org.apache.commons.validator.routines.checkdigit.CheckDigit: boolean isValid(java.lang.String)>("123456789012");
        staticinvoke <org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest: void assertFalse(java.lang.String,boolean)>("isValid() Lth 12", $z2);
        $r5 = r0.<org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest: org.apache.commons.validator.routines.checkdigit.CheckDigit routine>;
        $z3 = interfaceinvoke $r5.<org.apache.commons.validator.routines.checkdigit.CheckDigit: boolean isValid(java.lang.String)>("12345678901234");
        staticinvoke <org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest: void assertFalse(java.lang.String,boolean)>("isValid() Lth 14", $z3);

     label0:
        $r6 = r0.<org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest: org.apache.commons.validator.routines.checkdigit.CheckDigit routine>;
        interfaceinvoke $r6.<org.apache.commons.validator.routines.checkdigit.CheckDigit: java.lang.String calculate(java.lang.String)>("12345678");
        staticinvoke <org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest: void fail(java.lang.String)>("calculate() Lth 8 - expected exception");

     label1:
        goto label3;

     label2:
        $r8 := @caughtexception;
        r1 = $r8;
        $r9 = virtualinvoke r1.<java.lang.Exception: java.lang.String getMessage()>();
        staticinvoke <org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("calculate() Lth 8", "Invalid ISBN Length = 8", $r9);

     label3:
        $r10 = r0.<org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest: org.apache.commons.validator.routines.checkdigit.CheckDigit routine>;
        interfaceinvoke $r10.<org.apache.commons.validator.routines.checkdigit.CheckDigit: java.lang.String calculate(java.lang.String)>("1234567890");
        staticinvoke <org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest: void fail(java.lang.String)>("calculate() Lth 10 - expected exception");

     label4:
        goto label6;

     label5:
        $r12 := @caughtexception;
        r13 = $r12;
        $r14 = virtualinvoke r13.<java.lang.Exception: java.lang.String getMessage()>();
        staticinvoke <org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("calculate() Lth 10", "Invalid ISBN Length = 10", $r14);

     label6:
        $r15 = r0.<org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest: org.apache.commons.validator.routines.checkdigit.CheckDigit routine>;
        interfaceinvoke $r15.<org.apache.commons.validator.routines.checkdigit.CheckDigit: java.lang.String calculate(java.lang.String)>("12345678901");
        staticinvoke <org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest: void fail(java.lang.String)>("calculate() Lth 11 - expected exception");

     label7:
        goto label9;

     label8:
        $r17 := @caughtexception;
        r18 = $r17;
        $r19 = virtualinvoke r18.<java.lang.Exception: java.lang.String getMessage()>();
        staticinvoke <org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("calculate() Lth 11", "Invalid ISBN Length = 11", $r19);

     label9:
        $r20 = r0.<org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest: org.apache.commons.validator.routines.checkdigit.CheckDigit routine>;
        interfaceinvoke $r20.<org.apache.commons.validator.routines.checkdigit.CheckDigit: java.lang.String calculate(java.lang.String)>("1234567890123");
        staticinvoke <org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest: void fail(java.lang.String)>("calculate() Lth 13 - expected exception");

     label10:
        goto label12;

     label11:
        $r22 := @caughtexception;
        r23 = $r22;
        $r24 = virtualinvoke r23.<java.lang.Exception: java.lang.String getMessage()>();
        staticinvoke <org.apache.commons.validator.routines.checkdigit.ISBNCheckDigitTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("calculate() Lth 13", "Invalid ISBN Length = 13", $r24);

     label12:
        return;

        catch java.lang.Exception from label0 to label1 with label2;
        catch java.lang.Exception from label3 to label4 with label5;
        catch java.lang.Exception from label6 to label7 with label8;
        catch java.lang.Exception from label9 to label10 with label11;
    }
}
