public abstract class org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit extends java.lang.Object implements org.apache.commons.validator.routines.checkdigit.CheckDigit, java.io.Serializable
{
    private static final long serialVersionUID;
    private final int modulus;

    public void <init>(int)
    {
        org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit r0;
        int i0;

        r0 := @this: org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit;
        i0 := @parameter0: int;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit: int modulus> = i0;
        return;
    }

    public int getModulus()
    {
        org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit r0;
        int $i0;

        r0 := @this: org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit;
        $i0 = r0.<org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit: int modulus>;
        return $i0;
    }

    public boolean isValid(java.lang.String)
    {
        org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit r0;
        java.lang.String r1;
        int i0, $i1;
        boolean $z0;
        org.apache.commons.validator.routines.checkdigit.CheckDigitException $r2, r3;

        r0 := @this: org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit;
        r1 := @parameter0: java.lang.String;
        if r1 == null goto label0;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i1 != 0 goto label1;

     label0:
        return 0;

     label1:
        i0 = virtualinvoke r0.<org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit: int calculateModulus(java.lang.String,boolean)>(r1, 1);
        if i0 != 0 goto label2;

        return 1;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $r2 := @caughtexception;
        r3 = $r2;
        return 0;

        catch org.apache.commons.validator.routines.checkdigit.CheckDigitException from label1 to label3 with label4;
    }

    public java.lang.String calculate(java.lang.String) throws org.apache.commons.validator.routines.checkdigit.CheckDigitException
    {
        org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit r0;
        java.lang.String r1, $r3;
        int i0, i1, $i2, $i3, $i4, $i5;
        org.apache.commons.validator.routines.checkdigit.CheckDigitException $r2;

        r0 := @this: org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit;
        r1 := @parameter0: java.lang.String;
        if r1 == null goto label0;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();
        if $i2 != 0 goto label1;

     label0:
        $r2 = new org.apache.commons.validator.routines.checkdigit.CheckDigitException;
        specialinvoke $r2.<org.apache.commons.validator.routines.checkdigit.CheckDigitException: void <init>(java.lang.String)>("Code is missing");
        throw $r2;

     label1:
        i0 = virtualinvoke r0.<org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit: int calculateModulus(java.lang.String,boolean)>(r1, 0);
        $i3 = r0.<org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit: int modulus>;
        $i4 = $i3 - i0;
        $i5 = r0.<org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit: int modulus>;
        i1 = $i4 % $i5;
        $r3 = virtualinvoke r0.<org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit: java.lang.String toCheckDigit(int)>(i1);
        return $r3;
    }

    protected int calculateModulus(java.lang.String, boolean) throws org.apache.commons.validator.routines.checkdigit.CheckDigitException
    {
        org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit r0;
        java.lang.String r1;
        boolean z0;
        int i0, i1, i2, i3, i4, i5, $i6, $i9, $i10, $i11, $i12;
        byte $b7;
        char $c8;
        org.apache.commons.validator.routines.checkdigit.CheckDigitException $r2;

        r0 := @this: org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit;
        r1 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        i0 = 0;
        i1 = 0;
        goto label3;

     label0:
        $i6 = virtualinvoke r1.<java.lang.String: int length()>();
        if z0 == 0 goto label1;

        $b7 = 0;
        goto label2;

     label1:
        $b7 = 1;

     label2:
        i2 = $i6 + $b7;
        i3 = i1 + 1;
        i4 = i2 - i1;
        $c8 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1);
        i5 = virtualinvoke r0.<org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit: int toInt(char,int,int)>($c8, i3, i4);
        $i9 = virtualinvoke r0.<org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit: int weightedValue(int,int,int)>(i5, i3, i4);
        i0 = i0 + $i9;
        i1 = i1 + 1;

     label3:
        $i10 = virtualinvoke r1.<java.lang.String: int length()>();
        if i1 < $i10 goto label0;

        if i0 != 0 goto label4;

        $r2 = new org.apache.commons.validator.routines.checkdigit.CheckDigitException;
        specialinvoke $r2.<org.apache.commons.validator.routines.checkdigit.CheckDigitException: void <init>(java.lang.String)>("Invalid code, sum is zero");
        throw $r2;

     label4:
        $i11 = r0.<org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit: int modulus>;
        $i12 = i0 % $i11;
        return $i12;
    }

    protected abstract int weightedValue(int, int, int) throws org.apache.commons.validator.routines.checkdigit.CheckDigitException;

    protected int toInt(char, int, int) throws org.apache.commons.validator.routines.checkdigit.CheckDigitException
    {
        org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit r0;
        char c0;
        int i1, i2, $i3;
        java.lang.StringBuilder $r1, $r3, $r4, $r5, $r6;
        boolean $z0;
        org.apache.commons.validator.routines.checkdigit.CheckDigitException $r2;
        java.lang.String $r7;

        r0 := @this: org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit;
        c0 := @parameter0: char;
        i1 := @parameter1: int;
        i2 := @parameter2: int;
        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0);
        if $z0 == 0 goto label0;

        $i3 = staticinvoke <java.lang.Character: int getNumericValue(char)>(c0);
        return $i3;

     label0:
        $r2 = new org.apache.commons.validator.routines.checkdigit.CheckDigitException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid Character[");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] = \'");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<org.apache.commons.validator.routines.checkdigit.CheckDigitException: void <init>(java.lang.String)>($r7);
        throw $r2;
    }

    protected java.lang.String toCheckDigit(int) throws org.apache.commons.validator.routines.checkdigit.CheckDigitException
    {
        org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit r0;
        int i0;
        java.lang.StringBuilder $r1, $r4;
        java.lang.String $r2, $r5;
        org.apache.commons.validator.routines.checkdigit.CheckDigitException $r3;

        r0 := @this: org.apache.commons.validator.routines.checkdigit.ModulusCheckDigit;
        i0 := @parameter0: int;
        if i0 < 0 goto label0;

        if i0 > 9 goto label0;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);
        return $r2;

     label0:
        $r3 = new org.apache.commons.validator.routines.checkdigit.CheckDigitException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid Check Digit Value =");
        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r3.<org.apache.commons.validator.routines.checkdigit.CheckDigitException: void <init>(java.lang.String)>($r5);
        throw $r3;
    }

    public static int sumDigits(int)
    {
        int i0, i1, i2, $i3;

        i0 := @parameter0: int;
        i1 = 0;
        i2 = i0;
        goto label1;

     label0:
        $i3 = i2 % 10;
        i1 = i1 + $i3;
        i2 = i2 / 10;

     label1:
        if i2 > 0 goto label0;

        return i1;
    }
}
