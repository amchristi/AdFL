public class org.apache.commons.validator.routines.UrlValidator extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    public static final long ALLOW_ALL_SCHEMES;
    public static final long ALLOW_2_SLASHES;
    public static final long NO_FRAGMENTS;
    public static final long ALLOW_LOCAL_URLS;
    private static final java.lang.String URL_REGEX;
    private static final java.util.regex.Pattern URL_PATTERN;
    private static final int PARSE_URL_SCHEME;
    private static final int PARSE_URL_AUTHORITY;
    private static final int PARSE_URL_PATH;
    private static final int PARSE_URL_QUERY;
    private static final int PARSE_URL_FRAGMENT;
    private static final java.lang.String SCHEME_REGEX;
    private static final java.util.regex.Pattern SCHEME_PATTERN;
    private static final java.lang.String AUTHORITY_CHARS_REGEX;
    private static final java.lang.String IPV6_REGEX;
    private static final java.lang.String USERINFO_CHARS_REGEX;
    private static final java.lang.String USERINFO_FIELD_REGEX;
    private static final java.lang.String AUTHORITY_REGEX;
    private static final java.util.regex.Pattern AUTHORITY_PATTERN;
    private static final int PARSE_AUTHORITY_IPV6;
    private static final int PARSE_AUTHORITY_HOST_IP;
    private static final int PARSE_AUTHORITY_EXTRA;
    private static final java.lang.String PATH_REGEX;
    private static final java.util.regex.Pattern PATH_PATTERN;
    private static final java.lang.String QUERY_REGEX;
    private static final java.util.regex.Pattern QUERY_PATTERN;
    private final long options;
    private final java.util.Set allowedSchemes;
    private final org.apache.commons.validator.routines.RegexValidator authorityValidator;
    private static final java.lang.String[] DEFAULT_SCHEMES;
    private static final org.apache.commons.validator.routines.UrlValidator DEFAULT_URL_VALIDATOR;

    static void <clinit>()
    {
        java.util.regex.Pattern $r0, $r1, $r2, $r3, $r4;
        java.lang.String[] $r5;
        org.apache.commons.validator.routines.UrlValidator $r6;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?");
        <org.apache.commons.validator.routines.UrlValidator: java.util.regex.Pattern URL_PATTERN> = $r0;
        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^\\p{Alpha}[\\p{Alnum}\\+\\-\\.]*");
        <org.apache.commons.validator.routines.UrlValidator: java.util.regex.Pattern SCHEME_PATTERN> = $r1;
        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?:\\[([0-9a-fA-F:]+)\\]|(?:(?:[a-zA-Z0-9%-._~!$&\'()*+,;=]+:[a-zA-Z0-9%-._~!$&\'()*+,;=]*@)?([\\p{Alnum}\\-\\.]*)))(:\\d*)?(.*)?");
        <org.apache.commons.validator.routines.UrlValidator: java.util.regex.Pattern AUTHORITY_PATTERN> = $r2;
        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(/[-\\w:@&?=+,.!/~*\'%$_;\\(\\)]*)?$");
        <org.apache.commons.validator.routines.UrlValidator: java.util.regex.Pattern PATH_PATTERN> = $r3;
        $r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(.*)$");
        <org.apache.commons.validator.routines.UrlValidator: java.util.regex.Pattern QUERY_PATTERN> = $r4;
        $r5 = newarray (java.lang.String)[3];
        $r5[0] = "http";
        $r5[1] = "https";
        $r5[2] = "ftp";
        <org.apache.commons.validator.routines.UrlValidator: java.lang.String[] DEFAULT_SCHEMES> = $r5;
        $r6 = new org.apache.commons.validator.routines.UrlValidator;
        specialinvoke $r6.<org.apache.commons.validator.routines.UrlValidator: void <init>()>();
        <org.apache.commons.validator.routines.UrlValidator: org.apache.commons.validator.routines.UrlValidator DEFAULT_URL_VALIDATOR> = $r6;
        return;
    }

    public static org.apache.commons.validator.routines.UrlValidator getInstance()
    {
        org.apache.commons.validator.routines.UrlValidator $r0;

        $r0 = <org.apache.commons.validator.routines.UrlValidator: org.apache.commons.validator.routines.UrlValidator DEFAULT_URL_VALIDATOR>;
        return $r0;
    }

    public void <init>()
    {
        org.apache.commons.validator.routines.UrlValidator r0;

        r0 := @this: org.apache.commons.validator.routines.UrlValidator;
        specialinvoke r0.<org.apache.commons.validator.routines.UrlValidator: void <init>(java.lang.String[])>(null);
        return;
    }

    public void <init>(java.lang.String[])
    {
        org.apache.commons.validator.routines.UrlValidator r0;
        java.lang.String[] r1;

        r0 := @this: org.apache.commons.validator.routines.UrlValidator;
        r1 := @parameter0: java.lang.String[];
        specialinvoke r0.<org.apache.commons.validator.routines.UrlValidator: void <init>(java.lang.String[],long)>(r1, 0L);
        return;
    }

    public void <init>(long)
    {
        org.apache.commons.validator.routines.UrlValidator r0;
        long l0;

        r0 := @this: org.apache.commons.validator.routines.UrlValidator;
        l0 := @parameter0: long;
        specialinvoke r0.<org.apache.commons.validator.routines.UrlValidator: void <init>(java.lang.String[],org.apache.commons.validator.routines.RegexValidator,long)>(null, null, l0);
        return;
    }

    public void <init>(java.lang.String[], long)
    {
        org.apache.commons.validator.routines.UrlValidator r0;
        java.lang.String[] r1;
        long l0;

        r0 := @this: org.apache.commons.validator.routines.UrlValidator;
        r1 := @parameter0: java.lang.String[];
        l0 := @parameter1: long;
        specialinvoke r0.<org.apache.commons.validator.routines.UrlValidator: void <init>(java.lang.String[],org.apache.commons.validator.routines.RegexValidator,long)>(r1, null, l0);
        return;
    }

    public void <init>(org.apache.commons.validator.routines.RegexValidator, long)
    {
        org.apache.commons.validator.routines.UrlValidator r0;
        org.apache.commons.validator.routines.RegexValidator r1;
        long l0;

        r0 := @this: org.apache.commons.validator.routines.UrlValidator;
        r1 := @parameter0: org.apache.commons.validator.routines.RegexValidator;
        l0 := @parameter1: long;
        specialinvoke r0.<org.apache.commons.validator.routines.UrlValidator: void <init>(java.lang.String[],org.apache.commons.validator.routines.RegexValidator,long)>(null, r1, l0);
        return;
    }

    public void <init>(java.lang.String[], org.apache.commons.validator.routines.RegexValidator, long)
    {
        org.apache.commons.validator.routines.UrlValidator r0;
        java.lang.String[] r1;
        org.apache.commons.validator.routines.RegexValidator r2;
        long l0;
        int i1, $i2, $i3;
        boolean $z0;
        java.util.Set $r3, $r5;
        java.util.HashSet $r4;
        java.lang.String $r6, $r8;
        java.util.Locale $r7;

        r0 := @this: org.apache.commons.validator.routines.UrlValidator;
        r1 := @parameter0: java.lang.String[];
        r2 := @parameter1: org.apache.commons.validator.routines.RegexValidator;
        l0 := @parameter2: long;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<org.apache.commons.validator.routines.UrlValidator: long options> = l0;
        $z0 = specialinvoke r0.<org.apache.commons.validator.routines.UrlValidator: boolean isOn(long)>(1L);
        if $z0 == 0 goto label0;

        $r3 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
        r0.<org.apache.commons.validator.routines.UrlValidator: java.util.Set allowedSchemes> = $r3;
        goto label4;

     label0:
        if r1 != null goto label1;

        r1 = <org.apache.commons.validator.routines.UrlValidator: java.lang.String[] DEFAULT_SCHEMES>;

     label1:
        $r4 = new java.util.HashSet;
        $i2 = lengthof r1;
        specialinvoke $r4.<java.util.HashSet: void <init>(int)>($i2);
        r0.<org.apache.commons.validator.routines.UrlValidator: java.util.Set allowedSchemes> = $r4;
        i1 = 0;
        goto label3;

     label2:
        $r5 = r0.<org.apache.commons.validator.routines.UrlValidator: java.util.Set allowedSchemes>;
        $r6 = r1[i1];
        $r7 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r8 = virtualinvoke $r6.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r7);
        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r8);
        i1 = i1 + 1;

     label3:
        $i3 = lengthof r1;
        if i1 < $i3 goto label2;

     label4:
        r0.<org.apache.commons.validator.routines.UrlValidator: org.apache.commons.validator.routines.RegexValidator authorityValidator> = r2;
        return;
    }

    public boolean isValid(java.lang.String)
    {
        org.apache.commons.validator.routines.UrlValidator r0;
        java.lang.String r1, r3, r4, $r6, $r7, $r8, $r9, $r10;
        java.util.regex.Matcher r2;
        java.util.regex.Pattern $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r0 := @this: org.apache.commons.validator.routines.UrlValidator;
        r1 := @parameter0: java.lang.String;
        if r1 != null goto label0;

        return 0;

     label0:
        $r5 = <org.apache.commons.validator.routines.UrlValidator: java.util.regex.Pattern URL_PATTERN>;
        r2 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);
        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean matches()>();
        if $z0 != 0 goto label1;

        return 0;

     label1:
        r3 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(2);
        $z1 = virtualinvoke r0.<org.apache.commons.validator.routines.UrlValidator: boolean isValidScheme(java.lang.String)>(r3);
        if $z1 != 0 goto label2;

        return 0;

     label2:
        r4 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(4);
        $r6 = "file";
        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r3);
        if $z2 == 0 goto label3;

        $r7 = "";
        $z3 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r4);
        if $z3 != 0 goto label4;

        $z4 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>(":");
        if $z4 == 0 goto label4;

        return 0;

     label3:
        $z5 = virtualinvoke r0.<org.apache.commons.validator.routines.UrlValidator: boolean isValidAuthority(java.lang.String)>(r4);
        if $z5 != 0 goto label4;

        return 0;

     label4:
        $r8 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(5);
        $z6 = virtualinvoke r0.<org.apache.commons.validator.routines.UrlValidator: boolean isValidPath(java.lang.String)>($r8);
        if $z6 != 0 goto label5;

        return 0;

     label5:
        $r9 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(7);
        $z7 = virtualinvoke r0.<org.apache.commons.validator.routines.UrlValidator: boolean isValidQuery(java.lang.String)>($r9);
        if $z7 != 0 goto label6;

        return 0;

     label6:
        $r10 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(9);
        $z8 = virtualinvoke r0.<org.apache.commons.validator.routines.UrlValidator: boolean isValidFragment(java.lang.String)>($r10);
        if $z8 != 0 goto label7;

        return 0;

     label7:
        return 1;
    }

    protected boolean isValidScheme(java.lang.String)
    {
        org.apache.commons.validator.routines.UrlValidator r0;
        java.lang.String r1, $r6;
        java.util.Locale $r2;
        java.util.regex.Pattern $r3;
        java.util.regex.Matcher $r4;
        boolean $z0, $z1, $z2;
        java.util.Set $r5;

        r0 := @this: org.apache.commons.validator.routines.UrlValidator;
        r1 := @parameter0: java.lang.String;
        if r1 != null goto label0;

        return 0;

     label0:
        $r3 = <org.apache.commons.validator.routines.UrlValidator: java.util.regex.Pattern SCHEME_PATTERN>;
        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);
        $z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean matches()>();
        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = specialinvoke r0.<org.apache.commons.validator.routines.UrlValidator: boolean isOff(long)>(1L);
        if $z1 == 0 goto label2;

        $r5 = r0.<org.apache.commons.validator.routines.UrlValidator: java.util.Set allowedSchemes>;
        $r2 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r6 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r2);
        $z2 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>($r6);
        if $z2 != 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    protected boolean isValidAuthority(java.lang.String)
    {
        org.apache.commons.validator.routines.UrlValidator r0;
        java.lang.String r1, r2, r4, r11, r12, $r13;
        java.util.regex.Matcher r3;
        org.apache.commons.validator.routines.InetAddressValidator r5, r7;
        org.apache.commons.validator.routines.DomainValidator r6;
        org.apache.commons.validator.routines.RegexValidator $r8, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.regex.Pattern $r10;
        int $i0;

        r0 := @this: org.apache.commons.validator.routines.UrlValidator;
        r1 := @parameter0: java.lang.String;
        if r1 != null goto label0;

        return 0;

     label0:
        $r8 = r0.<org.apache.commons.validator.routines.UrlValidator: org.apache.commons.validator.routines.RegexValidator authorityValidator>;
        if $r8 == null goto label1;

        $r9 = r0.<org.apache.commons.validator.routines.UrlValidator: org.apache.commons.validator.routines.RegexValidator authorityValidator>;
        $z0 = virtualinvoke $r9.<org.apache.commons.validator.routines.RegexValidator: boolean isValid(java.lang.String)>(r1);
        if $z0 == 0 goto label1;

        return 1;

     label1:
        r2 = staticinvoke <org.apache.commons.validator.routines.DomainValidator: java.lang.String unicodeToASCII(java.lang.String)>(r1);
        $r10 = <org.apache.commons.validator.routines.UrlValidator: java.util.regex.Pattern AUTHORITY_PATTERN>;
        r3 = virtualinvoke $r10.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);
        $z1 = virtualinvoke r3.<java.util.regex.Matcher: boolean matches()>();
        if $z1 != 0 goto label2;

        return 0;

     label2:
        r4 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(1);
        if r4 == null goto label3;

        r5 = staticinvoke <org.apache.commons.validator.routines.InetAddressValidator: org.apache.commons.validator.routines.InetAddressValidator getInstance()>();
        $z2 = virtualinvoke r5.<org.apache.commons.validator.routines.InetAddressValidator: boolean isValidInet6Address(java.lang.String)>(r4);
        if $z2 != 0 goto label4;

        return 0;

     label3:
        r11 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(2);
        $z3 = specialinvoke r0.<org.apache.commons.validator.routines.UrlValidator: boolean isOn(long)>(8L);
        r6 = staticinvoke <org.apache.commons.validator.routines.DomainValidator: org.apache.commons.validator.routines.DomainValidator getInstance(boolean)>($z3);
        $z4 = virtualinvoke r6.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>(r11);
        if $z4 != 0 goto label4;

        r7 = staticinvoke <org.apache.commons.validator.routines.InetAddressValidator: org.apache.commons.validator.routines.InetAddressValidator getInstance()>();
        $z5 = virtualinvoke r7.<org.apache.commons.validator.routines.InetAddressValidator: boolean isValidInet4Address(java.lang.String)>(r11);
        if $z5 != 0 goto label4;

        return 0;

     label4:
        r12 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(4);
        if r12 == null goto label5;

        $r13 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>();
        $i0 = virtualinvoke $r13.<java.lang.String: int length()>();
        if $i0 <= 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    protected boolean isValidPath(java.lang.String)
    {
        org.apache.commons.validator.routines.UrlValidator r0;
        java.lang.String r1, r3;
        java.net.URI r2, $r6, $r7;
        java.util.regex.Pattern $r4;
        java.util.regex.Matcher $r5;
        boolean $z0, $z1, $z2, $z3;
        java.net.URISyntaxException $r8, r9;
        int i0;

        r0 := @this: org.apache.commons.validator.routines.UrlValidator;
        r1 := @parameter0: java.lang.String;
        if r1 != null goto label0;

        return 0;

     label0:
        $r4 = <org.apache.commons.validator.routines.UrlValidator: java.util.regex.Pattern PATH_PATTERN>;
        $r5 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);
        $z0 = virtualinvoke $r5.<java.util.regex.Matcher: boolean matches()>();
        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r6 = new java.net.URI;
        specialinvoke $r6.<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, null, r1, null);
        r2 = $r6;
        $r7 = virtualinvoke r2.<java.net.URI: java.net.URI normalize()>();
        r3 = virtualinvoke $r7.<java.net.URI: java.lang.String getPath()>();
        $z1 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("/../");
        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("/..");
        if $z2 == 0 goto label4;

     label2:
        return 0;

     label3:
        $r8 := @caughtexception;
        r9 = $r8;
        return 0;

     label4:
        i0 = virtualinvoke r0.<org.apache.commons.validator.routines.UrlValidator: int countToken(java.lang.String,java.lang.String)>("//", r1);
        $z3 = specialinvoke r0.<org.apache.commons.validator.routines.UrlValidator: boolean isOff(long)>(2L);
        if $z3 == 0 goto label5;

        if i0 <= 0 goto label5;

        return 0;

     label5:
        return 1;

        catch java.net.URISyntaxException from label1 to label2 with label3;
    }

    protected boolean isValidQuery(java.lang.String)
    {
        org.apache.commons.validator.routines.UrlValidator r0;
        java.lang.String r1;
        java.util.regex.Pattern $r2;
        java.util.regex.Matcher $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.validator.routines.UrlValidator;
        r1 := @parameter0: java.lang.String;
        if r1 != null goto label0;

        return 1;

     label0:
        $r2 = <org.apache.commons.validator.routines.UrlValidator: java.util.regex.Pattern QUERY_PATTERN>;
        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);
        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();
        return $z0;
    }

    protected boolean isValidFragment(java.lang.String)
    {
        org.apache.commons.validator.routines.UrlValidator r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.apache.commons.validator.routines.UrlValidator;
        r1 := @parameter0: java.lang.String;
        if r1 != null goto label0;

        return 1;

     label0:
        $z0 = specialinvoke r0.<org.apache.commons.validator.routines.UrlValidator: boolean isOff(long)>(4L);
        return $z0;
    }

    protected int countToken(java.lang.String, java.lang.String)
    {
        org.apache.commons.validator.routines.UrlValidator r0;
        java.lang.String r1, r2;
        int i0, i1;

        r0 := @this: org.apache.commons.validator.routines.UrlValidator;
        r1 := @parameter0: java.lang.String;
        r2 := @parameter1: java.lang.String;
        i0 = 0;
        i1 = 0;
        goto label1;

     label0:
        i0 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String,int)>(r1, i0);
        if i0 <= -1 goto label1;

        i0 = i0 + 1;
        i1 = i1 + 1;

     label1:
        if i0 != -1 goto label0;

        return i1;
    }

    private boolean isOn(long)
    {
        org.apache.commons.validator.routines.UrlValidator r0;
        long l0, $l1, $l2;
        byte $b3;

        r0 := @this: org.apache.commons.validator.routines.UrlValidator;
        l0 := @parameter0: long;
        $l1 = r0.<org.apache.commons.validator.routines.UrlValidator: long options>;
        $l2 = $l1 & l0;
        $b3 = $l2 cmp 0L;
        if $b3 <= 0 goto label0;

        return 1;

     label0:
        return 0;
    }

    private boolean isOff(long)
    {
        org.apache.commons.validator.routines.UrlValidator r0;
        long l0, $l1, $l2;
        byte $b3;

        r0 := @this: org.apache.commons.validator.routines.UrlValidator;
        l0 := @parameter0: long;
        $l1 = r0.<org.apache.commons.validator.routines.UrlValidator: long options>;
        $l2 = $l1 & l0;
        $b3 = $l2 cmp 0L;
        if $b3 != 0 goto label0;

        return 1;

     label0:
        return 0;
    }

    java.util.regex.Matcher matchURL(java.lang.String)
    {
        org.apache.commons.validator.routines.UrlValidator r0;
        java.lang.String r1;
        java.util.regex.Pattern $r2;
        java.util.regex.Matcher $r3;

        r0 := @this: org.apache.commons.validator.routines.UrlValidator;
        r1 := @parameter0: java.lang.String;
        $r2 = <org.apache.commons.validator.routines.UrlValidator: java.util.regex.Pattern URL_PATTERN>;
        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);
        return $r3;
    }
}
