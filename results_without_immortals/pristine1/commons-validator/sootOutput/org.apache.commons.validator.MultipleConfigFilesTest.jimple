public class org.apache.commons.validator.MultipleConfigFilesTest extends junit.framework.TestCase
{
    private org.apache.commons.validator.ValidatorResources resources;
    private static final java.lang.String FORM_KEY;
    private static final java.lang.String ACTION;

    public void <init>(java.lang.String)
    {
        org.apache.commons.validator.MultipleConfigFilesTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.validator.MultipleConfigFilesTest;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<junit.framework.TestCase: void <init>(java.lang.String)>(r1);
        r0.<org.apache.commons.validator.MultipleConfigFilesTest: org.apache.commons.validator.ValidatorResources resources> = null;
        return;
    }

    protected void setUp() throws java.io.IOException, org.xml.sax.SAXException
    {
        org.apache.commons.validator.MultipleConfigFilesTest r0;
        java.io.InputStream[] r1, $r2;
        int i0, $i1;
        java.lang.Class $r3, $r5;
        java.io.InputStream $r4, $r6, $r8;
        org.apache.commons.validator.ValidatorResources $r7;

        r0 := @this: org.apache.commons.validator.MultipleConfigFilesTest;
        $r2 = newarray (java.io.InputStream)[2];
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r4 = virtualinvoke $r3.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("MultipleConfigFilesTest-1-config.xml");
        $r2[0] = $r4;
        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();
        $r6 = virtualinvoke $r5.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("MultipleConfigFilesTest-2-config.xml");
        $r2[1] = $r6;
        r1 = $r2;
        $r7 = new org.apache.commons.validator.ValidatorResources;
        specialinvoke $r7.<org.apache.commons.validator.ValidatorResources: void <init>(java.io.InputStream[])>(r1);
        r0.<org.apache.commons.validator.MultipleConfigFilesTest: org.apache.commons.validator.ValidatorResources resources> = $r7;
        i0 = 0;
        goto label1;

     label0:
        $r8 = r1[i0];
        virtualinvoke $r8.<java.io.InputStream: void close()>();
        i0 = i0 + 1;

     label1:
        $i1 = lengthof r1;
        if i0 < $i1 goto label0;

        return;
    }

    public void testMergedConfig()
    {
        org.apache.commons.validator.MultipleConfigFilesTest r0;
        org.apache.commons.validator.Form r1, r2, r5, r6;
        org.apache.commons.validator.Field r3, r4, r7, r8;
        org.apache.commons.validator.ValidatorResources $r9, $r10, $r15, $r16;
        java.lang.String $r11, $r12, $r13, $r14, $r17, $r18, $r19, $r20;

        r0 := @this: org.apache.commons.validator.MultipleConfigFilesTest;
        $r9 = r0.<org.apache.commons.validator.MultipleConfigFilesTest: org.apache.commons.validator.ValidatorResources resources>;
        r1 = virtualinvoke $r9.<org.apache.commons.validator.ValidatorResources: org.apache.commons.validator.Form getForm(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("", "", "", "testForm1");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertNotNull(java.lang.String,java.lang.Object)>("Form \'testForm1\' not found", r1);
        $r10 = r0.<org.apache.commons.validator.MultipleConfigFilesTest: org.apache.commons.validator.ValidatorResources resources>;
        r2 = virtualinvoke $r10.<org.apache.commons.validator.ValidatorResources: org.apache.commons.validator.Form getForm(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("", "", "", "testForm2");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertNotNull(java.lang.String,java.lang.Object)>("Form \'testForm2\' not found", r2);
        r3 = virtualinvoke r1.<org.apache.commons.validator.Form: org.apache.commons.validator.Field getField(java.lang.String)>("testProperty1");
        $r11 = virtualinvoke r3.<org.apache.commons.validator.Field: java.lang.String getVarValue(java.lang.String)>("var11");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("testProperty1 - const 1", "testConstValue1", $r11);
        $r12 = virtualinvoke r3.<org.apache.commons.validator.Field: java.lang.String getVarValue(java.lang.String)>("var12");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("testProperty1 - const 2", "testConstValue2", $r12);
        r4 = virtualinvoke r2.<org.apache.commons.validator.Form: org.apache.commons.validator.Field getField(java.lang.String)>("testProperty2");
        $r13 = virtualinvoke r4.<org.apache.commons.validator.Field: java.lang.String getVarValue(java.lang.String)>("var21");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("testProperty2 - const 1", "testConstValue1", $r13);
        $r14 = virtualinvoke r4.<org.apache.commons.validator.Field: java.lang.String getVarValue(java.lang.String)>("var22");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("testProperty2 - const 2", "testConstValue2", $r14);
        $r15 = r0.<org.apache.commons.validator.MultipleConfigFilesTest: org.apache.commons.validator.ValidatorResources resources>;
        r5 = virtualinvoke $r15.<org.apache.commons.validator.ValidatorResources: org.apache.commons.validator.Form getForm(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("fr", "", "", "testForm1_fr");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertNotNull(java.lang.String,java.lang.Object)>("Form \'testForm1_fr\' not found", r5);
        $r16 = r0.<org.apache.commons.validator.MultipleConfigFilesTest: org.apache.commons.validator.ValidatorResources resources>;
        r6 = virtualinvoke $r16.<org.apache.commons.validator.ValidatorResources: org.apache.commons.validator.Form getForm(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("fr", "", "", "testForm2_fr");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertNotNull(java.lang.String,java.lang.Object)>("Form \'testForm2_fr\' not found", r6);
        r7 = virtualinvoke r5.<org.apache.commons.validator.Form: org.apache.commons.validator.Field getField(java.lang.String)>("testProperty1_fr");
        $r17 = virtualinvoke r7.<org.apache.commons.validator.Field: java.lang.String getVarValue(java.lang.String)>("var11_fr");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("testProperty1_fr - const 1", "testConstValue1_fr", $r17);
        $r18 = virtualinvoke r7.<org.apache.commons.validator.Field: java.lang.String getVarValue(java.lang.String)>("var12_fr");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("testProperty1_fr - const 2", "testConstValue2_fr", $r18);
        r8 = virtualinvoke r6.<org.apache.commons.validator.Form: org.apache.commons.validator.Field getField(java.lang.String)>("testProperty2_fr");
        $r19 = virtualinvoke r8.<org.apache.commons.validator.Field: java.lang.String getVarValue(java.lang.String)>("var21_fr");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("testProperty2_fr - const 1", "testConstValue1_fr", $r19);
        $r20 = virtualinvoke r8.<org.apache.commons.validator.Field: java.lang.String getVarValue(java.lang.String)>("var22_fr");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("testProperty2_fr - const 2", "testConstValue2_fr", $r20);
        return;
    }

    public void testBothBlank() throws org.apache.commons.validator.ValidatorException
    {
        org.apache.commons.validator.MultipleConfigFilesTest r0;
        org.apache.commons.validator.NameBean $r1, r2;
        org.apache.commons.validator.Validator r3, $r6;
        null_type n0;
        org.apache.commons.validator.ValidatorResult r4, r5;
        org.apache.commons.validator.ValidatorResources $r7;
        org.apache.commons.validator.ValidatorResults r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @this: org.apache.commons.validator.MultipleConfigFilesTest;
        $r1 = new org.apache.commons.validator.NameBean;
        specialinvoke $r1.<org.apache.commons.validator.NameBean: void <init>()>();
        r2 = $r1;
        $r6 = new org.apache.commons.validator.Validator;
        $r7 = r0.<org.apache.commons.validator.MultipleConfigFilesTest: org.apache.commons.validator.ValidatorResources resources>;
        specialinvoke $r6.<org.apache.commons.validator.Validator: void <init>(org.apache.commons.validator.ValidatorResources,java.lang.String)>($r7, "nameForm");
        r3 = $r6;
        virtualinvoke r3.<org.apache.commons.validator.Validator: void setParameter(java.lang.String,java.lang.Object)>("java.lang.Object", r2);
        n0 = null;
        r8 = virtualinvoke r3.<org.apache.commons.validator.Validator: org.apache.commons.validator.ValidatorResults validate()>();
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertNotNull(java.lang.String,java.lang.Object)>("Results are null.", r8);
        r4 = virtualinvoke r8.<org.apache.commons.validator.ValidatorResults: org.apache.commons.validator.ValidatorResult getValidatorResult(java.lang.String)>("firstName");
        r5 = virtualinvoke r8.<org.apache.commons.validator.ValidatorResults: org.apache.commons.validator.ValidatorResult getValidatorResult(java.lang.String)>("lastName");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertNotNull(java.lang.Object)>(r4);
        $z0 = virtualinvoke r4.<org.apache.commons.validator.ValidatorResult: boolean containsAction(java.lang.String)>("required");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertTrue(boolean)>($z0);
        $z1 = virtualinvoke r4.<org.apache.commons.validator.ValidatorResult: boolean isValid(java.lang.String)>("required");
        if $z1 == 0 goto label0;

        $z2 = 0;
        goto label1;

     label0:
        $z2 = 1;

     label1:
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertTrue(boolean)>($z2);
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertNotNull(java.lang.Object)>(r5);
        $z3 = virtualinvoke r5.<org.apache.commons.validator.ValidatorResult: boolean containsAction(java.lang.String)>("required");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertTrue(boolean)>($z3);
        $z4 = virtualinvoke r5.<org.apache.commons.validator.ValidatorResult: boolean isValid(java.lang.String)>("required");
        if $z4 == 0 goto label2;

        $z5 = 0;
        goto label3;

     label2:
        $z5 = 1;

     label3:
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertTrue(boolean)>($z5);
        $z6 = virtualinvoke r5.<org.apache.commons.validator.ValidatorResult: boolean containsAction(java.lang.String)>("int");
        if $z6 == 0 goto label4;

        $z7 = 0;
        goto label5;

     label4:
        $z7 = 1;

     label5:
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertTrue(boolean)>($z7);
        return;
    }

    public void testRequiredFirstNameBlankLastNameShort() throws org.apache.commons.validator.ValidatorException
    {
        org.apache.commons.validator.MultipleConfigFilesTest r0;
        org.apache.commons.validator.NameBean $r1, r2;
        org.apache.commons.validator.Validator r3, $r6;
        null_type n0;
        org.apache.commons.validator.ValidatorResult r4, r5;
        org.apache.commons.validator.ValidatorResources $r7;
        org.apache.commons.validator.ValidatorResults r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.apache.commons.validator.MultipleConfigFilesTest;
        $r1 = new org.apache.commons.validator.NameBean;
        specialinvoke $r1.<org.apache.commons.validator.NameBean: void <init>()>();
        r2 = $r1;
        virtualinvoke r2.<org.apache.commons.validator.NameBean: void setFirstName(java.lang.String)>("");
        virtualinvoke r2.<org.apache.commons.validator.NameBean: void setLastName(java.lang.String)>("Test");
        $r6 = new org.apache.commons.validator.Validator;
        $r7 = r0.<org.apache.commons.validator.MultipleConfigFilesTest: org.apache.commons.validator.ValidatorResources resources>;
        specialinvoke $r6.<org.apache.commons.validator.Validator: void <init>(org.apache.commons.validator.ValidatorResources,java.lang.String)>($r7, "nameForm");
        r3 = $r6;
        virtualinvoke r3.<org.apache.commons.validator.Validator: void setParameter(java.lang.String,java.lang.Object)>("java.lang.Object", r2);
        n0 = null;
        r8 = virtualinvoke r3.<org.apache.commons.validator.Validator: org.apache.commons.validator.ValidatorResults validate()>();
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertNotNull(java.lang.String,java.lang.Object)>("Results are null.", r8);
        r4 = virtualinvoke r8.<org.apache.commons.validator.ValidatorResults: org.apache.commons.validator.ValidatorResult getValidatorResult(java.lang.String)>("firstName");
        r5 = virtualinvoke r8.<org.apache.commons.validator.ValidatorResults: org.apache.commons.validator.ValidatorResult getValidatorResult(java.lang.String)>("lastName");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertNotNull(java.lang.Object)>(r4);
        $z0 = virtualinvoke r4.<org.apache.commons.validator.ValidatorResult: boolean containsAction(java.lang.String)>("required");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertTrue(boolean)>($z0);
        $z1 = virtualinvoke r4.<org.apache.commons.validator.ValidatorResult: boolean isValid(java.lang.String)>("required");
        if $z1 == 0 goto label0;

        $z2 = 0;
        goto label1;

     label0:
        $z2 = 1;

     label1:
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertTrue(boolean)>($z2);
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertNotNull(java.lang.Object)>(r5);
        $z3 = virtualinvoke r5.<org.apache.commons.validator.ValidatorResult: boolean containsAction(java.lang.String)>("int");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertTrue(boolean)>($z3);
        $z4 = virtualinvoke r5.<org.apache.commons.validator.ValidatorResult: boolean isValid(java.lang.String)>("int");
        if $z4 == 0 goto label2;

        $z5 = 0;
        goto label3;

     label2:
        $z5 = 1;

     label3:
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertTrue(boolean)>($z5);
        return;
    }

    public void testRequiredLastNameShort() throws org.apache.commons.validator.ValidatorException
    {
        org.apache.commons.validator.MultipleConfigFilesTest r0;
        org.apache.commons.validator.NameBean $r1, r2;
        org.apache.commons.validator.Validator r3, $r6;
        null_type n0;
        org.apache.commons.validator.ValidatorResult r4, r5;
        org.apache.commons.validator.ValidatorResources $r7;
        org.apache.commons.validator.ValidatorResults r8;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.commons.validator.MultipleConfigFilesTest;
        $r1 = new org.apache.commons.validator.NameBean;
        specialinvoke $r1.<org.apache.commons.validator.NameBean: void <init>()>();
        r2 = $r1;
        virtualinvoke r2.<org.apache.commons.validator.NameBean: void setFirstName(java.lang.String)>("Test");
        virtualinvoke r2.<org.apache.commons.validator.NameBean: void setLastName(java.lang.String)>("Test");
        $r6 = new org.apache.commons.validator.Validator;
        $r7 = r0.<org.apache.commons.validator.MultipleConfigFilesTest: org.apache.commons.validator.ValidatorResources resources>;
        specialinvoke $r6.<org.apache.commons.validator.Validator: void <init>(org.apache.commons.validator.ValidatorResources,java.lang.String)>($r7, "nameForm");
        r3 = $r6;
        virtualinvoke r3.<org.apache.commons.validator.Validator: void setParameter(java.lang.String,java.lang.Object)>("java.lang.Object", r2);
        n0 = null;
        r8 = virtualinvoke r3.<org.apache.commons.validator.Validator: org.apache.commons.validator.ValidatorResults validate()>();
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertNotNull(java.lang.String,java.lang.Object)>("Results are null.", r8);
        r4 = virtualinvoke r8.<org.apache.commons.validator.ValidatorResults: org.apache.commons.validator.ValidatorResult getValidatorResult(java.lang.String)>("firstName");
        r5 = virtualinvoke r8.<org.apache.commons.validator.ValidatorResults: org.apache.commons.validator.ValidatorResult getValidatorResult(java.lang.String)>("lastName");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertNotNull(java.lang.Object)>(r4);
        $z0 = virtualinvoke r4.<org.apache.commons.validator.ValidatorResult: boolean containsAction(java.lang.String)>("required");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertTrue(boolean)>($z0);
        $z1 = virtualinvoke r4.<org.apache.commons.validator.ValidatorResult: boolean isValid(java.lang.String)>("required");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertTrue(boolean)>($z1);
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertNotNull(java.lang.Object)>(r5);
        $z2 = virtualinvoke r5.<org.apache.commons.validator.ValidatorResult: boolean containsAction(java.lang.String)>("int");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertTrue(boolean)>($z2);
        $z3 = virtualinvoke r5.<org.apache.commons.validator.ValidatorResult: boolean isValid(java.lang.String)>("int");
        if $z3 == 0 goto label0;

        $z4 = 0;
        goto label1;

     label0:
        $z4 = 1;

     label1:
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertTrue(boolean)>($z4);
        return;
    }

    public void testRequiredLastNameLong() throws org.apache.commons.validator.ValidatorException
    {
        org.apache.commons.validator.MultipleConfigFilesTest r0;
        org.apache.commons.validator.NameBean $r1, r2;
        org.apache.commons.validator.Validator r3, $r6;
        null_type n0;
        org.apache.commons.validator.ValidatorResult r4, r5;
        org.apache.commons.validator.ValidatorResources $r7;
        org.apache.commons.validator.ValidatorResults r8;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.commons.validator.MultipleConfigFilesTest;
        $r1 = new org.apache.commons.validator.NameBean;
        specialinvoke $r1.<org.apache.commons.validator.NameBean: void <init>()>();
        r2 = $r1;
        virtualinvoke r2.<org.apache.commons.validator.NameBean: void setFirstName(java.lang.String)>("Joe");
        virtualinvoke r2.<org.apache.commons.validator.NameBean: void setLastName(java.lang.String)>("12345678");
        $r6 = new org.apache.commons.validator.Validator;
        $r7 = r0.<org.apache.commons.validator.MultipleConfigFilesTest: org.apache.commons.validator.ValidatorResources resources>;
        specialinvoke $r6.<org.apache.commons.validator.Validator: void <init>(org.apache.commons.validator.ValidatorResources,java.lang.String)>($r7, "nameForm");
        r3 = $r6;
        virtualinvoke r3.<org.apache.commons.validator.Validator: void setParameter(java.lang.String,java.lang.Object)>("java.lang.Object", r2);
        n0 = null;
        r8 = virtualinvoke r3.<org.apache.commons.validator.Validator: org.apache.commons.validator.ValidatorResults validate()>();
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertNotNull(java.lang.String,java.lang.Object)>("Results are null.", r8);
        r4 = virtualinvoke r8.<org.apache.commons.validator.ValidatorResults: org.apache.commons.validator.ValidatorResult getValidatorResult(java.lang.String)>("firstName");
        r5 = virtualinvoke r8.<org.apache.commons.validator.ValidatorResults: org.apache.commons.validator.ValidatorResult getValidatorResult(java.lang.String)>("lastName");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertNotNull(java.lang.Object)>(r4);
        $z0 = virtualinvoke r4.<org.apache.commons.validator.ValidatorResult: boolean containsAction(java.lang.String)>("required");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertTrue(boolean)>($z0);
        $z1 = virtualinvoke r4.<org.apache.commons.validator.ValidatorResult: boolean isValid(java.lang.String)>("required");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertTrue(boolean)>($z1);
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertNotNull(java.lang.Object)>(r5);
        $z2 = virtualinvoke r5.<org.apache.commons.validator.ValidatorResult: boolean containsAction(java.lang.String)>("int");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertTrue(boolean)>($z2);
        $z3 = virtualinvoke r5.<org.apache.commons.validator.ValidatorResult: boolean isValid(java.lang.String)>("int");
        staticinvoke <org.apache.commons.validator.MultipleConfigFilesTest: void assertTrue(boolean)>($z3);
        return;
    }
}
