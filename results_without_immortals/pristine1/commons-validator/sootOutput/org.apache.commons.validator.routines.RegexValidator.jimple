public class org.apache.commons.validator.routines.RegexValidator extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.util.regex.Pattern[] patterns;

    public void <init>(java.lang.String)
    {
        org.apache.commons.validator.routines.RegexValidator r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.validator.routines.RegexValidator;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<org.apache.commons.validator.routines.RegexValidator: void <init>(java.lang.String,boolean)>(r1, 1);
        return;
    }

    public void <init>(java.lang.String, boolean)
    {
        org.apache.commons.validator.routines.RegexValidator r0;
        java.lang.String r1;
        boolean z0;
        java.lang.String[] $r2;

        r0 := @this: org.apache.commons.validator.routines.RegexValidator;
        r1 := @parameter0: java.lang.String;
        z0 := @parameter1: boolean;
        $r2 = newarray (java.lang.String)[1];
        $r2[0] = r1;
        specialinvoke r0.<org.apache.commons.validator.routines.RegexValidator: void <init>(java.lang.String[],boolean)>($r2, z0);
        return;
    }

    public void <init>(java.lang.String[])
    {
        org.apache.commons.validator.routines.RegexValidator r0;
        java.lang.String[] r1;

        r0 := @this: org.apache.commons.validator.routines.RegexValidator;
        r1 := @parameter0: java.lang.String[];
        specialinvoke r0.<org.apache.commons.validator.routines.RegexValidator: void <init>(java.lang.String[],boolean)>(r1, 1);
        return;
    }

    public void <init>(java.lang.String[], boolean)
    {
        org.apache.commons.validator.routines.RegexValidator r0;
        java.lang.String[] r1;
        boolean z0;
        byte b0, $b4;
        int i1, $i2, $i3, $i5, $i6;
        java.lang.IllegalArgumentException $r2, $r6;
        java.util.regex.Pattern[] $r3, $r11;
        java.lang.String $r4, $r5, $r10, $r12;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.util.regex.Pattern $r13;

        r0 := @this: org.apache.commons.validator.routines.RegexValidator;
        r1 := @parameter0: java.lang.String[];
        z0 := @parameter1: boolean;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        if r1 == null goto label0;

        $i2 = lengthof r1;
        if $i2 != 0 goto label1;

     label0:
        $r2 = new java.lang.IllegalArgumentException;
        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Regular expressions are missing");
        throw $r2;

     label1:
        $i3 = lengthof r1;
        $r3 = newarray (java.util.regex.Pattern)[$i3];
        r0.<org.apache.commons.validator.routines.RegexValidator: java.util.regex.Pattern[] patterns> = $r3;
        if z0 == 0 goto label2;

        $b4 = 0;
        goto label3;

     label2:
        $b4 = 2;

     label3:
        b0 = $b4;
        i1 = 0;
        goto label7;

     label4:
        $r4 = r1[i1];
        if $r4 == null goto label5;

        $r5 = r1[i1];
        $i5 = virtualinvoke $r5.<java.lang.String: int length()>();
        if $i5 != 0 goto label6;

     label5:
        $r6 = new java.lang.IllegalArgumentException;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Regular expression[");
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is missing");
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);
        throw $r6;

     label6:
        $r11 = r0.<org.apache.commons.validator.routines.RegexValidator: java.util.regex.Pattern[] patterns>;
        $r12 = r1[i1];
        $r13 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>($r12, b0);
        $r11[i1] = $r13;
        i1 = i1 + 1;

     label7:
        $i6 = lengthof r1;
        if i1 < $i6 goto label4;

        return;
    }

    public boolean isValid(java.lang.String)
    {
        org.apache.commons.validator.routines.RegexValidator r0;
        java.lang.String r1;
        int i0, $i1;
        java.util.regex.Pattern[] $r2, $r5;
        java.util.regex.Pattern $r3;
        java.util.regex.Matcher $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.validator.routines.RegexValidator;
        r1 := @parameter0: java.lang.String;
        if r1 != null goto label0;

        return 0;

     label0:
        i0 = 0;
        goto label3;

     label1:
        $r2 = r0.<org.apache.commons.validator.routines.RegexValidator: java.util.regex.Pattern[] patterns>;
        $r3 = $r2[i0];
        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);
        $z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean matches()>();
        if $z0 == 0 goto label2;

        return 1;

     label2:
        i0 = i0 + 1;

     label3:
        $r5 = r0.<org.apache.commons.validator.routines.RegexValidator: java.util.regex.Pattern[] patterns>;
        $i1 = lengthof $r5;
        if i0 < $i1 goto label1;

        return 0;
    }

    public java.lang.String[] match(java.lang.String)
    {
        org.apache.commons.validator.routines.RegexValidator r0;
        java.lang.String r1, $r6;
        int i0, i1, i2, $i3, $i4;
        java.util.regex.Matcher r2;
        java.lang.String[] r3;
        java.util.regex.Pattern[] $r4, $r7;
        java.util.regex.Pattern $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.validator.routines.RegexValidator;
        r1 := @parameter0: java.lang.String;
        if r1 != null goto label0;

        return null;

     label0:
        i0 = 0;
        goto label5;

     label1:
        $r4 = r0.<org.apache.commons.validator.routines.RegexValidator: java.util.regex.Pattern[] patterns>;
        $r5 = $r4[i0];
        r2 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);
        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean matches()>();
        if $z0 == 0 goto label4;

        i1 = virtualinvoke r2.<java.util.regex.Matcher: int groupCount()>();
        r3 = newarray (java.lang.String)[i1];
        i2 = 0;
        goto label3;

     label2:
        $i3 = i2 + 1;
        $r6 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>($i3);
        r3[i2] = $r6;
        i2 = i2 + 1;

     label3:
        if i2 < i1 goto label2;

        return r3;

     label4:
        i0 = i0 + 1;

     label5:
        $r7 = r0.<org.apache.commons.validator.routines.RegexValidator: java.util.regex.Pattern[] patterns>;
        $i4 = lengthof $r7;
        if i0 < $i4 goto label1;

        return null;
    }

    public java.lang.String validate(java.lang.String)
    {
        org.apache.commons.validator.routines.RegexValidator r0;
        java.lang.String r1, r4, $r7, $r10;
        int i0, i1, i2, $i3, $i4;
        java.util.regex.Matcher r2;
        java.lang.StringBuilder r3, $r8;
        java.util.regex.Pattern[] $r5, $r11;
        java.util.regex.Pattern $r6;
        boolean $z0;

        r0 := @this: org.apache.commons.validator.routines.RegexValidator;
        r1 := @parameter0: java.lang.String;
        if r1 != null goto label0;

        return null;

     label0:
        i0 = 0;
        goto label7;

     label1:
        $r5 = r0.<org.apache.commons.validator.routines.RegexValidator: java.util.regex.Pattern[] patterns>;
        $r6 = $r5[i0];
        r2 = virtualinvoke $r6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);
        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean matches()>();
        if $z0 == 0 goto label6;

        i1 = virtualinvoke r2.<java.util.regex.Matcher: int groupCount()>();
        if i1 != 1 goto label2;

        $r7 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);
        return $r7;

     label2:
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        r3 = $r8;
        i2 = 0;
        goto label5;

     label3:
        $i3 = i2 + 1;
        r4 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>($i3);
        if r4 == null goto label4;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

     label4:
        i2 = i2 + 1;

     label5:
        if i2 < i1 goto label3;

        $r10 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r10;

     label6:
        i0 = i0 + 1;

     label7:
        $r11 = r0.<org.apache.commons.validator.routines.RegexValidator: java.util.regex.Pattern[] patterns>;
        $i4 = lengthof $r11;
        if i0 < $i4 goto label1;

        return null;
    }

    public java.lang.String toString()
    {
        org.apache.commons.validator.routines.RegexValidator r0;
        java.lang.StringBuilder $r1, r2;
        int i0, $i1;
        java.util.regex.Pattern[] $r5, $r9;
        java.util.regex.Pattern $r6;
        java.lang.String $r7, $r11;

        r0 := @this: org.apache.commons.validator.routines.RegexValidator;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();
        r2 = $r1;
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RegexValidator{");
        i0 = 0;
        goto label2;

     label0:
        if i0 <= 0 goto label1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label1:
        $r5 = r0.<org.apache.commons.validator.routines.RegexValidator: java.util.regex.Pattern[] patterns>;
        $r6 = $r5[i0];
        $r7 = virtualinvoke $r6.<java.util.regex.Pattern: java.lang.String pattern()>();
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);
        i0 = i0 + 1;

     label2:
        $r9 = r0.<org.apache.commons.validator.routines.RegexValidator: java.util.regex.Pattern[] patterns>;
        $i1 = lengthof $r9;
        if i0 < $i1 goto label0;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");
        $r11 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r11;
    }
}
