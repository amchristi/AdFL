public class org.apache.commons.validator.routines.DomainValidatorTest extends junit.framework.TestCase
{
    private org.apache.commons.validator.routines.DomainValidator validator;

    public void <init>()
    {
        org.apache.commons.validator.routines.DomainValidatorTest r0;

        r0 := @this: org.apache.commons.validator.routines.DomainValidatorTest;
        specialinvoke r0.<junit.framework.TestCase: void <init>()>();
        return;
    }

    public void setUp()
    {
        org.apache.commons.validator.routines.DomainValidatorTest r0;
        org.apache.commons.validator.routines.DomainValidator $r1;

        r0 := @this: org.apache.commons.validator.routines.DomainValidatorTest;
        $r1 = staticinvoke <org.apache.commons.validator.routines.DomainValidator: org.apache.commons.validator.routines.DomainValidator getInstance()>();
        r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator> = $r1;
        staticinvoke <org.apache.commons.validator.routines.DomainValidator: void clearTLDOverrides()>();
        return;
    }

    public void testValidDomains()
    {
        org.apache.commons.validator.routines.DomainValidatorTest r0;
        org.apache.commons.validator.routines.DomainValidator $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r0 := @this: org.apache.commons.validator.routines.DomainValidatorTest;
        $r1 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z0 = virtualinvoke $r1.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("apache.org");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("apache.org should validate", $z0);
        $r2 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z1 = virtualinvoke $r2.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("www.google.com");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("www.google.com should validate", $z1);
        $r3 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z2 = virtualinvoke $r3.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("test-domain.com");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("test-domain.com should validate", $z2);
        $r4 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z3 = virtualinvoke $r4.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("test---domain.com");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("test---domain.com should validate", $z3);
        $r5 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z4 = virtualinvoke $r5.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("test-d-o-m-ain.com");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("test-d-o-m-ain.com should validate", $z4);
        $r6 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z5 = virtualinvoke $r6.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("as.uk");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("two-letter domain label should validate", $z5);
        $r7 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z6 = virtualinvoke $r7.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("ApAchE.Org");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("case-insensitive ApAchE.Org should validate", $z6);
        $r8 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z7 = virtualinvoke $r8.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("z.com");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("single-character domain label should validate", $z7);
        $r9 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z8 = virtualinvoke $r9.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("i.have.an-example.domain.name");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("i.have.an-example.domain.name should validate", $z8);
        return;
    }

    public void testInvalidDomains()
    {
        org.apache.commons.validator.routines.DomainValidatorTest r0;
        org.apache.commons.validator.routines.DomainValidator $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;

        r0 := @this: org.apache.commons.validator.routines.DomainValidatorTest;
        $r1 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z0 = virtualinvoke $r1.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>(".org");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("bare TLD .org shouldn\'t validate", $z0);
        $r2 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z1 = virtualinvoke $r2.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>(" apache.org ");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("domain name with spaces shouldn\'t validate", $z1);
        $r3 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z2 = virtualinvoke $r3.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("apa che.org");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("domain name containing spaces shouldn\'t validate", $z2);
        $r4 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z3 = virtualinvoke $r4.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("-testdomain.name");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("domain name starting with dash shouldn\'t validate", $z3);
        $r5 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z4 = virtualinvoke $r5.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("testdomain-.name");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("domain name ending with dash shouldn\'t validate", $z4);
        $r6 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z5 = virtualinvoke $r6.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("---c.com");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("domain name starting with multiple dashes shouldn\'t validate", $z5);
        $r7 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z6 = virtualinvoke $r7.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("c--.com");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("domain name ending with multiple dashes shouldn\'t validate", $z6);
        $r8 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z7 = virtualinvoke $r8.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("apache.rog");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("domain name with invalid TLD shouldn\'t validate", $z7);
        $r9 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z8 = virtualinvoke $r9.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("http://www.apache.org");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("URL shouldn\'t validate", $z8);
        $r10 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z9 = virtualinvoke $r10.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>(" ");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("Empty string shouldn\'t validate as domain name", $z9);
        $r11 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z10 = virtualinvoke $r11.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>(null);
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("Null shouldn\'t validate as domain name", $z10);
        return;
    }

    public void testTopLevelDomains()
    {
        org.apache.commons.validator.routines.DomainValidatorTest r0;
        org.apache.commons.validator.routines.DomainValidator $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;

        r0 := @this: org.apache.commons.validator.routines.DomainValidatorTest;
        $r1 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z0 = virtualinvoke $r1.<org.apache.commons.validator.routines.DomainValidator: boolean isValidInfrastructureTld(java.lang.String)>(".arpa");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>(".arpa should validate as iTLD", $z0);
        $r2 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z1 = virtualinvoke $r2.<org.apache.commons.validator.routines.DomainValidator: boolean isValidInfrastructureTld(java.lang.String)>(".com");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>(".com shouldn\'t validate as iTLD", $z1);
        $r3 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z2 = virtualinvoke $r3.<org.apache.commons.validator.routines.DomainValidator: boolean isValidGenericTld(java.lang.String)>(".name");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>(".name should validate as gTLD", $z2);
        $r4 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z3 = virtualinvoke $r4.<org.apache.commons.validator.routines.DomainValidator: boolean isValidGenericTld(java.lang.String)>(".us");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>(".us shouldn\'t validate as gTLD", $z3);
        $r5 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z4 = virtualinvoke $r5.<org.apache.commons.validator.routines.DomainValidator: boolean isValidCountryCodeTld(java.lang.String)>(".uk");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>(".uk should validate as ccTLD", $z4);
        $r6 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z5 = virtualinvoke $r6.<org.apache.commons.validator.routines.DomainValidator: boolean isValidCountryCodeTld(java.lang.String)>(".org");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>(".org shouldn\'t validate as ccTLD", $z5);
        $r7 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z6 = virtualinvoke $r7.<org.apache.commons.validator.routines.DomainValidator: boolean isValidTld(java.lang.String)>(".COM");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>(".COM should validate as TLD", $z6);
        $r8 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z7 = virtualinvoke $r8.<org.apache.commons.validator.routines.DomainValidator: boolean isValidTld(java.lang.String)>(".BiZ");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>(".BiZ should validate as TLD", $z7);
        $r9 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z8 = virtualinvoke $r9.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>(".nope");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("invalid TLD shouldn\'t validate", $z8);
        $r10 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z9 = virtualinvoke $r10.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("empty string shouldn\'t validate as TLD", $z9);
        $r11 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z10 = virtualinvoke $r11.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>(null);
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("null shouldn\'t validate as TLD", $z10);
        return;
    }

    public void testAllowLocal()
    {
        org.apache.commons.validator.routines.DomainValidatorTest r0;
        org.apache.commons.validator.routines.DomainValidator r1, r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @this: org.apache.commons.validator.routines.DomainValidatorTest;
        r1 = staticinvoke <org.apache.commons.validator.routines.DomainValidator: org.apache.commons.validator.routines.DomainValidator getInstance(boolean)>(0);
        r2 = staticinvoke <org.apache.commons.validator.routines.DomainValidator: org.apache.commons.validator.routines.DomainValidator getInstance(boolean)>(1);
        $r3 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertEquals(java.lang.Object,java.lang.Object)>(r1, $r3);
        $z0 = virtualinvoke r1.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("localhost.localdomain");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("localhost.localdomain should validate", $z0);
        $z1 = virtualinvoke r1.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("localhost");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("localhost should validate", $z1);
        $z2 = virtualinvoke r2.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("localhost.localdomain");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("localhost.localdomain should validate", $z2);
        $z3 = virtualinvoke r2.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("localhost");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("localhost should validate", $z3);
        $z4 = virtualinvoke r2.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("hostname");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("hostname should validate", $z4);
        $z5 = virtualinvoke r2.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("machinename");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("machinename should validate", $z5);
        $z6 = virtualinvoke r2.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("apache.org");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("apache.org should validate", $z6);
        $z7 = virtualinvoke r2.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>(" apache.org ");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("domain name with spaces shouldn\'t validate", $z7);
        return;
    }

    public void testIDN()
    {
        org.apache.commons.validator.routines.DomainValidatorTest r0;
        org.apache.commons.validator.routines.DomainValidator $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.validator.routines.DomainValidatorTest;
        $r1 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z0 = virtualinvoke $r1.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("www.xn--bcher-kva.ch");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("b\u00fccher.ch in IDN should validate", $z0);
        return;
    }

    public void testIDNJava6OrLater()
    {
        org.apache.commons.validator.routines.DomainValidatorTest r0;
        java.lang.String r1;
        int $i0;
        java.io.PrintStream $r2;
        org.apache.commons.validator.routines.DomainValidator $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.commons.validator.routines.DomainValidatorTest;
        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.version");
        $i0 = virtualinvoke r1.<java.lang.String: int compareTo(java.lang.String)>("1.6");
        if $i0 >= 0 goto label0;

        $r2 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("Cannot run Unicode IDN tests");
        return;

     label0:
        $r3 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z0 = virtualinvoke $r3.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("www.b\u00fccher.ch");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("b\u00fccher.ch should validate", $z0);
        $r4 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z1 = virtualinvoke $r4.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("xn--d1abbgf6aiiy.xn--p1ai");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("xn--d1abbgf6aiiy.xn--p1ai should validate", $z1);
        $r5 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z2 = virtualinvoke $r5.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("\u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442.\u0440\u0444 should validate", $z2);
        $r6 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z3 = virtualinvoke $r6.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("www.\ufffd.ch");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("www.\ufffd.ch FFFD should fail", $z3);
        return;
    }

    public void testRFC2396domainlabel()
    {
        org.apache.commons.validator.routines.DomainValidatorTest r0;
        org.apache.commons.validator.routines.DomainValidator $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: org.apache.commons.validator.routines.DomainValidatorTest;
        $r1 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z0 = virtualinvoke $r1.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("a.ch");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("a.ch should validate", $z0);
        $r2 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z1 = virtualinvoke $r2.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("9.ch");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("9.ch should validate", $z1);
        $r3 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z2 = virtualinvoke $r3.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("az.ch");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("az.ch should validate", $z2);
        $r4 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z3 = virtualinvoke $r4.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("09.ch");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("09.ch should validate", $z3);
        $r5 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z4 = virtualinvoke $r5.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("9-1.ch");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("9-1.ch should validate", $z4);
        $r6 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z5 = virtualinvoke $r6.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("91-.ch");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("91-.ch should not validate", $z5);
        $r7 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z6 = virtualinvoke $r7.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("-.ch");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("-.ch should not validate", $z6);
        return;
    }

    public void testRFC2396toplabel()
    {
        org.apache.commons.validator.routines.DomainValidatorTest r0;
        org.apache.commons.validator.routines.DomainValidator $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r0 := @this: org.apache.commons.validator.routines.DomainValidatorTest;
        $r1 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z0 = virtualinvoke $r1.<org.apache.commons.validator.routines.DomainValidator: boolean isValidDomainSyntax(java.lang.String)>("a.c");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("a.c (alpha) should validate", $z0);
        $r2 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z1 = virtualinvoke $r2.<org.apache.commons.validator.routines.DomainValidator: boolean isValidDomainSyntax(java.lang.String)>("a.cc");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("a.cc (alpha alpha) should validate", $z1);
        $r3 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z2 = virtualinvoke $r3.<org.apache.commons.validator.routines.DomainValidator: boolean isValidDomainSyntax(java.lang.String)>("a.c9");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("a.c9 (alpha alphanum) should validate", $z2);
        $r4 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z3 = virtualinvoke $r4.<org.apache.commons.validator.routines.DomainValidator: boolean isValidDomainSyntax(java.lang.String)>("a.c-9");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("a.c-9 (alpha - alphanum) should validate", $z3);
        $r5 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z4 = virtualinvoke $r5.<org.apache.commons.validator.routines.DomainValidator: boolean isValidDomainSyntax(java.lang.String)>("a.c-z");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("a.c-z (alpha - alpha) should validate", $z4);
        $r6 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z5 = virtualinvoke $r6.<org.apache.commons.validator.routines.DomainValidator: boolean isValidDomainSyntax(java.lang.String)>("a.9c");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("a.9c (alphanum alpha) should fail", $z5);
        $r7 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z6 = virtualinvoke $r7.<org.apache.commons.validator.routines.DomainValidator: boolean isValidDomainSyntax(java.lang.String)>("a.c-");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("a.c- (alpha -) should fail", $z6);
        $r8 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z7 = virtualinvoke $r8.<org.apache.commons.validator.routines.DomainValidator: boolean isValidDomainSyntax(java.lang.String)>("a.-");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("a.- (-) should fail", $z7);
        $r9 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z8 = virtualinvoke $r9.<org.apache.commons.validator.routines.DomainValidator: boolean isValidDomainSyntax(java.lang.String)>("a.-9");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("a.-9 (- alphanum) should fail", $z8);
        return;
    }

    public void testDomainNoDots()
    {
        org.apache.commons.validator.routines.DomainValidatorTest r0;
        org.apache.commons.validator.routines.DomainValidator $r1, $r2, $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.apache.commons.validator.routines.DomainValidatorTest;
        $r1 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z0 = virtualinvoke $r1.<org.apache.commons.validator.routines.DomainValidator: boolean isValidDomainSyntax(java.lang.String)>("a");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("a (alpha) should validate", $z0);
        $r2 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z1 = virtualinvoke $r2.<org.apache.commons.validator.routines.DomainValidator: boolean isValidDomainSyntax(java.lang.String)>("9");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("9 (alphanum) should validate", $z1);
        $r3 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z2 = virtualinvoke $r3.<org.apache.commons.validator.routines.DomainValidator: boolean isValidDomainSyntax(java.lang.String)>("c-z");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("c-z (alpha - alpha) should validate", $z2);
        $r4 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z3 = virtualinvoke $r4.<org.apache.commons.validator.routines.DomainValidator: boolean isValidDomainSyntax(java.lang.String)>("c-");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("c- (alpha -) should fail", $z3);
        $r5 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z4 = virtualinvoke $r5.<org.apache.commons.validator.routines.DomainValidator: boolean isValidDomainSyntax(java.lang.String)>("-c");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("-c (- alpha) should fail", $z4);
        $r6 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z5 = virtualinvoke $r6.<org.apache.commons.validator.routines.DomainValidator: boolean isValidDomainSyntax(java.lang.String)>("-");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("- (-) should fail", $z5);
        return;
    }

    public void testValidator297()
    {
        org.apache.commons.validator.routines.DomainValidatorTest r0;
        org.apache.commons.validator.routines.DomainValidator $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.validator.routines.DomainValidatorTest;
        $r1 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z0 = virtualinvoke $r1.<org.apache.commons.validator.routines.DomainValidator: boolean isValid(java.lang.String)>("xn--d1abbgf6aiiy.xn--p1ai");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("xn--d1abbgf6aiiy.xn--p1ai should validate", $z0);
        return;
    }

    public void testValidator306()
    {
        org.apache.commons.validator.routines.DomainValidatorTest r0;
        java.lang.String r1, $r2, r3, $r9, $r10, $r15, $r17;
        int $i0, $i1;
        org.apache.commons.validator.routines.DomainValidator $r4, $r5, $r6, $r7, $r12, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r8, $r11, $r14, $r16;

        r0 := @this: org.apache.commons.validator.routines.DomainValidatorTest;
        r1 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789A";
        $r2 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789A";
        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertEquals(int,int)>(63, $i0);
        $r4 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z0 = virtualinvoke $r4.<org.apache.commons.validator.routines.DomainValidator: boolean isValidDomainSyntax(java.lang.String)>("abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789A.com");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("63 chars label should validate", $z0);
        $r5 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z1 = virtualinvoke $r5.<org.apache.commons.validator.routines.DomainValidator: boolean isValidDomainSyntax(java.lang.String)>("abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789Ax.com");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("64 chars label should fail", $z1);
        $r6 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z2 = virtualinvoke $r6.<org.apache.commons.validator.routines.DomainValidator: boolean isValidDomainSyntax(java.lang.String)>("test.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789A");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("63 chars TLD should validate", $z2);
        $r7 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z3 = virtualinvoke $r7.<org.apache.commons.validator.routines.DomainValidator: boolean isValidDomainSyntax(java.lang.String)>("test.xabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789A");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("64 chars TLD should fail", $z3);
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789A.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789A.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789A.");
        $r9 = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789A";
        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String substring(int,int)>(0, 61);
        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);
        r3 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        $i1 = virtualinvoke r3.<java.lang.String: int length()>();
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertEquals(int,int)>(253, $i1);
        $r12 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z4 = virtualinvoke $r12.<org.apache.commons.validator.routines.DomainValidator: boolean isValidDomainSyntax(java.lang.String)>(r3);
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(java.lang.String,boolean)>("253 chars domain should validate", $z4);
        $r13 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $r14 = new java.lang.StringBuilder;
        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r3);
        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>($r15);
        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
        $z5 = virtualinvoke $r13.<org.apache.commons.validator.routines.DomainValidator: boolean isValidDomainSyntax(java.lang.String)>($r17);
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(java.lang.String,boolean)>("254 chars domain should fail", $z5);
        return;
    }

    public void testUnicodeToASCII()
    {
        org.apache.commons.validator.routines.DomainValidatorTest r0;
        java.lang.String[] r1, r2, $r5, $r9, $r10, $r11, $r12, $r13, $r14, r17;
        int i0, i1, i2, i3;
        java.lang.String r3, $r7, $r18, $r19, $r20;
        java.lang.String[][] r4, $r8, r15;

        r0 := @this: org.apache.commons.validator.routines.DomainValidatorTest;
        $r5 = newarray (java.lang.String)[9];
        $r5[0] = "";
        $r5[1] = ",";
        $r5[2] = ".";
        $r5[3] = "a.";
        $r5[4] = "a.b";
        $r5[5] = "a..b";
        $r5[6] = "a...b";
        $r5[7] = ".a";
        $r5[8] = "..a";
        r1 = $r5;
        r2 = r1;
        i0 = lengthof r1;
        i1 = 0;
        goto label1;

     label0:
        r3 = r2[i1];
        $r7 = staticinvoke <org.apache.commons.validator.routines.DomainValidator: java.lang.String unicodeToASCII(java.lang.String)>(r3);
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertEquals(java.lang.String,java.lang.String)>(r3, $r7);
        i1 = i1 + 1;

     label1:
        if i1 < i0 goto label0;

        $r8 = newarray (java.lang.String[])[6];
        $r9 = newarray (java.lang.String)[2];
        $r9[0] = "b\u3002";
        $r9[1] = "b.";
        $r8[0] = $r9;
        $r10 = newarray (java.lang.String)[2];
        $r10[0] = "b\uff0e";
        $r10[1] = "b.";
        $r8[1] = $r10;
        $r11 = newarray (java.lang.String)[2];
        $r11[0] = "b\uff61";
        $r11[1] = "b.";
        $r8[2] = $r11;
        $r12 = newarray (java.lang.String)[2];
        $r12[0] = "\u3002";
        $r12[1] = ".";
        $r8[3] = $r12;
        $r13 = newarray (java.lang.String)[2];
        $r13[0] = "\uff0e";
        $r13[1] = ".";
        $r8[4] = $r13;
        $r14 = newarray (java.lang.String)[2];
        $r14[0] = "\uff61";
        $r14[1] = ".";
        $r8[5] = $r14;
        r15 = $r8;
        r4 = r15;
        i2 = lengthof r15;
        i3 = 0;
        goto label3;

     label2:
        r17 = r4[i3];
        $r18 = r17[1];
        $r19 = r17[0];
        $r20 = staticinvoke <org.apache.commons.validator.routines.DomainValidator: java.lang.String unicodeToASCII(java.lang.String)>($r19);
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertEquals(java.lang.String,java.lang.String)>($r18, $r20);
        i3 = i3 + 1;

     label3:
        if i3 < i2 goto label2;

        return;
    }

    public void testIsIDNtoASCIIBroken()
    {
        org.apache.commons.validator.routines.DomainValidatorTest r0;
        java.io.PrintStream $r1, $r8, $r15, $r22;
        java.lang.String r2, r5, $r6, $r7, $r10, $r12, $r17, $r19, $r21;
        boolean z0;
        java.lang.String[] r3, r4, $r13;
        int i0, i1;
        java.lang.StringBuilder $r9, $r11, $r16, $r18, $r20;

        r0 := @this: org.apache.commons.validator.routines.DomainValidatorTest;
        $r1 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(">>DomainValidatorTest.testIsIDNtoASCIIBroken()");
        r2 = ".";
        $r6 = ".";
        $r7 = staticinvoke <java.net.IDN: java.lang.String toASCII(java.lang.String)>(".");
        z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);
        $r8 = <java.lang.System: java.io.PrintStream out>;
        $r9 = new java.lang.StringBuilder;
        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("IDN.toASCII is ");
        if z0 == 0 goto label0;

        $r10 = "OK";
        goto label1;

     label0:
        $r10 = "BROKEN";

     label1:
        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r12);
        $r13 = newarray (java.lang.String)[12];
        $r13[0] = "java.version";
        $r13[1] = "java.vendor";
        $r13[2] = "java.vm.specification.version";
        $r13[3] = "java.vm.specification.vendor";
        $r13[4] = "java.vm.specification.name";
        $r13[5] = "java.vm.version";
        $r13[6] = "java.vm.vendor";
        $r13[7] = "java.vm.name";
        $r13[8] = "java.specification.version";
        $r13[9] = "java.specification.vendor";
        $r13[10] = "java.specification.name";
        $r13[11] = "java.class.version";
        r3 = $r13;
        r4 = r3;
        i0 = lengthof r3;
        i1 = 0;
        goto label3;

     label2:
        r5 = r4[i1];
        $r15 = <java.lang.System: java.io.PrintStream out>;
        $r16 = new java.lang.StringBuilder;
        $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r5);
        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>($r17);
        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");
        $r19 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r5);
        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r21);
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label2;

        $r22 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>("<<DomainValidatorTest.testIsIDNtoASCIIBroken()");
        return;
    }

    public void test_INFRASTRUCTURE_TLDS_sortedAndLowerCase() throws java.lang.Exception
    {
        org.apache.commons.validator.routines.DomainValidatorTest r0;
        boolean z0;

        r0 := @this: org.apache.commons.validator.routines.DomainValidatorTest;
        z0 = staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: boolean isSortedLowerCase(java.lang.String)>("INFRASTRUCTURE_TLDS");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(boolean)>(z0);
        return;
    }

    public void test_COUNTRY_CODE_TLDS_sortedAndLowerCase() throws java.lang.Exception
    {
        org.apache.commons.validator.routines.DomainValidatorTest r0;
        boolean z0;

        r0 := @this: org.apache.commons.validator.routines.DomainValidatorTest;
        z0 = staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: boolean isSortedLowerCase(java.lang.String)>("COUNTRY_CODE_TLDS");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(boolean)>(z0);
        return;
    }

    public void test_GENERIC_TLDS_sortedAndLowerCase() throws java.lang.Exception
    {
        org.apache.commons.validator.routines.DomainValidatorTest r0;
        boolean z0;

        r0 := @this: org.apache.commons.validator.routines.DomainValidatorTest;
        z0 = staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: boolean isSortedLowerCase(java.lang.String)>("GENERIC_TLDS");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(boolean)>(z0);
        return;
    }

    public void test_LOCAL_TLDS_sortedAndLowerCase() throws java.lang.Exception
    {
        org.apache.commons.validator.routines.DomainValidatorTest r0;
        boolean z0;

        r0 := @this: org.apache.commons.validator.routines.DomainValidatorTest;
        z0 = staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: boolean isSortedLowerCase(java.lang.String)>("LOCAL_TLDS");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(boolean)>(z0);
        return;
    }

    public void testUpdateCountryCode()
    {
        org.apache.commons.validator.routines.DomainValidatorTest r0;
        org.apache.commons.validator.routines.DomainValidator $r1, $r4, $r7, $r8, $r11, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.commons.validator.routines.DomainValidator$ArrayType $r2, $r5, $r9, $r12;
        java.lang.String[] $r3, $r6, $r10, $r13;

        r0 := @this: org.apache.commons.validator.routines.DomainValidatorTest;
        $r1 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z0 = virtualinvoke $r1.<org.apache.commons.validator.routines.DomainValidator: boolean isValidCountryCodeTld(java.lang.String)>("com");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(boolean)>($z0);
        $r2 = <org.apache.commons.validator.routines.DomainValidator$ArrayType: org.apache.commons.validator.routines.DomainValidator$ArrayType COUNTRY_CODE_PLUS>;
        $r3 = newarray (java.lang.String)[1];
        $r3[0] = "com";
        staticinvoke <org.apache.commons.validator.routines.DomainValidator: void updateTLDOverride(org.apache.commons.validator.routines.DomainValidator$ArrayType,java.lang.String[])>($r2, $r3);
        $r4 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z1 = virtualinvoke $r4.<org.apache.commons.validator.routines.DomainValidator: boolean isValidCountryCodeTld(java.lang.String)>("com");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(boolean)>($z1);
        $r5 = <org.apache.commons.validator.routines.DomainValidator$ArrayType: org.apache.commons.validator.routines.DomainValidator$ArrayType COUNTRY_CODE_MINUS>;
        $r6 = newarray (java.lang.String)[1];
        $r6[0] = "com";
        staticinvoke <org.apache.commons.validator.routines.DomainValidator: void updateTLDOverride(org.apache.commons.validator.routines.DomainValidator$ArrayType,java.lang.String[])>($r5, $r6);
        $r7 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z2 = virtualinvoke $r7.<org.apache.commons.validator.routines.DomainValidator: boolean isValidCountryCodeTld(java.lang.String)>("com");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(boolean)>($z2);
        $r8 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z3 = virtualinvoke $r8.<org.apache.commons.validator.routines.DomainValidator: boolean isValidCountryCodeTld(java.lang.String)>("ch");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(boolean)>($z3);
        $r9 = <org.apache.commons.validator.routines.DomainValidator$ArrayType: org.apache.commons.validator.routines.DomainValidator$ArrayType COUNTRY_CODE_MINUS>;
        $r10 = newarray (java.lang.String)[1];
        $r10[0] = "ch";
        staticinvoke <org.apache.commons.validator.routines.DomainValidator: void updateTLDOverride(org.apache.commons.validator.routines.DomainValidator$ArrayType,java.lang.String[])>($r9, $r10);
        $r11 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z4 = virtualinvoke $r11.<org.apache.commons.validator.routines.DomainValidator: boolean isValidCountryCodeTld(java.lang.String)>("ch");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(boolean)>($z4);
        $r12 = <org.apache.commons.validator.routines.DomainValidator$ArrayType: org.apache.commons.validator.routines.DomainValidator$ArrayType COUNTRY_CODE_MINUS>;
        $r13 = newarray (java.lang.String)[1];
        $r13[0] = "xx";
        staticinvoke <org.apache.commons.validator.routines.DomainValidator: void updateTLDOverride(org.apache.commons.validator.routines.DomainValidator$ArrayType,java.lang.String[])>($r12, $r13);
        $r14 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z5 = virtualinvoke $r14.<org.apache.commons.validator.routines.DomainValidator: boolean isValidCountryCodeTld(java.lang.String)>("ch");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(boolean)>($z5);
        return;
    }

    public void testUpdateGeneric()
    {
        org.apache.commons.validator.routines.DomainValidatorTest r0;
        org.apache.commons.validator.routines.DomainValidator $r1, $r4, $r7, $r8, $r11, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.commons.validator.routines.DomainValidator$ArrayType $r2, $r5, $r9, $r12;
        java.lang.String[] $r3, $r6, $r10, $r13;

        r0 := @this: org.apache.commons.validator.routines.DomainValidatorTest;
        $r1 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z0 = virtualinvoke $r1.<org.apache.commons.validator.routines.DomainValidator: boolean isValidGenericTld(java.lang.String)>("ch");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(boolean)>($z0);
        $r2 = <org.apache.commons.validator.routines.DomainValidator$ArrayType: org.apache.commons.validator.routines.DomainValidator$ArrayType GENERIC_PLUS>;
        $r3 = newarray (java.lang.String)[1];
        $r3[0] = "ch";
        staticinvoke <org.apache.commons.validator.routines.DomainValidator: void updateTLDOverride(org.apache.commons.validator.routines.DomainValidator$ArrayType,java.lang.String[])>($r2, $r3);
        $r4 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z1 = virtualinvoke $r4.<org.apache.commons.validator.routines.DomainValidator: boolean isValidGenericTld(java.lang.String)>("ch");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(boolean)>($z1);
        $r5 = <org.apache.commons.validator.routines.DomainValidator$ArrayType: org.apache.commons.validator.routines.DomainValidator$ArrayType GENERIC_MINUS>;
        $r6 = newarray (java.lang.String)[1];
        $r6[0] = "ch";
        staticinvoke <org.apache.commons.validator.routines.DomainValidator: void updateTLDOverride(org.apache.commons.validator.routines.DomainValidator$ArrayType,java.lang.String[])>($r5, $r6);
        $r7 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z2 = virtualinvoke $r7.<org.apache.commons.validator.routines.DomainValidator: boolean isValidGenericTld(java.lang.String)>("ch");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(boolean)>($z2);
        $r8 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z3 = virtualinvoke $r8.<org.apache.commons.validator.routines.DomainValidator: boolean isValidGenericTld(java.lang.String)>("com");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(boolean)>($z3);
        $r9 = <org.apache.commons.validator.routines.DomainValidator$ArrayType: org.apache.commons.validator.routines.DomainValidator$ArrayType GENERIC_MINUS>;
        $r10 = newarray (java.lang.String)[1];
        $r10[0] = "com";
        staticinvoke <org.apache.commons.validator.routines.DomainValidator: void updateTLDOverride(org.apache.commons.validator.routines.DomainValidator$ArrayType,java.lang.String[])>($r9, $r10);
        $r11 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z4 = virtualinvoke $r11.<org.apache.commons.validator.routines.DomainValidator: boolean isValidGenericTld(java.lang.String)>("com");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertFalse(boolean)>($z4);
        $r12 = <org.apache.commons.validator.routines.DomainValidator$ArrayType: org.apache.commons.validator.routines.DomainValidator$ArrayType GENERIC_MINUS>;
        $r13 = newarray (java.lang.String)[1];
        $r13[0] = "xx";
        staticinvoke <org.apache.commons.validator.routines.DomainValidator: void updateTLDOverride(org.apache.commons.validator.routines.DomainValidator$ArrayType,java.lang.String[])>($r12, $r13);
        $r14 = r0.<org.apache.commons.validator.routines.DomainValidatorTest: org.apache.commons.validator.routines.DomainValidator validator>;
        $z5 = virtualinvoke $r14.<org.apache.commons.validator.routines.DomainValidator: boolean isValidGenericTld(java.lang.String)>("com");
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertTrue(boolean)>($z5);
        return;
    }

    public void testCannotUpdate()
    {
        org.apache.commons.validator.routines.DomainValidatorTest r0;
        org.apache.commons.validator.routines.DomainValidator$ArrayType $r1, $r5;
        org.apache.commons.validator.routines.DomainValidator r2;
        java.lang.IllegalStateException r3, $r7;
        java.lang.String[] $r4, $r6;

        r0 := @this: org.apache.commons.validator.routines.DomainValidatorTest;
        $r1 = <org.apache.commons.validator.routines.DomainValidator$ArrayType: org.apache.commons.validator.routines.DomainValidator$ArrayType GENERIC_PLUS>;
        $r4 = newarray (java.lang.String)[1];
        $r4[0] = "ch";
        staticinvoke <org.apache.commons.validator.routines.DomainValidator: void updateTLDOverride(org.apache.commons.validator.routines.DomainValidator$ArrayType,java.lang.String[])>($r1, $r4);
        r2 = staticinvoke <org.apache.commons.validator.routines.DomainValidator: org.apache.commons.validator.routines.DomainValidator getInstance()>();
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void assertNotNull(java.lang.Object)>(r2);

     label0:
        $r5 = <org.apache.commons.validator.routines.DomainValidator$ArrayType: org.apache.commons.validator.routines.DomainValidator$ArrayType GENERIC_PLUS>;
        $r6 = newarray (java.lang.String)[1];
        $r6[0] = "ch";
        staticinvoke <org.apache.commons.validator.routines.DomainValidator: void updateTLDOverride(org.apache.commons.validator.routines.DomainValidator$ArrayType,java.lang.String[])>($r5, $r6);
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void fail(java.lang.String)>("Expected IllegalStateException");

     label1:
        goto label3;

     label2:
        $r7 := @caughtexception;
        r3 = $r7;

     label3:
        return;

        catch java.lang.IllegalStateException from label0 to label1 with label2;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0, r1, r12, $r15;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z9, $z10, $z11, $z12, $z13;
        int i0, i1;
        java.lang.String r2, r5, r6, r10, r11, r13, r14, $r30, $r32, $r35, $r38, $r41, $r46, $r47, r48, r53, $r57;
        java.io.File r3, $r20, r21, $r22;
        java.io.BufferedReader r4, $r23;
        java.util.Map r7;
        java.util.TreeMap r8, r9, $r26, $r27, $r49;
        java.io.PrintStream $r16, $r43, $r54, $r58;
        java.util.HashSet $r17, r18;
        org.apache.commons.validator.routines.DomainValidator r19;
        long l2;
        java.io.FileReader $r24;
        java.io.IOException $r25;
        java.util.Locale $r28;
        java.lang.Object $r29, $r52;
        java.lang.StringBuilder $r31, $r33, $r34, $r37, $r39, $r40, $r44, $r45, $r55, $r56;
        java.util.Set $r50;
        java.util.Iterator r51;

        r0 := @parameter0: java.lang.String[];
        z0 = 1;
        $r15 = newarray (java.lang.String)[4];
        $r15[0] = "INFRASTRUCTURE_TLDS";
        $r15[1] = "COUNTRY_CODE_TLDS";
        $r15[2] = "GENERIC_TLDS";
        $r15[3] = "LOCAL_TLDS";
        r1 = $r15;
        i0 = lengthof $r15;
        i1 = 0;
        goto label1;

     label0:
        r2 = r1[i1];
        $z2 = staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: boolean isSortedLowerCase(java.lang.String)>(r2);
        z0 = z0 & $z2;
        i1 = i1 + 1;

     label1:
        if i1 < i0 goto label0;

        if z0 != 0 goto label2;

        $r16 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>("Fix arrays before retrying; cannot continue");
        return;

     label2:
        $r17 = new java.util.HashSet;
        specialinvoke $r17.<java.util.HashSet: void <init>()>();
        r18 = $r17;
        r19 = staticinvoke <org.apache.commons.validator.routines.DomainValidator: org.apache.commons.validator.routines.DomainValidator getInstance()>();
        $r20 = new java.io.File;
        specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>("target/tlds-alpha-by-domain.txt");
        r21 = $r20;
        l2 = staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: long download(java.io.File,java.lang.String,long)>(r21, "http://data.iana.org/TLD/tlds-alpha-by-domain.txt", 0L);
        $r22 = new java.io.File;
        specialinvoke $r22.<java.io.File: void <init>(java.lang.String)>("target/tlds-alpha-by-domain.html");
        r3 = $r22;
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: long download(java.io.File,java.lang.String,long)>(r3, "http://www.iana.org/domains/root/db", l2);
        $r23 = new java.io.BufferedReader;
        $r24 = new java.io.FileReader;
        specialinvoke $r24.<java.io.FileReader: void <init>(java.io.File)>(r21);
        specialinvoke $r23.<java.io.BufferedReader: void <init>(java.io.Reader)>($r24);
        r4 = $r23;
        r5 = virtualinvoke r4.<java.io.BufferedReader: java.lang.String readLine()>();
        $z3 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("# Version ");
        if $z3 == 0 goto label3;

        r6 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>(2);
        goto label4;

     label3:
        virtualinvoke r4.<java.io.BufferedReader: void close()>();
        $r25 = new java.io.IOException;
        specialinvoke $r25.<java.io.IOException: void <init>(java.lang.String)>("File does not have expected Version header");
        throw $r25;

     label4:
        z1 = 0;
        r7 = staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: java.util.Map getHtmlInfo(java.io.File)>(r3);
        $r26 = new java.util.TreeMap;
        specialinvoke $r26.<java.util.TreeMap: void <init>()>();
        r8 = $r26;
        $r27 = new java.util.TreeMap;
        specialinvoke $r27.<java.util.TreeMap: void <init>()>();
        r9 = $r27;
        goto label11;

     label5:
        $z4 = virtualinvoke r48.<java.lang.String: boolean startsWith(java.lang.String)>("#");
        if $z4 != 0 goto label11;

        $r28 = <java.util.Locale: java.util.Locale ENGLISH>;
        r10 = virtualinvoke r48.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r28);
        $z5 = virtualinvoke r48.<java.lang.String: boolean startsWith(java.lang.String)>("XN--");
        if $z5 == 0 goto label6;

        r11 = staticinvoke <java.net.IDN: java.lang.String toUnicode(java.lang.String)>(r48);
        goto label7;

     label6:
        r11 = r10;

     label7:
        $z6 = virtualinvoke r19.<org.apache.commons.validator.routines.DomainValidator: boolean isValidTld(java.lang.String)>(r10);
        if $z6 != 0 goto label10;

        $r29 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10);
        r12 = (java.lang.String[]) $r29;
        if r12 == null goto label9;

        r13 = r12[0];
        r14 = r12[1];
        $r30 = "country-code";
        $z7 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>(r13);
        if $z7 == 0 goto label8;

        $r31 = new java.lang.StringBuilder;
        $r32 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r11);
        specialinvoke $r31.<java.lang.StringBuilder: void <init>(java.lang.String)>($r32);
        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);
        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, $r35);
        goto label10;

     label8:
        $r37 = new java.lang.StringBuilder;
        $r38 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r11);
        specialinvoke $r37.<java.lang.StringBuilder: void <init>(java.lang.String)>($r38);
        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);
        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();
        interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, $r41);
        goto label10;

     label9:
        $r43 = <java.lang.System: java.io.PrintStream err>;
        $r44 = new java.lang.StringBuilder;
        specialinvoke $r44.<java.lang.StringBuilder: void <init>(java.lang.String)>("Expected to find HTML info for ");
        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);
        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r43.<java.io.PrintStream: void println(java.lang.String)>($r46);

     label10:
        interfaceinvoke r18.<java.util.Set: boolean add(java.lang.Object)>(r10);

     label11:
        $r47 = virtualinvoke r4.<java.io.BufferedReader: java.lang.String readLine()>();
        r48 = $r47;
        if $r47 != null goto label5;

        virtualinvoke r4.<java.io.BufferedReader: void close()>();
        $r49 = new java.util.TreeMap;
        specialinvoke $r49.<java.util.TreeMap: void <init>(java.util.Map)>(r7);
        $r50 = virtualinvoke $r49.<java.util.TreeMap: java.util.Set keySet()>();
        r51 = interfaceinvoke $r50.<java.util.Set: java.util.Iterator iterator()>();
        goto label13;

     label12:
        $r52 = interfaceinvoke r51.<java.util.Iterator: java.lang.Object next()>();
        r53 = (java.lang.String) $r52;
        $z9 = interfaceinvoke r18.<java.util.Set: boolean contains(java.lang.Object)>(r53);
        if $z9 != 0 goto label13;

        $z10 = staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: boolean isNotInRootZone(java.lang.String)>(r53);
        if $z10 != 0 goto label13;

        $r54 = <java.lang.System: java.io.PrintStream err>;
        $r55 = new java.lang.StringBuilder;
        specialinvoke $r55.<java.lang.StringBuilder: void <init>(java.lang.String)>("Expected to find text entry for html: ");
        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r53);
        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r57);

     label13:
        $z11 = interfaceinvoke r51.<java.util.Iterator: boolean hasNext()>();
        if $z11 != 0 goto label12;

        $z12 = interfaceinvoke r8.<java.util.Map: boolean isEmpty()>();
        if $z12 != 0 goto label14;

        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void printMap(java.lang.String,java.util.Map,java.lang.String)>(r6, r8, "TLD");

     label14:
        $z13 = interfaceinvoke r9.<java.util.Map: boolean isEmpty()>();
        if $z13 != 0 goto label15;

        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void printMap(java.lang.String,java.util.Map,java.lang.String)>(r6, r9, "CC");

     label15:
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: boolean isInIanaList(java.lang.String,java.util.Set)>("INFRASTRUCTURE_TLDS", r18);
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: boolean isInIanaList(java.lang.String,java.util.Set)>("COUNTRY_CODE_TLDS", r18);
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: boolean isInIanaList(java.lang.String,java.util.Set)>("GENERIC_TLDS", r18);
        $r58 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r58.<java.io.PrintStream: void println(java.lang.String)>("Finished checks");
        return;
    }

    private static void printMap(java.lang.String, java.util.Map, java.lang.String)
    {
        java.lang.String r0, r2, $r9, $r13, $r19, $r23, $r25;
        java.util.Map r1;
        java.io.PrintStream $r3, $r10, $r16, $r26;
        java.lang.StringBuilder $r4, $r7, $r8, $r11, $r12, $r17, $r20, $r21, $r24;
        java.util.Iterator r5;
        java.util.Map$Entry r6;
        java.util.Set $r14;
        java.lang.Object $r15, $r18, $r22;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.util.Map;
        r2 := @parameter2: java.lang.String;
        $r3 = <java.lang.System: java.io.PrintStream out>;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Entries missing from ");
        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" List\n");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r9);
        if r0 == null goto label0;

        $r10 = <java.lang.System: java.io.PrintStream out>;
        $r11 = new java.lang.StringBuilder;
        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("        // Taken from ");
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r13);

     label0:
        $r14 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();
        r5 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();
        goto label2;

     label1:
        $r15 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();
        r6 = (java.util.Map$Entry) $r15;
        $r16 = <java.lang.System: java.io.PrintStream out>;
        $r17 = new java.lang.StringBuilder;
        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("        \"");
        $r18 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r19 = (java.lang.String) $r18;
        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", // ");
        $r22 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();
        $r23 = (java.lang.String) $r22;
        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r25);

     label2:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();
        if $z0 != 0 goto label1;

        $r26 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.String)>("\nDone");
        return;
    }

    private static java.util.Map getHtmlInfo(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        java.util.HashMap $r1, r2;
        java.util.regex.Pattern r3, r4, r5;
        java.io.FileReader $r6;
        java.io.BufferedReader r7, $r15;
        java.lang.String r8, r10, r11, r12, r16, r17, $r19, $r21, $r24, $r30, $r31, r32;
        java.util.regex.Matcher r9, r13, r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.StringBuilder $r18, $r20, $r22, $r28, $r29;
        java.util.Locale $r23;
        java.lang.String[] $r25;
        java.io.PrintStream $r27;

        r0 := @parameter0: java.io.File;
        $r1 = new java.util.HashMap;
        specialinvoke $r1.<java.util.HashMap: void <init>()>();
        r2 = $r1;
        r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(".*<a href=\"/domains/root/db/([^.]+)\\.html");
        r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\s+<td>([^<]+)</td>");
        r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\s+<td>([^<]+)</td>");
        $r15 = new java.io.BufferedReader;
        $r6 = new java.io.FileReader;
        specialinvoke $r6.<java.io.FileReader: void <init>(java.io.File)>(r0);
        specialinvoke $r15.<java.io.BufferedReader: void <init>(java.io.Reader)>($r6);
        r7 = $r15;
        goto label9;

     label0:
        r9 = virtualinvoke r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r32);
        $z0 = virtualinvoke r9.<java.util.regex.Matcher: boolean lookingAt()>();
        if $z0 == 0 goto label9;

        r10 = virtualinvoke r9.<java.util.regex.Matcher: java.lang.String group(int)>(1);
        r11 = "??";
        r12 = "??";
        r8 = virtualinvoke r7.<java.io.BufferedReader: java.lang.String readLine()>();
        goto label2;

     label1:
        r8 = virtualinvoke r7.<java.io.BufferedReader: java.lang.String readLine()>();

     label2:
        $z1 = virtualinvoke r8.<java.lang.String: boolean matches(java.lang.String)>("^\\s*$");
        if $z1 != 0 goto label1;

        r13 = virtualinvoke r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r8);
        $z2 = virtualinvoke r13.<java.util.regex.Matcher: boolean lookingAt()>();
        if $z2 == 0 goto label8;

        r16 = virtualinvoke r13.<java.util.regex.Matcher: java.lang.String group(int)>(1);
        r17 = virtualinvoke r7.<java.io.BufferedReader: java.lang.String readLine()>();
        $z3 = virtualinvoke r17.<java.lang.String: boolean matches(java.lang.String)>("\\s+<!--.*");
        if $z3 == 0 goto label6;

        goto label4;

     label3:
        r17 = virtualinvoke r7.<java.io.BufferedReader: java.lang.String readLine()>();

     label4:
        $z4 = virtualinvoke r17.<java.lang.String: boolean matches(java.lang.String)>(".*-->.*");
        if $z4 == 0 goto label3;

        r17 = virtualinvoke r7.<java.io.BufferedReader: java.lang.String readLine()>();
        goto label6;

     label5:
        $r18 = new java.lang.StringBuilder;
        $r19 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r17);
        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>($r19);
        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
        $r21 = virtualinvoke r7.<java.io.BufferedReader: java.lang.String readLine()>();
        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);
        r17 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        $z5 = virtualinvoke r17.<java.lang.String: boolean matches(java.lang.String)>(".*</td>.*");
        if $z5 == 0 goto label5;

        r14 = virtualinvoke r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r17);
        $z6 = virtualinvoke r14.<java.util.regex.Matcher: boolean lookingAt()>();
        if $z6 == 0 goto label7;

        r12 = virtualinvoke r14.<java.util.regex.Matcher: java.lang.String group(int)>(1);

     label7:
        $z7 = virtualinvoke r12.<java.lang.String: boolean contains(java.lang.CharSequence)>("Not assigned");
        if $z7 != 0 goto label9;

        $z8 = virtualinvoke r12.<java.lang.String: boolean contains(java.lang.CharSequence)>("Retired");
        if $z8 != 0 goto label9;

        $z9 = virtualinvoke r16.<java.lang.String: boolean equals(java.lang.Object)>("test");
        if $z9 != 0 goto label9;

        $r23 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r24 = virtualinvoke r10.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r23);
        $r25 = newarray (java.lang.String)[2];
        $r25[0] = r16;
        $r25[1] = r12;
        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, $r25);
        goto label9;

     label8:
        $r27 = <java.lang.System: java.io.PrintStream err>;
        $r28 = new java.lang.StringBuilder;
        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unexpected type: ");
        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);
        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r27.<java.io.PrintStream: void println(java.lang.String)>($r30);

     label9:
        $r31 = virtualinvoke r7.<java.io.BufferedReader: java.lang.String readLine()>();
        r32 = $r31;
        if $r31 != null goto label0;

        virtualinvoke r7.<java.io.BufferedReader: void close()>();
        return r2;
    }

    private static long download(java.io.File, java.lang.String, long) throws java.io.IOException
    {
        java.io.File r0;
        java.lang.String r1, r5, $r9, $r19, $r23, $r27;
        long l0, l2, $l3, $l5, $l10;
        int i1, i4, $i8, $i9;
        java.lang.StringBuilder $r2, $r8, $r15, $r16, $r17, $r18, $r21, $r22, $r25, $r26;
        java.net.HttpURLConnection r3;
        java.text.SimpleDateFormat r4, $r12;
        java.io.FileOutputStream r6, $r30;
        boolean $z0;
        byte $b6, $b7;
        java.io.PrintStream $r7, $r14, $r20, $r24, $r31;
        java.net.URL $r10;
        java.net.URLConnection $r11;
        java.util.Date $r13;
        byte[] r28;
        java.io.InputStream r29;

        r0 := @parameter0: java.io.File;
        r1 := @parameter1: java.lang.String;
        l0 := @parameter2: long;
        i1 = 3600000;
        $z0 = virtualinvoke r0.<java.io.File: boolean canRead()>();
        if $z0 == 0 goto label0;

        l2 = virtualinvoke r0.<java.io.File: long lastModified()>();
        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();
        $l5 = $l3 - 3600000L;
        $b6 = l2 cmp $l5;
        if $b6 <= 0 goto label1;

        $r7 = <java.lang.System: java.io.PrintStream out>;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Skipping download - found recent ");
        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r9);
        return l2;

     label0:
        l2 = 0L;

     label1:
        $r10 = new java.net.URL;
        specialinvoke $r10.<java.net.URL: void <init>(java.lang.String)>(r1);
        $r11 = virtualinvoke $r10.<java.net.URL: java.net.URLConnection openConnection()>();
        r3 = (java.net.HttpURLConnection) $r11;
        $b7 = l2 cmp 0L;
        if $b7 <= 0 goto label2;

        $r12 = new java.text.SimpleDateFormat;
        specialinvoke $r12.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("EEE, dd MMM yyyy HH:mm:ss z");
        r4 = $r12;
        $r13 = new java.util.Date;
        specialinvoke $r13.<java.util.Date: void <init>(long)>(l2);
        r5 = virtualinvoke r4.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r13);
        virtualinvoke r3.<java.net.HttpURLConnection: void addRequestProperty(java.lang.String,java.lang.String)>("If-Modified-Since", r5);
        $r14 = <java.lang.System: java.io.PrintStream out>;
        $r15 = new java.lang.StringBuilder;
        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("Found ");
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with date ");
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r19);

     label2:
        $i8 = virtualinvoke r3.<java.net.HttpURLConnection: int getResponseCode()>();
        if $i8 != 304 goto label3;

        $r20 = <java.lang.System: java.io.PrintStream out>;
        $r21 = new java.lang.StringBuilder;
        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Already have most recent ");
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r23);
        goto label6;

     label3:
        $r24 = <java.lang.System: java.io.PrintStream out>;
        $r25 = new java.lang.StringBuilder;
        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("Downloading ");
        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>($r27);
        r28 = newarray (byte)[1024];
        r29 = virtualinvoke r3.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>();
        $r30 = new java.io.FileOutputStream;
        specialinvoke $r30.<java.io.FileOutputStream: void <init>(java.io.File)>(r0);
        r6 = $r30;
        goto label5;

     label4:
        virtualinvoke r6.<java.io.FileOutputStream: void write(byte[],int,int)>(r28, 0, i4);

     label5:
        $i9 = virtualinvoke r29.<java.io.InputStream: int read(byte[])>(r28);
        i4 = $i9;
        if $i9 != -1 goto label4;

        virtualinvoke r6.<java.io.FileOutputStream: void close()>();
        virtualinvoke r29.<java.io.InputStream: void close()>();
        $r31 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r31.<java.io.PrintStream: void println(java.lang.String)>("Done");

     label6:
        $l10 = virtualinvoke r0.<java.io.File: long lastModified()>();
        return $l10;
    }

    private static boolean isNotInRootZone(java.lang.String)
    {
        java.lang.String r0, r2, r5, $r14;
        java.lang.StringBuilder $r1, $r7, $r8;
        java.net.HttpURLConnection r3;
        java.io.BufferedReader r4, $r11;
        java.lang.Throwable r6, $r19;
        java.net.URL $r9;
        java.net.URLConnection $r10;
        java.io.InputStreamReader $r12;
        java.io.InputStream $r13;
        boolean $z0;
        java.net.MalformedURLException $r15, r16;
        java.io.IOException $r17, r18;

        r0 := @parameter0: java.lang.String;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("http://www.iana.org/domains/root/db/");
        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".html");
        r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        r3 = null;
        r4 = null;

     label0:
        $r9 = new java.net.URL;
        specialinvoke $r9.<java.net.URL: void <init>(java.lang.String)>(r2);
        $r10 = virtualinvoke $r9.<java.net.URL: java.net.URLConnection openConnection()>();
        r3 = (java.net.HttpURLConnection) $r10;
        $r11 = new java.io.BufferedReader;
        $r12 = new java.io.InputStreamReader;
        $r13 = virtualinvoke r3.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>();
        specialinvoke $r12.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r13);
        specialinvoke $r11.<java.io.BufferedReader: void <init>(java.io.Reader)>($r12);
        r4 = $r11;
        goto label4;

     label1:
        $z0 = virtualinvoke r5.<java.lang.String: boolean contains(java.lang.CharSequence)>("This domain is not present in the root zone at this time.");
        if $z0 == 0 goto label4;

     label2:
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void closeQuietly(java.io.Closeable)>(r4);
        if r3 == null goto label3;

        virtualinvoke r3.<java.net.HttpURLConnection: void disconnect()>();

     label3:
        return 1;

     label4:
        $r14 = virtualinvoke r4.<java.io.BufferedReader: java.lang.String readLine()>();
        r5 = $r14;
        if $r14 != null goto label1;

        virtualinvoke r4.<java.io.BufferedReader: void close()>();

     label5:
        goto label13;

     label6:
        $r15 := @caughtexception;
        r16 = $r15;

     label7:
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void closeQuietly(java.io.Closeable)>(r4);
        if r3 == null goto label14;

        virtualinvoke r3.<java.net.HttpURLConnection: void disconnect()>();
        goto label14;

     label8:
        $r17 := @caughtexception;

     label9:
        r18 = $r17;

     label10:
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void closeQuietly(java.io.Closeable)>(r4);
        if r3 == null goto label14;

        virtualinvoke r3.<java.net.HttpURLConnection: void disconnect()>();
        goto label14;

     label11:
        $r19 := @caughtexception;
        r6 = $r19;
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void closeQuietly(java.io.Closeable)>(r4);
        if r3 == null goto label12;

        virtualinvoke r3.<java.net.HttpURLConnection: void disconnect()>();

     label12:
        throw r6;

     label13:
        staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: void closeQuietly(java.io.Closeable)>(r4);
        if r3 == null goto label14;

        virtualinvoke r3.<java.net.HttpURLConnection: void disconnect()>();

     label14:
        return 0;

        catch java.net.MalformedURLException from label0 to label2 with label6;
        catch java.net.MalformedURLException from label4 to label5 with label6;
        catch java.io.IOException from label0 to label2 with label8;
        catch java.io.IOException from label4 to label5 with label8;
        catch java.lang.Throwable from label0 to label2 with label11;
        catch java.lang.Throwable from label4 to label7 with label11;
        catch java.lang.Throwable from label9 to label10 with label11;
    }

    private static void closeQuietly(java.io.Closeable)
    {
        java.io.Closeable r0;
        java.io.IOException r1, $r2;

        r0 := @parameter0: java.io.Closeable;
        if r0 == null goto label3;

     label0:
        interfaceinvoke r0.<java.io.Closeable: void close()>();

     label1:
        goto label3;

     label2:
        $r2 := @caughtexception;
        r1 = $r2;

     label3:
        return;

        catch java.io.IOException from label0 to label1 with label2;
    }

    private static boolean isInIanaList(java.lang.String, java.util.Set) throws java.lang.Exception
    {
        java.lang.String r0;
        java.util.Set r1;
        java.lang.Class $r2;
        java.lang.reflect.Field r3;
        boolean z0, z1;
        java.lang.String[] r4;
        java.lang.Throwable r5, $r7;
        int $i0;
        java.lang.Object $r6;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.util.Set;
        $r2 = class "org/apache/commons/validator/routines/DomainValidator";
        r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r0);
        $i0 = virtualinvoke r3.<java.lang.reflect.Field: int getModifiers()>();
        z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>($i0);
        if z0 == 0 goto label0;

        virtualinvoke r3.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label0:
        $r6 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);
        r4 = (java.lang.String[]) $r6;

     label1:
        z1 = staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: boolean isInIanaList(java.lang.String,java.lang.String[],java.util.Set)>(r0, r4, r1);

     label2:
        if z0 == 0 goto label3;

        virtualinvoke r3.<java.lang.reflect.Field: void setAccessible(boolean)>(0);

     label3:
        return z1;

     label4:
        $r7 := @caughtexception;
        r5 = $r7;
        if z0 == 0 goto label5;

        virtualinvoke r3.<java.lang.reflect.Field: void setAccessible(boolean)>(0);

     label5:
        throw r5;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    private static boolean isInIanaList(java.lang.String, java.lang.String[], java.util.Set)
    {
        java.lang.String r0, $r3, $r6, $r8, $r10;
        java.lang.String[] r1;
        java.util.Set r2;
        int i0, $i1;
        boolean $z0;
        java.io.PrintStream $r4;
        java.lang.StringBuilder $r5, $r7, $r9;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String[];
        r2 := @parameter2: java.util.Set;
        i0 = 0;
        goto label2;

     label0:
        $r3 = r1[i0];
        $z0 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);
        if $z0 != 0 goto label1;

        $r4 = <java.lang.System: java.io.PrintStream out>;
        $r5 = new java.lang.StringBuilder;
        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);
        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);
        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" contains unexpected value: ");
        $r8 = r1[i0];
        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r10);

     label1:
        i0 = i0 + 1;

     label2:
        $i1 = lengthof r1;
        if i0 < $i1 goto label0;

        return 1;
    }

    private static boolean isSortedLowerCase(java.lang.String) throws java.lang.Exception
    {
        java.lang.String r0;
        java.lang.Class $r1;
        java.lang.reflect.Field r2;
        boolean z0, z1;
        java.lang.String[] r3;
        java.lang.Throwable r4, $r6;
        int $i0;
        java.lang.Object $r5;

        r0 := @parameter0: java.lang.String;
        $r1 = class "org/apache/commons/validator/routines/DomainValidator";
        r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r0);
        $i0 = virtualinvoke r2.<java.lang.reflect.Field: int getModifiers()>();
        z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>($i0);
        if z0 == 0 goto label0;

        virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label0:
        $r5 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);
        r3 = (java.lang.String[]) $r5;

     label1:
        z1 = staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: boolean isSortedLowerCase(java.lang.String,java.lang.String[])>(r0, r3);

     label2:
        if z0 == 0 goto label3;

        virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(0);

     label3:
        return z1;

     label4:
        $r6 := @caughtexception;
        r4 = $r6;
        if z0 == 0 goto label5;

        virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(0);

     label5:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    private static boolean isLowerCase(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.util.Locale $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;
        $r1 = <java.util.Locale: java.util.Locale ENGLISH>;
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r1);
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);
        return $z0;
    }

    private static boolean isSortedLowerCase(java.lang.String, java.lang.String[])
    {
        java.lang.String r0, r2, r3, $r4, $r12, $r18, $r24;
        java.lang.String[] r1;
        boolean z0, z1, z2, $z3;
        int i0, i1, i2, $i3, $i4, $i5;
        java.io.PrintStream $r5, $r13, $r19;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r14, $r15, $r16, $r17, $r20, $r21, $r22, $r23;

        r0 := @parameter0: java.lang.String;
        r1 := @parameter1: java.lang.String[];
        z0 = 1;
        z1 = 1;
        i0 = lengthof r1;
        $i3 = i0 - 1;
        $r4 = r1[$i3];
        z2 = staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: boolean isLowerCase(java.lang.String)>($r4);
        i1 = 0;
        goto label4;

     label0:
        r2 = r1[i1];
        $i4 = i1 + 1;
        r3 = r1[$i4];
        i2 = virtualinvoke r2.<java.lang.String: int compareTo(java.lang.String)>(r3);
        if i2 <= 0 goto label1;

        $r5 = <java.lang.System: java.io.PrintStream out>;
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Out of order entry: ");
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);
        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");
        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r12);
        z0 = 0;
        goto label2;

     label1:
        if i2 != 0 goto label2;

        z1 = 0;
        $r13 = <java.lang.System: java.io.PrintStream out>;
        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Duplicated entry: ");
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r18);

     label2:
        $z3 = staticinvoke <org.apache.commons.validator.routines.DomainValidatorTest: boolean isLowerCase(java.lang.String)>(r2);
        if $z3 != 0 goto label3;

        $r19 = <java.lang.System: java.io.PrintStream out>;
        $r20 = new java.lang.StringBuilder;
        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("Non lowerCase entry: ");
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);
        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r24);
        z2 = 0;

     label3:
        i1 = i1 + 1;

     label4:
        $i5 = i0 - 1;
        if i1 < $i5 goto label0;

        if z0 == 0 goto label5;

        if z1 == 0 goto label5;

        if z2 == 0 goto label5;

        return 1;

     label5:
        return 0;
    }
}
