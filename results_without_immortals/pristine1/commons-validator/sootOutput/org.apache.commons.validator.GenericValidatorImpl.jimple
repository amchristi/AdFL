public class org.apache.commons.validator.GenericValidatorImpl extends java.lang.Object
{
    public static final java.lang.String FIELD_TEST_NULL;
    public static final java.lang.String FIELD_TEST_NOTNULL;
    public static final java.lang.String FIELD_TEST_EQUAL;

    public void <init>()
    {
        org.apache.commons.validator.GenericValidatorImpl r0;

        r0 := @this: org.apache.commons.validator.GenericValidatorImpl;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static boolean validateRaiseException(java.lang.Object, org.apache.commons.validator.Field) throws java.lang.Exception
    {
        java.lang.Object r0;
        org.apache.commons.validator.Field r1;
        java.lang.String r2, $r3, $r4, $r6;
        boolean $z0, $z1;
        java.lang.RuntimeException $r5;
        java.lang.Exception $r7;
        org.apache.commons.validator.ValidatorException $r8;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: org.apache.commons.validator.Field;
        $r3 = virtualinvoke r1.<org.apache.commons.validator.Field: java.lang.String getProperty()>();
        r2 = staticinvoke <org.apache.commons.validator.util.ValidatorUtils: java.lang.String getValueAsString(java.lang.Object,java.lang.String)>(r0, $r3);
        $r4 = "RUNTIME";
        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r2);
        if $z0 == 0 goto label0;

        $r5 = new java.lang.RuntimeException;
        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("RUNTIME-EXCEPTION");
        throw $r5;

     label0:
        $r6 = "CHECKED";
        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r2);
        if $z1 == 0 goto label1;

        $r7 = new java.lang.Exception;
        specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>("CHECKED-EXCEPTION");
        throw $r7;

     label1:
        $r8 = new org.apache.commons.validator.ValidatorException;
        specialinvoke $r8.<org.apache.commons.validator.ValidatorException: void <init>(java.lang.String)>("VALIDATOR-EXCEPTION");
        throw $r8;
    }

    public static boolean validateRequired(java.lang.Object, org.apache.commons.validator.Field)
    {
        java.lang.Object r0;
        org.apache.commons.validator.Field r1;
        java.lang.String r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: org.apache.commons.validator.Field;
        $r3 = virtualinvoke r1.<org.apache.commons.validator.Field: java.lang.String getProperty()>();
        r2 = staticinvoke <org.apache.commons.validator.util.ValidatorUtils: java.lang.String getValueAsString(java.lang.Object,java.lang.String)>(r0, $r3);
        $z0 = staticinvoke <org.apache.commons.validator.GenericValidator: boolean isBlankOrNull(java.lang.String)>(r2);
        if $z0 == 0 goto label0;

        $z1 = 0;
        goto label1;

     label0:
        $z1 = 1;

     label1:
        return $z1;
    }

    public static boolean validateByte(java.lang.Object, org.apache.commons.validator.Field)
    {
        java.lang.Object r0;
        org.apache.commons.validator.Field r1;
        java.lang.String r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: org.apache.commons.validator.Field;
        $r3 = virtualinvoke r1.<org.apache.commons.validator.Field: java.lang.String getProperty()>();
        r2 = staticinvoke <org.apache.commons.validator.util.ValidatorUtils: java.lang.String getValueAsString(java.lang.Object,java.lang.String)>(r0, $r3);
        $z0 = staticinvoke <org.apache.commons.validator.GenericValidator: boolean isByte(java.lang.String)>(r2);
        return $z0;
    }

    public static boolean validateShort(java.lang.Object, org.apache.commons.validator.Field)
    {
        java.lang.Object r0;
        org.apache.commons.validator.Field r1;
        java.lang.String r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: org.apache.commons.validator.Field;
        $r3 = virtualinvoke r1.<org.apache.commons.validator.Field: java.lang.String getProperty()>();
        r2 = staticinvoke <org.apache.commons.validator.util.ValidatorUtils: java.lang.String getValueAsString(java.lang.Object,java.lang.String)>(r0, $r3);
        $z0 = staticinvoke <org.apache.commons.validator.GenericValidator: boolean isShort(java.lang.String)>(r2);
        return $z0;
    }

    public static boolean validateInt(java.lang.Object, org.apache.commons.validator.Field)
    {
        java.lang.Object r0;
        org.apache.commons.validator.Field r1;
        java.lang.String r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: org.apache.commons.validator.Field;
        $r3 = virtualinvoke r1.<org.apache.commons.validator.Field: java.lang.String getProperty()>();
        r2 = staticinvoke <org.apache.commons.validator.util.ValidatorUtils: java.lang.String getValueAsString(java.lang.Object,java.lang.String)>(r0, $r3);
        $z0 = staticinvoke <org.apache.commons.validator.GenericValidator: boolean isInt(java.lang.String)>(r2);
        return $z0;
    }

    public static boolean validatePositive(java.lang.Object, org.apache.commons.validator.Field)
    {
        java.lang.Object r0;
        org.apache.commons.validator.Field r1;
        java.lang.String r2, $r3;
        java.lang.Integer $r4;
        int $i0;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: org.apache.commons.validator.Field;
        $r3 = virtualinvoke r1.<org.apache.commons.validator.Field: java.lang.String getProperty()>();
        r2 = staticinvoke <org.apache.commons.validator.util.ValidatorUtils: java.lang.String getValueAsString(java.lang.Object,java.lang.String)>(r0, $r3);
        $r4 = staticinvoke <org.apache.commons.validator.GenericTypeValidator: java.lang.Integer formatInt(java.lang.String)>(r2);
        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();
        if $i0 <= 0 goto label0;

        return 1;

     label0:
        return 0;
    }

    public static boolean validateLong(java.lang.Object, org.apache.commons.validator.Field)
    {
        java.lang.Object r0;
        org.apache.commons.validator.Field r1;
        java.lang.String r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: org.apache.commons.validator.Field;
        $r3 = virtualinvoke r1.<org.apache.commons.validator.Field: java.lang.String getProperty()>();
        r2 = staticinvoke <org.apache.commons.validator.util.ValidatorUtils: java.lang.String getValueAsString(java.lang.Object,java.lang.String)>(r0, $r3);
        $z0 = staticinvoke <org.apache.commons.validator.GenericValidator: boolean isLong(java.lang.String)>(r2);
        return $z0;
    }

    public static boolean validateFloat(java.lang.Object, org.apache.commons.validator.Field)
    {
        java.lang.Object r0;
        org.apache.commons.validator.Field r1;
        java.lang.String r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: org.apache.commons.validator.Field;
        $r3 = virtualinvoke r1.<org.apache.commons.validator.Field: java.lang.String getProperty()>();
        r2 = staticinvoke <org.apache.commons.validator.util.ValidatorUtils: java.lang.String getValueAsString(java.lang.Object,java.lang.String)>(r0, $r3);
        $z0 = staticinvoke <org.apache.commons.validator.GenericValidator: boolean isFloat(java.lang.String)>(r2);
        return $z0;
    }

    public static boolean validateDouble(java.lang.Object, org.apache.commons.validator.Field)
    {
        java.lang.Object r0;
        org.apache.commons.validator.Field r1;
        java.lang.String r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: org.apache.commons.validator.Field;
        $r3 = virtualinvoke r1.<org.apache.commons.validator.Field: java.lang.String getProperty()>();
        r2 = staticinvoke <org.apache.commons.validator.util.ValidatorUtils: java.lang.String getValueAsString(java.lang.Object,java.lang.String)>(r0, $r3);
        $z0 = staticinvoke <org.apache.commons.validator.GenericValidator: boolean isDouble(java.lang.String)>(r2);
        return $z0;
    }

    public static boolean validateEmail(java.lang.Object, org.apache.commons.validator.Field)
    {
        java.lang.Object r0;
        org.apache.commons.validator.Field r1;
        java.lang.String r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: org.apache.commons.validator.Field;
        $r3 = virtualinvoke r1.<org.apache.commons.validator.Field: java.lang.String getProperty()>();
        r2 = staticinvoke <org.apache.commons.validator.util.ValidatorUtils: java.lang.String getValueAsString(java.lang.Object,java.lang.String)>(r0, $r3);
        $z0 = staticinvoke <org.apache.commons.validator.GenericValidator: boolean isEmail(java.lang.String)>(r2);
        return $z0;
    }

    public static boolean validateRequiredIf(java.lang.Object, org.apache.commons.validator.Field, org.apache.commons.validator.Validator)
    {
        java.lang.Object r0, r3;
        org.apache.commons.validator.Field r1;
        org.apache.commons.validator.Validator r2;
        null_type n0, n1;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String r4, r5, r6, r7, r8, r9, r10, r11, $r12, $r13, $r17, $r21, $r25, $r29, $r31, r33, $r37, $r38;
        java.lang.StringBuilder $r14, $r15, $r16, $r18, $r19, $r20, $r22, $r23, $r24, $r26, $r27, $r28, $r30, $r32, $r34, $r35, $r36;

        r0 := @parameter0: java.lang.Object;
        r1 := @parameter1: org.apache.commons.validator.Field;
        r2 := @parameter2: org.apache.commons.validator.Validator;
        r3 = virtualinvoke r2.<org.apache.commons.validator.Validator: java.lang.Object getParameterValue(java.lang.String)>("java.lang.Object");
        n0 = null;
        z0 = 0;
        $z2 = staticinvoke <org.apache.commons.validator.GenericValidatorImpl: boolean isStringOrNull(java.lang.Object)>(r0);
        if $z2 == 0 goto label0;

        r11 = (java.lang.String) r0;
        goto label1;

     label0:
        $r12 = virtualinvoke r1.<org.apache.commons.validator.Field: java.lang.String getProperty()>();
        r11 = staticinvoke <org.apache.commons.validator.util.ValidatorUtils: java.lang.String getValueAsString(java.lang.Object,java.lang.String)>(r0, $r12);

     label1:
        i0 = 0;
        r4 = "AND";
        $r13 = virtualinvoke r1.<org.apache.commons.validator.Field: java.lang.String getVarValue(java.lang.String)>("fieldJoin");
        $z3 = staticinvoke <org.apache.commons.validator.GenericValidator: boolean isBlankOrNull(java.lang.String)>($r13);
        if $z3 != 0 goto label2;

        r4 = virtualinvoke r1.<org.apache.commons.validator.Field: java.lang.String getVarValue(java.lang.String)>("fieldJoin");

     label2:
        $z4 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("AND");
        if $z4 == 0 goto label17;

        z0 = 1;
        goto label17;

     label3:
        $r14 = new java.lang.StringBuilder;
        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("field[");
        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();
        r5 = virtualinvoke r1.<org.apache.commons.validator.Field: java.lang.String getVarValue(java.lang.String)>($r17);
        $r18 = new java.lang.StringBuilder;
        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("fieldTest[");
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();
        r6 = virtualinvoke r1.<org.apache.commons.validator.Field: java.lang.String getVarValue(java.lang.String)>($r21);
        $r22 = new java.lang.StringBuilder;
        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("fieldValue[");
        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();
        r7 = virtualinvoke r1.<org.apache.commons.validator.Field: java.lang.String getVarValue(java.lang.String)>($r25);
        $r26 = new java.lang.StringBuilder;
        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("fieldIndexed[");
        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();
        r8 = virtualinvoke r1.<org.apache.commons.validator.Field: java.lang.String getVarValue(java.lang.String)>($r29);
        if r8 != null goto label4;

        r8 = "false";

     label4:
        n1 = null;
        z1 = 0;
        $z5 = virtualinvoke r1.<org.apache.commons.validator.Field: boolean isIndexed()>();
        if $z5 == 0 goto label5;

        $z6 = virtualinvoke r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");
        if $z6 == 0 goto label5;

        r9 = virtualinvoke r1.<org.apache.commons.validator.Field: java.lang.String getKey()>();
        $z7 = virtualinvoke r9.<java.lang.String: boolean contains(java.lang.CharSequence)>("[");
        if $z7 == 0 goto label5;

        $z8 = virtualinvoke r9.<java.lang.String: boolean contains(java.lang.CharSequence)>("]");
        if $z8 == 0 goto label5;

        $i1 = virtualinvoke r9.<java.lang.String: int indexOf(java.lang.String)>(".");
        $i2 = $i1 + 1;
        r10 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);
        $r30 = new java.lang.StringBuilder;
        $r31 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r10);
        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>($r31);
        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);
        r5 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        r33 = staticinvoke <org.apache.commons.validator.util.ValidatorUtils: java.lang.String getValueAsString(java.lang.Object,java.lang.String)>(r3, r5);
        $z9 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("NULL");
        if $z9 == 0 goto label7;

        if r33 == null goto label6;

        $i3 = virtualinvoke r33.<java.lang.String: int length()>();
        if $i3 <= 0 goto label6;

        z1 = 0;
        goto label7;

     label6:
        z1 = 1;

     label7:
        $z10 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("NOTNULL");
        if $z10 == 0 goto label9;

        if r33 == null goto label8;

        $i4 = virtualinvoke r33.<java.lang.String: int length()>();
        if $i4 <= 0 goto label8;

        z1 = 1;
        goto label9;

     label8:
        z1 = 0;

     label9:
        $z11 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("EQUAL");
        if $z11 == 0 goto label10;

        z1 = virtualinvoke r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r33);

     label10:
        $z12 = virtualinvoke r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("AND");
        if $z12 == 0 goto label13;

        if z0 == 0 goto label11;

        if z1 == 0 goto label11;

        $z13 = 1;
        goto label12;

     label11:
        $z13 = 0;

     label12:
        z0 = $z13;
        goto label16;

     label13:
        if z0 != 0 goto label14;

        if z1 != 0 goto label14;

        $z14 = 0;
        goto label15;

     label14:
        $z14 = 1;

     label15:
        z0 = $z14;

     label16:
        i0 = i0 + 1;

     label17:
        $r34 = new java.lang.StringBuilder;
        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>("field[");
        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();
        $r38 = virtualinvoke r1.<org.apache.commons.validator.Field: java.lang.String getVarValue(java.lang.String)>($r37);
        $z15 = staticinvoke <org.apache.commons.validator.GenericValidator: boolean isBlankOrNull(java.lang.String)>($r38);
        if $z15 == 0 goto label3;

        if z0 == 0 goto label19;

        if r11 == null goto label18;

        $i5 = virtualinvoke r11.<java.lang.String: int length()>();
        if $i5 <= 0 goto label18;

        return 1;

     label18:
        return 0;

     label19:
        return 1;
    }

    private static boolean isStringOrNull(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;
        if r0 != null goto label0;

        return 1;

     label0:
        $z0 = r0 instanceof java.lang.String;
        return $z0;
    }
}
