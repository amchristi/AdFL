public class org.apache.commons.validator.VarTest extends org.apache.commons.validator.AbstractCommonTest
{
    protected static java.lang.String FORM_KEY;
    protected static java.lang.String ACTION;

    static void <clinit>()
    {
        <org.apache.commons.validator.VarTest: java.lang.String FORM_KEY> = "testForm";
        <org.apache.commons.validator.VarTest: java.lang.String ACTION> = "byte";
        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.commons.validator.VarTest r0;
        java.lang.String r1;

        r0 := @this: org.apache.commons.validator.VarTest;
        r1 := @parameter0: java.lang.String;
        specialinvoke r0.<org.apache.commons.validator.AbstractCommonTest: void <init>(java.lang.String)>(r1);
        return;
    }

    protected void setUp() throws java.io.IOException, org.xml.sax.SAXException
    {
        org.apache.commons.validator.VarTest r0;

        r0 := @this: org.apache.commons.validator.VarTest;
        virtualinvoke r0.<org.apache.commons.validator.VarTest: void loadResources(java.lang.String)>("VarTest-config.xml");
        return;
    }

    protected void tearDown()
    {
        org.apache.commons.validator.VarTest r0;

        r0 := @this: org.apache.commons.validator.VarTest;
        return;
    }

    public void testVars()
    {
        org.apache.commons.validator.VarTest r0;
        java.util.Locale $r1;
        java.lang.String $r2, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23;
        org.apache.commons.validator.Form r3;
        org.apache.commons.validator.Field r4, r6;
        org.apache.commons.validator.Var r5, r7, r8;
        org.apache.commons.validator.ValidatorResources $r9;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.validator.VarTest;
        $r9 = r0.<org.apache.commons.validator.VarTest: org.apache.commons.validator.ValidatorResources resources>;
        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();
        $r2 = <org.apache.commons.validator.VarTest: java.lang.String FORM_KEY>;
        r3 = virtualinvoke $r9.<org.apache.commons.validator.ValidatorResources: org.apache.commons.validator.Form getForm(java.util.Locale,java.lang.String)>($r1, $r2);
        r4 = virtualinvoke r3.<org.apache.commons.validator.Form: org.apache.commons.validator.Field getField(java.lang.String)>("field-1");
        staticinvoke <org.apache.commons.validator.VarTest: void assertNotNull(java.lang.String,java.lang.Object)>("field-1 is null.", r4);
        $r10 = virtualinvoke r4.<org.apache.commons.validator.Field: java.lang.String getProperty()>();
        staticinvoke <org.apache.commons.validator.VarTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("field-1 property is wrong", "field-1", $r10);
        r5 = virtualinvoke r4.<org.apache.commons.validator.Field: org.apache.commons.validator.Var getVar(java.lang.String)>("var-1-1");
        staticinvoke <org.apache.commons.validator.VarTest: void assertNotNull(java.lang.String,java.lang.Object)>("var-1-1 is null.", r5);
        $r11 = virtualinvoke r5.<org.apache.commons.validator.Var: java.lang.String getName()>();
        staticinvoke <org.apache.commons.validator.VarTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("var-1-1 name is wrong", "var-1-1", $r11);
        $r12 = virtualinvoke r5.<org.apache.commons.validator.Var: java.lang.String getValue()>();
        staticinvoke <org.apache.commons.validator.VarTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("var-1-1 value is wrong", "value-1-1", $r12);
        $r13 = virtualinvoke r5.<org.apache.commons.validator.Var: java.lang.String getJsType()>();
        staticinvoke <org.apache.commons.validator.VarTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("var-1-1 jstype is wrong", "jstype-1-1", $r13);
        $z0 = virtualinvoke r5.<org.apache.commons.validator.Var: boolean isResource()>();
        staticinvoke <org.apache.commons.validator.VarTest: void assertFalse(java.lang.String,boolean)>("var-1-1 resource is true", $z0);
        $r14 = virtualinvoke r5.<org.apache.commons.validator.Var: java.lang.String getBundle()>();
        staticinvoke <org.apache.commons.validator.VarTest: void assertNull(java.lang.String,java.lang.Object)>("var-1-1 bundle is not null.", $r14);
        r6 = virtualinvoke r3.<org.apache.commons.validator.Form: org.apache.commons.validator.Field getField(java.lang.String)>("field-2");
        staticinvoke <org.apache.commons.validator.VarTest: void assertNotNull(java.lang.String,java.lang.Object)>("field-2 is null.", r6);
        $r15 = virtualinvoke r6.<org.apache.commons.validator.Field: java.lang.String getProperty()>();
        staticinvoke <org.apache.commons.validator.VarTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("field-2 property is wrong", "field-2", $r15);
        r7 = virtualinvoke r6.<org.apache.commons.validator.Field: org.apache.commons.validator.Var getVar(java.lang.String)>("var-2-1");
        staticinvoke <org.apache.commons.validator.VarTest: void assertNotNull(java.lang.String,java.lang.Object)>("var-2-1 is null.", r7);
        $r16 = virtualinvoke r7.<org.apache.commons.validator.Var: java.lang.String getName()>();
        staticinvoke <org.apache.commons.validator.VarTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("var-2-1 name is wrong", "var-2-1", $r16);
        $r17 = virtualinvoke r7.<org.apache.commons.validator.Var: java.lang.String getValue()>();
        staticinvoke <org.apache.commons.validator.VarTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("var-2-1 value is wrong", "value-2-1", $r17);
        $r18 = virtualinvoke r7.<org.apache.commons.validator.Var: java.lang.String getJsType()>();
        staticinvoke <org.apache.commons.validator.VarTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("var-2-1 jstype is wrong", "jstype-2-1", $r18);
        $z1 = virtualinvoke r7.<org.apache.commons.validator.Var: boolean isResource()>();
        staticinvoke <org.apache.commons.validator.VarTest: void assertTrue(java.lang.String,boolean)>("var-2-1 resource is false", $z1);
        $r19 = virtualinvoke r7.<org.apache.commons.validator.Var: java.lang.String getBundle()>();
        staticinvoke <org.apache.commons.validator.VarTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("var-2-1 bundle is wrong", "bundle-2-1", $r19);
        r8 = virtualinvoke r6.<org.apache.commons.validator.Field: org.apache.commons.validator.Var getVar(java.lang.String)>("var-2-2");
        staticinvoke <org.apache.commons.validator.VarTest: void assertNotNull(java.lang.String,java.lang.Object)>("var-2-2 is null.", r8);
        $r20 = virtualinvoke r8.<org.apache.commons.validator.Var: java.lang.String getName()>();
        staticinvoke <org.apache.commons.validator.VarTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("var-2-2 name is wrong", "var-2-2", $r20);
        $r21 = virtualinvoke r8.<org.apache.commons.validator.Var: java.lang.String getValue()>();
        staticinvoke <org.apache.commons.validator.VarTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("var-2-2 value is wrong", "value-2-2", $r21);
        $r22 = virtualinvoke r8.<org.apache.commons.validator.Var: java.lang.String getJsType()>();
        staticinvoke <org.apache.commons.validator.VarTest: void assertNull(java.lang.String,java.lang.Object)>("var-2-2 jstype is not null", $r22);
        $z2 = virtualinvoke r8.<org.apache.commons.validator.Var: boolean isResource()>();
        staticinvoke <org.apache.commons.validator.VarTest: void assertFalse(java.lang.String,boolean)>("var-2-2 resource is true", $z2);
        $r23 = virtualinvoke r8.<org.apache.commons.validator.Var: java.lang.String getBundle()>();
        staticinvoke <org.apache.commons.validator.VarTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("var-2-2 bundle is wrong", "bundle-2-2", $r23);
        return;
    }
}
