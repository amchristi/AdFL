package org.jfree.chart.renderer.category;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.ui.GradientPaintTransformer;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.util.ObjectUtils;
import org.jfree.chart.util.PaintUtils;
import org.jfree.chart.util.PublicCloneable;
import org.jfree.chart.util.SerialUtils;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.statistics.StatisticalCategoryDataset;
import java.io.*;

/**
 * A renderer that handles the drawing a bar plot where
 * each bar has a mean value and a standard deviation line.  The example shown
 * here is generated by the {@code StatisticalBarChartDemo1.java} program
 * included in the JFreeChart Demo Collection:
 * <br><br>
 * <img src="../../../../../images/StatisticalBarRendererSample.png"
 * alt="StatisticalBarRendererSample.png">
 */
public class StatisticalBarRenderer extends BarRenderer implements CategoryItemRenderer, Cloneable, PublicCloneable, Serializable {

    /** For serialization. */
    private static final long serialVersionUID = -4986038395414039117L;

    /** The paint used to show the error indicator. */
    private transient Paint errorIndicatorPaint;

    /**
     * The stroke used to draw the error indicators.
     *
     * @since 1.0.8
     */
    private transient Stroke errorIndicatorStroke;

    /**
     * Default constructor.
     */
    public StatisticalBarRenderer() {
        super();
        this.errorIndicatorPaint = Color.gray;
        this.errorIndicatorStroke = new BasicStroke(1.0f);
    }

    /**
     * Returns the paint used for the error indicators.
     *
     * @return The paint used for the error indicators (possibly
     *         {@code null}).
     *
     * @see #setErrorIndicatorPaint(Paint)
     */
    public Paint getErrorIndicatorPaint() {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "3e6156e1-cd50-438a-b065-3f1ff86563c3");
        return this.errorIndicatorPaint;
    }

    /**
     * Sets the paint used for the error indicators (if {@code null},
     * the item outline paint is used instead) and sends a
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param paint  the paint ({@code null} permitted).
     *
     * @see #getErrorIndicatorPaint()
     */
    public void setErrorIndicatorPaint(Paint paint) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "a06d3a52-d4e0-422e-a505-3ca849a24cf1");
        this.errorIndicatorPaint = paint;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "893f7b47-5b61-433d-8b67-acd56fbe10da");
        fireChangeEvent();
    }

    /**
     * Returns the stroke used to draw the error indicators.  If this is
     * {@code null}, the renderer will use the item outline stroke).
     *
     * @return The stroke (possibly {@code null}).
     *
     * @see #setErrorIndicatorStroke(Stroke)
     *
     * @since 1.0.8
     */
    public Stroke getErrorIndicatorStroke() {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "4bf0cb1d-1952-400f-bf1f-145d0e66dd4e");
        return this.errorIndicatorStroke;
    }

    /**
     * Sets the stroke used to draw the error indicators, and sends a
     * {@link RendererChangeEvent} to all registered listeners.  If you set
     * this to {@code null}, the renderer will use the item outline
     * stroke.
     *
     * @param stroke  the stroke ({@code null} permitted).
     *
     * @see #getErrorIndicatorStroke()
     *
     * @since 1.0.8
     */
    public void setErrorIndicatorStroke(Stroke stroke) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "5fa4dfe3-4588-490f-a290-5e9ee33010dd");
        this.errorIndicatorStroke = stroke;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "0a8df54b-b0c6-4cd3-a83c-aa4dbd71a8a3");
        fireChangeEvent();
    }

    /**
     * Returns the range of values the renderer requires to display all the
     * items from the specified dataset. This takes into account the range
     * between the min/max values, possibly ignoring invisible series.
     *
     * @param dataset  the dataset ({@code null} permitted).
     *
     * @return The range (or {@code null} if the dataset is
     *         {@code null} or empty).
     */
    @Override
    public Range findRangeBounds(CategoryDataset dataset) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "00a7c11d-049c-4e8e-97ac-f602eb546bcc");
        return findRangeBounds(dataset, true);
    }

    /**
     * Draws the bar with its standard deviation line range for a single
     * (series, category) data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param data  the data.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * @param pass  the pass index.
     */
    @Override
    public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset data, int row, int column, int pass) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "375c3a61-b765-4fa9-be2e-7b7083e6eff5");
        int visibleRow = state.getVisibleSeriesIndex(row);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "6c4ba8f3-3d04-481d-9478-693c6d8cd6b1");
        if (visibleRow < 0) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "1289960e-f4e2-4a83-a26c-58f10b542136");
            return;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "f18301cd-70db-4fbe-93c5-6e99cac253d0");
        if (!(data instanceof StatisticalCategoryDataset)) {
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "ebffdd82-801e-4d4c-a509-eba2bc6a80b0");
        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "bf86137e-ccf4-42ba-8bc9-8ac3faefd1e1");
        PlotOrientation orientation = plot.getOrientation();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "714c86f9-1d55-4f67-b94f-6a6a35d362a9");
        if (orientation == PlotOrientation.HORIZONTAL) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "4c61bd3f-147f-4be2-a7ac-fd6217faead5");
            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, visibleRow, row, column);
        } else if (orientation == PlotOrientation.VERTICAL) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "33893a95-a119-48a7-bbbf-a8f07a7486dd");
            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, visibleRow, row, column);
        }
    }

    /**
     * Draws an item for a plot with a horizontal orientation.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the data.
     * @param visibleRow  the visible row index.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     */
    protected void drawHorizontalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int visibleRow, int row, int column) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "1b63bb1d-4368-446b-b988-834a909dbee6");
        double rectY = calculateBarW0(plot, PlotOrientation.HORIZONTAL, dataArea, domainAxis, state, visibleRow, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "e4fe901d-e05a-4714-93d8-08416537a89b");
        Number meanValue = dataset.getMeanValue(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "fcc361cc-3d90-4518-acd1-d729556b03e0");
        if (meanValue == null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "36d977bd-96f2-4dbb-a689-eaf1d9854f15");
            return;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "727d7887-7f5b-4aeb-a9c3-f0ecf6f9cc31");
        double value = meanValue.doubleValue();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "9994100d-8317-4b04-a8b1-1b127779d931");
        double base = 0.0;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "b61bbc28-403a-425b-a6c3-1dda480925c2");
        double lclip = getLowerClip();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "d0d4f13e-997d-43cc-b876-737a98edfc59");
        double uclip = getUpperClip();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "f93f1021-93d8-444b-82cc-be7189ad3308");
        if (uclip <= 0.0) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "31eb1706-c6f4-4cd8-a898-8338bfcc454e");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "ac351dec-870d-4fb2-9365-a2a8d27009e6");
                return;
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "924f613b-8510-4cb2-a01c-a3f9122aaa3b");
            base = uclip;
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "b5626c8b-22ec-47b0-9ba5-ccf6d5bcbcc1");
            if (value <= lclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "60b87a1f-bfa0-4c36-8437-2ae6c6904893");
                value = lclip;
            }
        } else if (lclip <= 0.0) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "b1c16962-19e2-4a0f-9c09-9bfb6a00970c");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "4410669f-0a78-4be8-9fe8-7114d499b3c5");
                value = uclip;
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "f7343dd3-5dff-48e0-a6c1-610c27ef9762");
                if (value <= lclip) {
                    writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "8e305ae2-eb9f-44ba-81a9-04f50a0ca84e");
                    value = lclip;
                }
            }
        } else {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "9cc57036-d759-4a22-8fdd-0fe54dc82937");
            if (value <= lclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "0fa14d0d-b4b4-4e52-b65c-2715d492558f");
                return;
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "a5325a03-963d-4d16-99e7-2c30e48ebb46");
            base = getLowerClip();
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "f0d34dbd-df40-49e9-9931-b222d99efcd9");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "661c251d-da46-4675-9292-c8e4b8153f7d");
                value = uclip;
            }
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "46b1353e-1e74-4811-82b4-71930aedcf66");
        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "27b02a9c-3013-4a73-b348-dafa83ebb8a3");
        double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "ab2a7325-854a-4c82-b5ef-4c25d60f9a4e");
        double transY2 = rangeAxis.valueToJava2D(value, dataArea, yAxisLocation);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "1a9c269b-51ab-4308-bc01-0af4c3a772eb");
        double rectX = Math.min(transY2, transY1);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "ce0ba3c1-76a8-48ba-b849-a0e663711655");
        double rectHeight = state.getBarWidth();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "21a52110-24b0-4aae-8d75-38031a05b17e");
        double rectWidth = Math.abs(transY2 - transY1);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "2fbee459-24e6-42a5-9244-b172b3b62bc6");
        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "bb0f7d2e-d9b2-4def-bded-6310b3cb8d55");
        Paint itemPaint = getItemPaint(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "75885214-2773-418a-ab99-85e3ee617e73");
        GradientPaintTransformer t = getGradientPaintTransformer();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "2788ffff-c9e9-4f56-a8d5-c031d0d7ac4c");
        if (t != null && itemPaint instanceof GradientPaint) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "31add7e9-8608-43f3-8971-c258a28a5eb9");
            itemPaint = t.transform((GradientPaint) itemPaint, bar);
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "efd8c362-a21c-40e4-a60b-05e661426a62");
        g2.setPaint(itemPaint);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "1db49a96-6c87-4e92-8135-ac0e615b1676");
        g2.fill(bar);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "eb50b795-5d80-451d-8453-cf60e561c979");
        if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "ecd3b0d5-0a08-4baa-a6c6-27803e20dc7d");
            Stroke stroke = getItemOutlineStroke(row, column);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "6bb3812c-1809-4502-985b-013f6a74cfbc");
            Paint paint = getItemOutlinePaint(row, column);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "3b278ab5-dcd6-4f7d-9f03-722dcdd45321");
            if (stroke != null && paint != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "81cc39c2-defa-4898-8f4b-478425dd9f39");
                g2.setStroke(stroke);
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "4f0f570c-ebd5-4e24-898b-0f8901c17e9c");
                g2.setPaint(paint);
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "ed0e88e0-55ba-4ba2-ae77-de3915c51fab");
                g2.draw(bar);
            }
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "7b42ddd1-0e47-40a3-8a1c-34a7c18e3022");
        Number n = dataset.getStdDevValue(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "fe93f0aa-c640-4c35-8dfd-8f41b1ebcb7b");
        if (n != null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "05ccfbd2-f180-4a84-82ee-087f49893311");
            double valueDelta = n.doubleValue();
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "f3a74699-e4bc-4a4c-a5e2-633694fe5395");
            double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, yAxisLocation);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "cb192abe-0d6e-46bd-9084-e0cc072a2c17");
            double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, yAxisLocation);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "41bf706a-d92b-4f9d-90f1-52784bb3688a");
            if (this.errorIndicatorPaint != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "b1b1c9b0-4e78-4fd5-9ce9-b0474806e531");
                g2.setPaint(this.errorIndicatorPaint);
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "62ff3857-2c92-486e-b341-c67a49a25b00");
                g2.setPaint(getItemOutlinePaint(row, column));
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "a0f7a177-4a61-4d84-ac36-ce9df2f7c776");
            if (this.errorIndicatorStroke != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "4dfb4c9c-741c-4dfd-9ef7-b4a61dc772a6");
                g2.setStroke(this.errorIndicatorStroke);
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "7d8164ac-30c2-447e-a6ec-f3819093ad2a");
                g2.setStroke(getItemOutlineStroke(row, column));
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "0185a1fb-2d73-4034-b930-69367d290c59");
            Line2D line;
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "3a3928b9-4b39-49a9-abb6-fd7b5e1dbdec");
            line = new Line2D.Double(lowVal, rectY + rectHeight / 2.0d, highVal, rectY + rectHeight / 2.0d);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "cfbccf6c-69a0-489a-94f1-22865003df78");
            g2.draw(line);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "047d36eb-ec07-4410-bb68-f5bc6da7e8c4");
            line = new Line2D.Double(highVal, rectY + rectHeight * 0.25, highVal, rectY + rectHeight * 0.75);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "d8fad3fd-7d08-4805-8e1f-de2be504be3b");
            g2.draw(line);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "9960ed57-d9a6-4cbe-9deb-260ff05072a9");
            line = new Line2D.Double(lowVal, rectY + rectHeight * 0.25, lowVal, rectY + rectHeight * 0.75);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "5079e897-01e3-4d76-90b8-23b6ec7548e3");
            g2.draw(line);
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "5895bd28-c29c-4580-bd6c-e620e5c817dc");
        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "eaf55b90-dde6-414f-ba40-9811eec79c1f");
        if (generator != null && isItemLabelVisible(row, column)) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "a2289eb3-fd93-482e-9e7c-d3680de43fd1");
            drawItemLabel(g2, dataset, row, column, plot, generator, bar, (value < 0.0));
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "3dbd8c67-ebb8-4920-9edc-7f7e6ba78286");
        EntityCollection entities = state.getEntityCollection();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "ebef90be-9cc5-4098-b225-ab4688c9959e");
        if (entities != null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "e8c6d3df-1363-49b4-aa1c-75a9a66c0822");
            addItemEntity(entities, dataset, row, column, bar);
        }
    }

    /**
     * Draws an item for a plot with a vertical orientation.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the data.
     * @param visibleRow  the visible row index.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     */
    protected void drawVerticalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int visibleRow, int row, int column) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "85d43c59-a60f-4ea3-8594-833e12b5f1df");
        double rectX = calculateBarW0(plot, PlotOrientation.VERTICAL, dataArea, domainAxis, state, visibleRow, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "3f9a648c-ad34-48dc-bf62-463e590b33fb");
        Number meanValue = dataset.getMeanValue(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "92a62bed-2422-44a7-bb1b-2ca632940312");
        if (meanValue == null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "45737ac4-d29c-41fb-9833-96221a2b2548");
            return;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "0d7a7df9-3982-4b82-a866-67ac919466b0");
        double value = meanValue.doubleValue();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "95b2d506-f9f4-4652-9686-9ebfc27071b3");
        double base = 0.0;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "4f76d8c6-c884-41d9-859f-7aff6a376a91");
        double lclip = getLowerClip();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "36703dd9-4a6d-4c12-a360-c3984c9c62a1");
        double uclip = getUpperClip();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "d2e49553-13aa-4f13-a5cc-f4b8ad50c4fd");
        if (uclip <= 0.0) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "5e0d17c6-f19b-4c9e-8f19-1226146339c2");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "67c9f914-6983-48c9-b522-9b63fac17343");
                return;
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "994529ab-1b49-4b39-9032-31bf4d90813a");
            base = uclip;
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "66b9c31a-13e4-48b6-95db-1e3a4bbf6679");
            if (value <= lclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "d7c6f763-f064-4b73-8b6c-02069885437c");
                value = lclip;
            }
        } else if (lclip <= 0.0) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "b368804e-a2c5-44e7-8497-ee357f61a6ba");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "713f5183-1b3a-44f0-bf84-784e00d9faa3");
                value = uclip;
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "7cca002f-db52-434a-addb-9ecb7253b0b4");
                if (value <= lclip) {
                    writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "12be5966-05a9-41d4-af0b-a68244d806c7");
                    value = lclip;
                }
            }
        } else {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "864cb364-694b-4b56-bb4a-df059e6a17c0");
            if (value <= lclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "2db7a8ff-f0b3-4ddc-ab71-5ac9369501fb");
                return;
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "c3b389fd-f728-41da-8e9b-76306f2d7d51");
            base = getLowerClip();
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "80552d50-362c-4100-ace0-217d4860e53d");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "54a85b44-7f48-48b1-bd3c-af990ae49075");
                value = uclip;
            }
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "bec55ca7-3ba6-453f-9b6f-3a4958b8fa41");
        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "a4ebb498-ad4e-4fb6-b19b-d2e601db5841");
        double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "c471a59d-d9d4-42ed-85c4-e96b49ac291c");
        double transY2 = rangeAxis.valueToJava2D(value, dataArea, yAxisLocation);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "fe8f1795-3da6-4692-8d1e-c944b2f2d6c3");
        double rectY = Math.min(transY2, transY1);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "c1e3124a-d908-4bc1-a731-ca6260306430");
        double rectWidth = state.getBarWidth();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "ad5bc387-999a-4c66-b760-3e2e6cf64b6c");
        double rectHeight = Math.abs(transY2 - transY1);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "24da9d09-fc22-4a5c-8aed-a34904f28947");
        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "33976694-b776-4338-86bc-d8f9838739ef");
        Paint itemPaint = getItemPaint(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "cd961790-e9cb-416b-9d94-b4940f351cba");
        GradientPaintTransformer t = getGradientPaintTransformer();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "f4abf87c-6179-4f2c-8b03-b713b02cad41");
        if (t != null && itemPaint instanceof GradientPaint) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "e5b735a6-4961-4f7f-82d3-d119b75c9ab4");
            itemPaint = t.transform((GradientPaint) itemPaint, bar);
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "83b8f0aa-0586-44e1-a31b-ee186c518bed");
        g2.setPaint(itemPaint);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "23628604-15eb-4e67-bd08-ea958f15f8af");
        g2.fill(bar);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "960154fc-1660-4fb7-b3ff-41134f909f6a");
        if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "e4aaa20f-4984-4513-9d76-1547edf9c3d6");
            Stroke stroke = getItemOutlineStroke(row, column);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "f5be9585-4347-4d18-bca8-b137ff9d707a");
            Paint paint = getItemOutlinePaint(row, column);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "8674641e-a61f-4c92-af0f-620e72d07da1");
            if (stroke != null && paint != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "8db4d716-7671-488e-ae5e-260123f60c8b");
                g2.setStroke(stroke);
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "ea150696-934e-4af9-aaf5-27c32e52cfbd");
                g2.setPaint(paint);
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "78231ce6-7379-4c69-949c-1a625eeadb4f");
                g2.draw(bar);
            }
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "95eff9c0-2e7f-4c72-a809-376481673517");
        Number n = dataset.getStdDevValue(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "b72e5a25-a3f6-4f6a-9dd1-75f3988a0e32");
        if (n != null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "dc81955c-035b-44ef-8988-4061ee1c725c");
            double valueDelta = n.doubleValue();
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "92053925-7f11-4966-8c86-100fb147a0e5");
            double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, yAxisLocation);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "9e072536-7b2b-4d99-9d1c-04fc3b14fdee");
            double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, yAxisLocation);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "5ba8da88-f8f9-4c96-bf7d-c13f4c73f02c");
            if (this.errorIndicatorPaint != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "04bbf50d-b75c-4302-a7c5-9f90c5f7c555");
                g2.setPaint(this.errorIndicatorPaint);
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "e691ae78-c9cd-484b-b967-e308d51c1b3c");
                g2.setPaint(getItemOutlinePaint(row, column));
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "2b73da50-ce1c-4b19-91f0-82d3d1593595");
            if (this.errorIndicatorStroke != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "2175f4ec-b9ee-4e26-9c96-e00e8021e49a");
                g2.setStroke(this.errorIndicatorStroke);
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "3734a71c-fa5f-45de-882c-dab4ddb1bf02");
                g2.setStroke(getItemOutlineStroke(row, column));
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "471868b1-5fe7-44e2-a01b-0fbab6561f77");
            Line2D line;
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "9b8fae46-5eff-4ef9-b128-3f4070f51684");
            line = new Line2D.Double(rectX + rectWidth / 2.0d, lowVal, rectX + rectWidth / 2.0d, highVal);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "0a545dd0-a505-4c60-934b-952ecf25f765");
            g2.draw(line);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "dfffdc89-1300-47e3-8ac5-1ec9cdb48f4e");
            line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, highVal, rectX + rectWidth / 2.0d + 5.0d, highVal);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "eae3b3b0-1a8b-4299-90dc-2fcc80dd1fad");
            g2.draw(line);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "8f772d7c-005d-4949-8eef-2960e72ab173");
            line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, lowVal, rectX + rectWidth / 2.0d + 5.0d, lowVal);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "2f856091-1de9-42fd-9ae3-8bce61c775d0");
            g2.draw(line);
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "eb7cd8ab-9189-487d-b630-ebd2b68a0280");
        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "7cfe2c2b-cff9-4c91-8ce4-7bfd0b3069af");
        if (generator != null && isItemLabelVisible(row, column)) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "74fc7e65-7ee0-4921-95ee-307b1df8d7ae");
            drawItemLabel(g2, dataset, row, column, plot, generator, bar, (value < 0.0));
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "1485152a-1733-41ca-beca-7642f58e5118");
        EntityCollection entities = state.getEntityCollection();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "9301a8f5-e586-4287-a244-f0447c7c8b31");
        if (entities != null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "7710d27a-1f3e-49ec-b909-9924f9329011");
            addItemEntity(entities, dataset, row, column, bar);
        }
    }

    /**
     * Tests this renderer for equality with an arbitrary object.
     *
     * @param obj  the object ({@code null} permitted).
     *
     * @return A boolean.
     */
    @Override
    public boolean equals(Object obj) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "0caffc38-a54a-4ea5-bcd4-82d03a9ab3a0");
        if (obj == this) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "76fde0b3-e291-4831-95fd-8234384dfc67");
            return true;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "f12d01fa-c94b-468f-9e8c-ae7891f98f1f");
        if (!(obj instanceof StatisticalBarRenderer)) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "a589aacd-672d-4e32-a164-8031c454d9c8");
            return false;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "1f410ca9-c966-417d-b128-53ffa757eb0f");
        StatisticalBarRenderer that = (StatisticalBarRenderer) obj;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "23ed3a96-a743-4c7f-9035-932201f6f70a");
        if (!PaintUtils.equal(this.errorIndicatorPaint, that.errorIndicatorPaint)) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "4ef10329-b0ae-4d08-b4ef-ff550ce645a0");
            return false;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "4da07bed-d5c6-4b22-9594-60670265c2af");
        if (!ObjectUtils.equal(this.errorIndicatorStroke, that.errorIndicatorStroke)) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "a5140507-d45e-49a0-a9ca-4752e8f09e9c");
            return false;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "53b60b1e-a089-475e-8cba-57c9466668c4");
        return super.equals(obj);
    }

    /**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */
    private void writeObject(ObjectOutputStream stream) throws IOException {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "e09f5b63-49a4-4813-9001-a3fb9f765788");
        stream.defaultWriteObject();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "8b7f2b72-10ec-4c8a-81a5-1e6ec6cae04b");
        SerialUtils.writePaint(this.errorIndicatorPaint, stream);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "1ba8ee4d-e918-4ab0-b6f1-9142185216d1");
        SerialUtils.writeStroke(this.errorIndicatorStroke, stream);
    }

    /**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */
    private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "52f7bf7a-f7f6-4a1a-9d99-b047341dc494");
        stream.defaultReadObject();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "6cef9671-d54e-4155-963b-f355fb84072a");
        this.errorIndicatorPaint = SerialUtils.readPaint(stream);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_8_10.coverage", "2369b5f4-a5ae-41ac-8ff3-e2b3317eb797");
        this.errorIndicatorStroke = SerialUtils.readStroke(stream);
    }

    public void writeline(String fullFilePath, String text) {
        try {
            java.io.File file = new File(fullFilePath);
            FileWriter fileWriter = new FileWriter(file, true);
            BufferedWriter output = new BufferedWriter(fileWriter);
            output.append(text);
            output.newLine();
            output.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
