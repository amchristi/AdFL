package org.jfree.chart.renderer.category;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.ui.GradientPaintTransformer;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.util.ObjectUtils;
import org.jfree.chart.util.PaintUtils;
import org.jfree.chart.util.PublicCloneable;
import org.jfree.chart.util.SerialUtils;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.statistics.StatisticalCategoryDataset;
import java.io.*;

/**
 * A renderer that handles the drawing a bar plot where
 * each bar has a mean value and a standard deviation line.  The example shown
 * here is generated by the {@code StatisticalBarChartDemo1.java} program
 * included in the JFreeChart Demo Collection:
 * <br><br>
 * <img src="../../../../../images/StatisticalBarRendererSample.png"
 * alt="StatisticalBarRendererSample.png">
 */
public class StatisticalBarRenderer extends BarRenderer implements CategoryItemRenderer, Cloneable, PublicCloneable, Serializable {

    /** For serialization. */
    private static final long serialVersionUID = -4986038395414039117L;

    /** The paint used to show the error indicator. */
    private transient Paint errorIndicatorPaint;

    /**
     * The stroke used to draw the error indicators.
     *
     * @since 1.0.8
     */
    private transient Stroke errorIndicatorStroke;

    /**
     * Default constructor.
     */
    public StatisticalBarRenderer() {
        super();
        this.errorIndicatorPaint = Color.gray;
        this.errorIndicatorStroke = new BasicStroke(1.0f);
    }

    /**
     * Returns the paint used for the error indicators.
     *
     * @return The paint used for the error indicators (possibly
     *         {@code null}).
     *
     * @see #setErrorIndicatorPaint(Paint)
     */
    public Paint getErrorIndicatorPaint() {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "b603e8d5-031b-4999-97cf-94c85cafd023");
        return this.errorIndicatorPaint;
    }

    /**
     * Sets the paint used for the error indicators (if {@code null},
     * the item outline paint is used instead) and sends a
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param paint  the paint ({@code null} permitted).
     *
     * @see #getErrorIndicatorPaint()
     */
    public void setErrorIndicatorPaint(Paint paint) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "ac0963fe-0563-4a95-9425-008981c78125");
        this.errorIndicatorPaint = paint;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "9edae573-36fe-4f13-a502-013b2ea6ded2");
        fireChangeEvent();
    }

    /**
     * Returns the stroke used to draw the error indicators.  If this is
     * {@code null}, the renderer will use the item outline stroke).
     *
     * @return The stroke (possibly {@code null}).
     *
     * @see #setErrorIndicatorStroke(Stroke)
     *
     * @since 1.0.8
     */
    public Stroke getErrorIndicatorStroke() {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "64d584bc-2750-4acb-8249-0f9edd35dade");
        return this.errorIndicatorStroke;
    }

    /**
     * Sets the stroke used to draw the error indicators, and sends a
     * {@link RendererChangeEvent} to all registered listeners.  If you set
     * this to {@code null}, the renderer will use the item outline
     * stroke.
     *
     * @param stroke  the stroke ({@code null} permitted).
     *
     * @see #getErrorIndicatorStroke()
     *
     * @since 1.0.8
     */
    public void setErrorIndicatorStroke(Stroke stroke) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "eb91bc70-80ea-449b-afa7-89cb7e79aa81");
        this.errorIndicatorStroke = stroke;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "1c684dcb-7dbe-444f-8aa4-600e09ad5341");
        fireChangeEvent();
    }

    /**
     * Returns the range of values the renderer requires to display all the
     * items from the specified dataset. This takes into account the range
     * between the min/max values, possibly ignoring invisible series.
     *
     * @param dataset  the dataset ({@code null} permitted).
     *
     * @return The range (or {@code null} if the dataset is
     *         {@code null} or empty).
     */
    @Override
    public Range findRangeBounds(CategoryDataset dataset) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "25deb865-f8d0-40bc-8cd6-eebe819a4995");
        return findRangeBounds(dataset, true);
    }

    /**
     * Draws the bar with its standard deviation line range for a single
     * (series, category) data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param data  the data.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * @param pass  the pass index.
     */
    @Override
    public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset data, int row, int column, int pass) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "3be660ee-e087-4b06-8bda-4713d89a470e");
        int visibleRow = state.getVisibleSeriesIndex(row);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "f55cd5c1-e137-46c6-9c0f-1368c975305d");
        if (visibleRow < 0) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "4f5d00df-ca31-4676-b658-0fe2849552d3");
            return;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "44c8a231-1632-4244-b5a7-0d751056749f");
        if (!(data instanceof StatisticalCategoryDataset)) {
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "585b96e8-3146-4c8b-a48e-89a01e6472e9");
        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "041d59e7-6018-4b84-b534-46f4976492ff");
        PlotOrientation orientation = plot.getOrientation();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "6d8c7e4e-cba3-488a-a314-e77aebd81bff");
        if (orientation == PlotOrientation.HORIZONTAL) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "53c29370-c72a-48cc-a849-31c71d6936b4");
            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, visibleRow, row, column);
        } else if (orientation == PlotOrientation.VERTICAL) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "c9eeab4d-9c47-47c4-9765-8f92d457df3f");
            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, visibleRow, row, column);
        }
    }

    /**
     * Draws an item for a plot with a horizontal orientation.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the data.
     * @param visibleRow  the visible row index.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     */
    protected void drawHorizontalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int visibleRow, int row, int column) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "af9ed953-390f-4624-b958-04f573c40a03");
        double rectY = calculateBarW0(plot, PlotOrientation.HORIZONTAL, dataArea, domainAxis, state, visibleRow, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "38ac93c5-1021-48b5-b6fd-6607c02ef3d2");
        Number meanValue = dataset.getMeanValue(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "a1a7a313-333c-401a-bfae-48c02239645b");
        if (meanValue == null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "5bfeba23-bb39-4f03-bea4-c53ace07f136");
            return;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "619a380f-d0e6-4288-8f36-915fe0b612ab");
        double value = meanValue.doubleValue();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "f75d7512-4158-41b3-bce1-b3a77c4aa9c4");
        double base = 0.0;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "8897ca61-b9bf-426f-b700-fe7b76200616");
        double lclip = getLowerClip();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "58c7a641-888f-4225-be0c-98e9b21c1c5c");
        double uclip = getUpperClip();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "95bff9f6-178f-4d42-b214-c3ff94e33c14");
        if (uclip <= 0.0) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "82b53e9b-ccd7-45ea-a4ba-9f006a6d0359");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "00da8a25-e71a-48fc-bc7c-b36fb0ba989f");
                return;
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "188bdd49-32b2-454c-8ac4-eea4639774e9");
            base = uclip;
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "de69b478-d5fd-44cb-b6f0-7c34179da97e");
            if (value <= lclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "bdef20c8-7e0f-499c-a1cc-35b9abb614b5");
                value = lclip;
            }
        } else if (lclip <= 0.0) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "bd3a2f6c-d932-4b4b-b86f-599703219678");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "0de5da5a-d8a7-4dd1-8940-b0aa130cc87d");
                value = uclip;
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "9a58410c-1bfd-43a9-ad9d-319af76606ac");
                if (value <= lclip) {
                    writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "179640de-58bf-433e-a7ad-fe1f298093b5");
                    value = lclip;
                }
            }
        } else {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "ca63b207-05b9-4112-89c5-97cc06e4d456");
            if (value <= lclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "357f6f12-2806-49ab-9537-c5a360fe54f4");
                return;
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "72ac332a-0fa1-4fb1-87f2-84112ce4cad3");
            base = getLowerClip();
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "5dab892f-2536-452b-980e-78be94967cbe");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "52e1762b-438c-44e5-a080-47fd3fab73ad");
                value = uclip;
            }
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "214ed6d2-6a8c-4894-aeef-e73e75876541");
        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "a3579481-0221-4b10-9ae6-651f7db2e0bc");
        double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "52b8e207-bd11-4dc0-b724-faac5a695aed");
        double transY2 = rangeAxis.valueToJava2D(value, dataArea, yAxisLocation);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "dc2594d8-3c69-4434-9832-fc2fe069c5c5");
        double rectX = Math.min(transY2, transY1);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "1b84fece-186c-41a3-8777-7db7949bc58a");
        double rectHeight = state.getBarWidth();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "f29e76ee-a27e-479b-a8a4-c04d9ab2c282");
        double rectWidth = Math.abs(transY2 - transY1);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "d1433f68-3c8e-4ca0-9ea5-3c7635594edc");
        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "f5e50ecb-2867-4857-9921-7a46357cc413");
        Paint itemPaint = getItemPaint(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "4706a8ca-1f5c-4aa6-b1de-5f2e08ea5b83");
        GradientPaintTransformer t = getGradientPaintTransformer();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "37251aef-f438-464a-8f48-edd983c27c91");
        if (t != null && itemPaint instanceof GradientPaint) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "6adcba97-16c4-4c79-8c10-c17778205ea7");
            itemPaint = t.transform((GradientPaint) itemPaint, bar);
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "9646fb86-4ef6-4390-a499-32232b4f2f9a");
        g2.setPaint(itemPaint);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "3eb80bd6-909a-4136-8206-73cfbd421194");
        g2.fill(bar);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "c0dcec61-7e17-4332-83ef-f09072f65621");
        if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "ffe492a7-0d15-4e4f-88da-25425b8025a8");
            Stroke stroke = getItemOutlineStroke(row, column);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "f8c1da5a-75a1-490a-b02c-8805d65823f6");
            Paint paint = getItemOutlinePaint(row, column);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "a96a9b9a-4d25-447c-90a4-5837698579da");
            if (stroke != null && paint != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "7e81f807-9a00-4ed2-bb90-0dc1edec8c76");
                g2.setStroke(stroke);
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "7817e841-c4f1-4322-90bc-6905bd6b603b");
                g2.setPaint(paint);
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "c648ae14-816a-4a41-bc30-98a5c47e3892");
                g2.draw(bar);
            }
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "8fbdbe9d-d6da-4039-9d9c-41d5d9ec4060");
        Number n = dataset.getStdDevValue(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "88e919ad-3557-4459-a53c-99ad72028709");
        if (n != null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "5f2186e3-b209-4f24-932a-ab1b7e8405fe");
            double valueDelta = n.doubleValue();
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "97c36a0a-a49f-46ef-907f-aea3208b4dbb");
            double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, yAxisLocation);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "eb2a17d8-e8ba-4c57-ad7e-c202333bf61e");
            double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, yAxisLocation);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "c66b7e93-211f-4b00-abed-560c4bb04911");
            if (this.errorIndicatorPaint != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "a6b2bc46-1c8a-4e55-8ea8-b1004e071c3d");
                g2.setPaint(this.errorIndicatorPaint);
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "acd60774-3abd-43bc-b080-a50691cd3bf6");
                g2.setPaint(getItemOutlinePaint(row, column));
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "1a20254b-1231-4c82-8b13-5a6123540a69");
            if (this.errorIndicatorStroke != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "867c6cd2-e2c5-4af8-86fc-57892c50e548");
                g2.setStroke(this.errorIndicatorStroke);
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "5c1cbd01-140b-49db-876f-a3d105e3c3f0");
                g2.setStroke(getItemOutlineStroke(row, column));
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "2835b449-5ad4-4a48-be06-595e3e33f4f6");
            Line2D line;
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "86b951f5-5835-4e4f-a699-0e51d9299803");
            line = new Line2D.Double(lowVal, rectY + rectHeight / 2.0d, highVal, rectY + rectHeight / 2.0d);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "b8e83afc-ffd9-4e8e-b24b-d759ea468b32");
            g2.draw(line);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "79b5abfe-be14-4a50-91e3-f8286a24c9a9");
            line = new Line2D.Double(highVal, rectY + rectHeight * 0.25, highVal, rectY + rectHeight * 0.75);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "e4a53ab7-c66c-488c-9092-6572f0faa432");
            g2.draw(line);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "4b8c93be-0dbd-468e-ba50-c265f598e2e2");
            line = new Line2D.Double(lowVal, rectY + rectHeight * 0.25, lowVal, rectY + rectHeight * 0.75);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "9a61648d-c13d-48f0-8220-1962ac6b47eb");
            g2.draw(line);
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "e4bd43ec-0236-4734-a897-05fb3ccd04d6");
        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "d82d91ce-e72e-468e-b843-fb078de21acb");
        if (generator != null && isItemLabelVisible(row, column)) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "477e0b06-8d05-4d80-9407-9a6dd73464c5");
            drawItemLabel(g2, dataset, row, column, plot, generator, bar, (value < 0.0));
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "0e3edb1f-fe28-47ee-be7b-f6d10e8aefe8");
        EntityCollection entities = state.getEntityCollection();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "1d486368-6a96-4072-9c23-7b86ea5d58b0");
        if (entities != null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "f0f431c3-53b8-4efe-ba53-8337681f12fd");
            addItemEntity(entities, dataset, row, column, bar);
        }
    }

    /**
     * Draws an item for a plot with a vertical orientation.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the data.
     * @param visibleRow  the visible row index.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     */
    protected void drawVerticalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int visibleRow, int row, int column) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "23ae2488-2d6e-413c-9f27-5c250ae3340e");
        double rectX = calculateBarW0(plot, PlotOrientation.VERTICAL, dataArea, domainAxis, state, visibleRow, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "9cd86ce5-5de8-4446-bb30-45d1e2062f06");
        Number meanValue = dataset.getMeanValue(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "8fbd61fa-c7e3-4748-88ce-3ea915a31a3f");
        if (meanValue == null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "b9c178a7-e2cd-4a06-9127-1208e5bbaa03");
            return;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "4c494d9e-fe80-4825-ad03-f5cf224cf1d1");
        double value = meanValue.doubleValue();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "73d7c99d-ee2f-469f-8a13-a1b0c8c795ce");
        double base = 0.0;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "520d9f7b-e717-4df2-b2eb-017187b00d76");
        double lclip = getLowerClip();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "8ad11fed-0dc2-401a-84f9-20a133f25a57");
        double uclip = getUpperClip();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "36f538d4-d382-4f6a-8112-40adcff2ddd9");
        if (uclip <= 0.0) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "75b326b8-cb80-46f9-be32-e71b8c72b41a");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "7b1ddc49-815d-4284-858c-97e5e05f3594");
                return;
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "0392ebba-859f-42af-af5c-73ec94baeda2");
            base = uclip;
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "cebc63c7-ae48-4a32-b6bf-3f610d791575");
            if (value <= lclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "0b545072-dba4-4c2d-a673-801b4ba5bc46");
                value = lclip;
            }
        } else if (lclip <= 0.0) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "94627c6a-3e44-4050-9d31-660327846812");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "0c92050f-a509-4daf-a8d4-e771c2dd46ce");
                value = uclip;
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "db77ff35-27e1-4e17-beb6-7608f89af652");
                if (value <= lclip) {
                    writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "fbb24fff-932e-49d2-a3b1-d344f176a75a");
                    value = lclip;
                }
            }
        } else {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "ba16b614-ca02-4e49-b3fc-8a4e4a159b1e");
            if (value <= lclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "a51a8a07-a6e8-4f06-9230-94d74a51efb8");
                return;
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "d304db88-bdef-4177-83fa-764502d069cb");
            base = getLowerClip();
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "b20a5c08-5e68-430a-8ce5-6d7337c7f6ad");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "b511e7e4-d8db-4477-aa84-f57f214f04e4");
                value = uclip;
            }
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "074611bf-ce10-4471-849e-b9665bf011b2");
        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "4feb0fa5-b4a6-416e-86c2-6dd5175e2f2d");
        double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "65d006d3-5760-4c59-be23-890b83a9c1ab");
        double transY2 = rangeAxis.valueToJava2D(value, dataArea, yAxisLocation);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "8317c8ce-2c33-411f-be1b-bb4ec76d969e");
        double rectY = Math.min(transY2, transY1);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "92bd4a2f-0e3b-4131-8886-d6afd03af4a0");
        double rectWidth = state.getBarWidth();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "0fc90d33-5190-4d16-b555-95ae921f07a6");
        double rectHeight = Math.abs(transY2 - transY1);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "5181fd80-4f59-49ff-90d5-a15d14a601f4");
        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "914779ed-841a-4577-bf15-20770515d8d1");
        Paint itemPaint = getItemPaint(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "38f1c35e-3c32-4e7f-80e7-457b6644490e");
        GradientPaintTransformer t = getGradientPaintTransformer();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "73b2e08d-67fb-4107-8fa9-c641685cc7aa");
        if (t != null && itemPaint instanceof GradientPaint) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "b5cae6a0-8beb-40ea-8c63-601b75f5a3c6");
            itemPaint = t.transform((GradientPaint) itemPaint, bar);
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "9b2ac8b5-822d-4bc8-8809-2742faba3a77");
        g2.setPaint(itemPaint);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "1f20f78a-15e8-4290-a08e-207214bf9256");
        g2.fill(bar);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "5933b3b7-5fe9-4e1a-83b2-025f359c85cc");
        if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "6cfe0503-f8bf-4fe8-a82e-adaebd851374");
            Stroke stroke = getItemOutlineStroke(row, column);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "fcd85e9f-3dba-491e-b2dd-c23e1734fdaf");
            Paint paint = getItemOutlinePaint(row, column);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "d4e1664d-25ed-4434-9425-69ac913fdc4e");
            if (stroke != null && paint != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "b9c82d15-34b9-4d2e-a2ee-b39628ac8752");
                g2.setStroke(stroke);
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "c96de0e4-128d-410c-b4a1-3925f59b3ef1");
                g2.setPaint(paint);
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "4d36e538-70ce-4bce-ab29-8c60c0d1f753");
                g2.draw(bar);
            }
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "4386d625-cf4b-4a85-855e-0a664b0b5c70");
        Number n = dataset.getStdDevValue(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "d02808dd-f20e-4dae-9448-4b6074d27d70");
        if (n != null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "3d13f7e7-f1a0-42b5-974a-3e7db0b1f7d2");
            double valueDelta = n.doubleValue();
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "aa44f45d-940e-4be9-bfc7-01aa4f9a1a4a");
            double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, yAxisLocation);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "7e92e3f3-fd21-493c-9b8f-99d4b07e611e");
            double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, yAxisLocation);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "632b93de-1c94-4b4c-abf7-78cdad6de0be");
            if (this.errorIndicatorPaint != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "0ff52768-225f-4f2d-adf0-7b393dc410a7");
                g2.setPaint(this.errorIndicatorPaint);
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "5c8d22fb-2183-42a0-9d26-b38b3a2a276a");
                g2.setPaint(getItemOutlinePaint(row, column));
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "93fdc090-d84d-47b8-af75-638137d6dfdb");
            if (this.errorIndicatorStroke != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "4ddc6d2d-60af-4094-af00-7fbe8d1b268b");
                g2.setStroke(this.errorIndicatorStroke);
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "924c0b43-25b8-4989-850a-870a705175d8");
                g2.setStroke(getItemOutlineStroke(row, column));
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "b893b85e-970e-4abe-9d49-f94711b1c2e7");
            Line2D line;
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "3fe8c0d9-d296-4a71-bf8c-3c0a845fdf30");
            line = new Line2D.Double(rectX + rectWidth / 2.0d, lowVal, rectX + rectWidth / 2.0d, highVal);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "341a853c-c741-41a5-b175-e3c74b382df4");
            g2.draw(line);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "38019dc3-1e0d-47f0-8039-f1a2d5a4125e");
            line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, highVal, rectX + rectWidth / 2.0d + 5.0d, highVal);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "ffd07cec-696f-47b5-b2f3-82e301856a52");
            g2.draw(line);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "b0c2aea0-3f5c-4d29-a610-b982a8384ce5");
            line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, lowVal, rectX + rectWidth / 2.0d + 5.0d, lowVal);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "3003ce08-0995-4b2d-9e70-2d5c2d282719");
            g2.draw(line);
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "97714176-8944-412d-b23b-8be981099844");
        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "7ab66995-0f1f-4dcc-b20e-473b5dd19a57");
        if (generator != null && isItemLabelVisible(row, column)) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "e55705e7-a005-4197-b431-4814b11e73ed");
            drawItemLabel(g2, dataset, row, column, plot, generator, bar, (value < 0.0));
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "4e757df6-833c-48c4-a19b-b5b4cdb9a762");
        EntityCollection entities = state.getEntityCollection();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "fb48193c-d00b-45ba-ba98-2e8b75ba4b9a");
        if (entities != null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "12766b56-9fdd-4ed2-abe4-88e4baa134aa");
            addItemEntity(entities, dataset, row, column, bar);
        }
    }

    /**
     * Tests this renderer for equality with an arbitrary object.
     *
     * @param obj  the object ({@code null} permitted).
     *
     * @return A boolean.
     */
    @Override
    public boolean equals(Object obj) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "835dc566-d29d-41a9-aa21-73bc6c8f7b7c");
        if (obj == this) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "81eab645-9cc0-41fc-a362-99dfeda18160");
            return true;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "af74ab36-ee77-422e-8941-9d7fcb0a36be");
        if (!(obj instanceof StatisticalBarRenderer)) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "44db4048-7c29-448a-b3fb-047c8aa5f99b");
            return false;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "d4aec662-63c5-495b-9e73-fd1992c95d41");
        StatisticalBarRenderer that = (StatisticalBarRenderer) obj;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "963c0947-e39c-4229-9a68-608ef40f9dbb");
        if (!PaintUtils.equal(this.errorIndicatorPaint, that.errorIndicatorPaint)) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "b5a15d4a-8463-44dc-ba90-42255cdd4fe1");
            return false;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "f53f50b2-4a77-4475-aed5-bff68012a56f");
        if (!ObjectUtils.equal(this.errorIndicatorStroke, that.errorIndicatorStroke)) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "998fdd93-9ba8-49b4-b740-59b99c061154");
            return false;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "ff1cf1c0-19fa-4520-846e-d8bad1aae951");
        return super.equals(obj);
    }

    /**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */
    private void writeObject(ObjectOutputStream stream) throws IOException {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "7032aa7d-200f-4667-925f-817fa5c764c3");
        stream.defaultWriteObject();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "69c43b24-adb7-4ce3-b692-8a11a6307dd8");
        SerialUtils.writePaint(this.errorIndicatorPaint, stream);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "b124252c-013c-4566-8b61-aefe5caa1941");
        SerialUtils.writeStroke(this.errorIndicatorStroke, stream);
    }

    /**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */
    private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "eeb6a4be-183e-424d-b31b-1132a5be1d64");
        stream.defaultReadObject();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "94ae6b2b-4e56-4372-8f64-254540879c17");
        this.errorIndicatorPaint = SerialUtils.readPaint(stream);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_4_10.coverage", "b9516a7c-1227-41c1-970b-739fe5bfbcf0");
        this.errorIndicatorStroke = SerialUtils.readStroke(stream);
    }

    public void writeline(String fullFilePath, String text) {
        try {
            java.io.File file = new File(fullFilePath);
            FileWriter fileWriter = new FileWriter(file, true);
            BufferedWriter output = new BufferedWriter(fileWriter);
            output.append(text);
            output.newLine();
            output.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
