package org.jfree.chart.renderer.category;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.ui.GradientPaintTransformer;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.util.ObjectUtils;
import org.jfree.chart.util.PaintUtils;
import org.jfree.chart.util.PublicCloneable;
import org.jfree.chart.util.SerialUtils;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.statistics.StatisticalCategoryDataset;
import java.io.*;

/**
 * A renderer that handles the drawing a bar plot where
 * each bar has a mean value and a standard deviation line.  The example shown
 * here is generated by the {@code StatisticalBarChartDemo1.java} program
 * included in the JFreeChart Demo Collection:
 * <br><br>
 * <img src="../../../../../images/StatisticalBarRendererSample.png"
 * alt="StatisticalBarRendererSample.png">
 */
public class StatisticalBarRenderer extends BarRenderer implements CategoryItemRenderer, Cloneable, PublicCloneable, Serializable {

    /** For serialization. */
    private static final long serialVersionUID = -4986038395414039117L;

    /** The paint used to show the error indicator. */
    private transient Paint errorIndicatorPaint;

    /**
     * The stroke used to draw the error indicators.
     *
     * @since 1.0.8
     */
    private transient Stroke errorIndicatorStroke;

    /**
     * Default constructor.
     */
    public StatisticalBarRenderer() {
        super();
        this.errorIndicatorPaint = Color.gray;
        this.errorIndicatorStroke = new BasicStroke(1.0f);
    }

    /**
     * Returns the paint used for the error indicators.
     *
     * @return The paint used for the error indicators (possibly
     *         {@code null}).
     *
     * @see #setErrorIndicatorPaint(Paint)
     */
    public Paint getErrorIndicatorPaint() {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "1aa15d49-7d92-47c0-b440-c2fe9c0dda66");
        return this.errorIndicatorPaint;
    }

    /**
     * Sets the paint used for the error indicators (if {@code null},
     * the item outline paint is used instead) and sends a
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param paint  the paint ({@code null} permitted).
     *
     * @see #getErrorIndicatorPaint()
     */
    public void setErrorIndicatorPaint(Paint paint) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "02761d58-9ce4-4262-a26b-bfeac91c39df");
        this.errorIndicatorPaint = paint;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "e8157a31-79a8-495f-b8f9-0befa1f00ef0");
        fireChangeEvent();
    }

    /**
     * Returns the stroke used to draw the error indicators.  If this is
     * {@code null}, the renderer will use the item outline stroke).
     *
     * @return The stroke (possibly {@code null}).
     *
     * @see #setErrorIndicatorStroke(Stroke)
     *
     * @since 1.0.8
     */
    public Stroke getErrorIndicatorStroke() {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "c214fff4-cb67-4150-869c-771a19f71a65");
        return this.errorIndicatorStroke;
    }

    /**
     * Sets the stroke used to draw the error indicators, and sends a
     * {@link RendererChangeEvent} to all registered listeners.  If you set
     * this to {@code null}, the renderer will use the item outline
     * stroke.
     *
     * @param stroke  the stroke ({@code null} permitted).
     *
     * @see #getErrorIndicatorStroke()
     *
     * @since 1.0.8
     */
    public void setErrorIndicatorStroke(Stroke stroke) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "ff38ccaa-c781-4080-af27-91a52cf11a51");
        this.errorIndicatorStroke = stroke;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "7f81a3d6-4c89-43f8-a73b-96380c9546f2");
        fireChangeEvent();
    }

    /**
     * Returns the range of values the renderer requires to display all the
     * items from the specified dataset. This takes into account the range
     * between the min/max values, possibly ignoring invisible series.
     *
     * @param dataset  the dataset ({@code null} permitted).
     *
     * @return The range (or {@code null} if the dataset is
     *         {@code null} or empty).
     */
    @Override
    public Range findRangeBounds(CategoryDataset dataset) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "6c5e45fd-b7e9-4c51-8a93-878c6b3d8d0c");
        return findRangeBounds(dataset, true);
    }

    /**
     * Draws the bar with its standard deviation line range for a single
     * (series, category) data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param data  the data.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * @param pass  the pass index.
     */
    @Override
    public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset data, int row, int column, int pass) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "5fe5d5e9-7d53-4063-88eb-566fe0c7a356");
        int visibleRow = state.getVisibleSeriesIndex(row);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "9e7540f4-3229-456f-aa57-b2cb07afce36");
        if (visibleRow < 0) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "b1cffb3f-3881-4a62-bbe1-2ade98ebfdf8");
            return;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "7d08a3ac-b6e7-4c4e-a497-c4eb1b0d8f6b");
        if (!(data instanceof StatisticalCategoryDataset)) {
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "1eb58793-9057-485c-8d60-f89221c6ebcf");
        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "3fc35d0a-3fd6-49c4-9a26-3d4c0f560cf4");
        PlotOrientation orientation = plot.getOrientation();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "e358a701-b4bf-48db-bbc7-f6d2ec19a57b");
        if (orientation == PlotOrientation.HORIZONTAL) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "28b5c4d6-3b1e-44b6-9e04-918da244936d");
            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, visibleRow, row, column);
        } else if (orientation == PlotOrientation.VERTICAL) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "a5fa1e88-d6b5-4e78-a43f-19dfdced6333");
            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, visibleRow, row, column);
        }
    }

    /**
     * Draws an item for a plot with a horizontal orientation.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the data.
     * @param visibleRow  the visible row index.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     */
    protected void drawHorizontalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int visibleRow, int row, int column) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "af857b32-e769-4d2d-9ea9-287fd884b593");
        double rectY = calculateBarW0(plot, PlotOrientation.HORIZONTAL, dataArea, domainAxis, state, visibleRow, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "46da4e7e-79b9-4990-8a56-31cfcb98eb2b");
        Number meanValue = dataset.getMeanValue(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "10bdd2dc-089c-4827-a543-b1ce664a356e");
        if (meanValue == null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "e65e1745-511d-4154-b5d1-991b267309e4");
            return;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "5af24436-a069-4fd1-85cb-8bd3e62e600a");
        double value = meanValue.doubleValue();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "c6e8217d-a9ed-4f87-a42c-73721f9937a3");
        double base = 0.0;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "d6fecfaa-5cf4-476d-915b-1e2072aaa217");
        double lclip = getLowerClip();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "4d058e10-354b-44bb-98b3-f72bf605c3c8");
        double uclip = getUpperClip();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "027a5060-5681-43f7-b837-aade9f307626");
        if (uclip <= 0.0) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "6c87ac2b-dea8-4740-a00b-c43e98f3bdff");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "8731f5ea-cdb1-4ca8-8d16-f9a57bfc762c");
                return;
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "1a001a21-15a1-430d-b145-850d04c403ae");
            base = uclip;
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "48706223-5ed8-4de5-9544-f1e8b6b2e77b");
            if (value <= lclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "6dbfc6a0-b532-4f80-b3b1-a5175c856512");
                value = lclip;
            }
        } else if (lclip <= 0.0) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "cf89825e-920a-4256-8dfc-f334b6c9aac2");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "0dc3968c-7c30-4a56-ade5-422b8e7b39a1");
                value = uclip;
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "3dd38c36-f1f7-4651-aa5c-39e29d27a7f9");
                if (value <= lclip) {
                    writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "d1910c85-c7ce-4a19-ab0b-4e345e226506");
                    value = lclip;
                }
            }
        } else {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "90ef033a-4798-43b6-9c12-e26f6cf99c55");
            if (value <= lclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "d0f1b17a-fe32-4444-a0b7-a5a6e6152e6e");
                return;
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "6f335abe-72e3-4aac-9edf-fa5f8d168621");
            base = getLowerClip();
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "ef8b37ba-6c02-4e13-ab9d-d7da1413892f");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "4d0dfc48-5787-44ab-aa08-2d8d171c242b");
                value = uclip;
            }
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "3340814a-203b-47b1-9421-781196e6fbf9");
        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "ae7acea2-a41d-46fe-b778-49a1c6ce6483");
        double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "10830ba9-0062-471e-a76a-9747b926e3e9");
        double transY2 = rangeAxis.valueToJava2D(value, dataArea, yAxisLocation);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "d12616f4-277f-4963-b14a-24682729a704");
        double rectX = Math.min(transY2, transY1);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "814f0c3d-d69a-42ea-a27a-dfd5cd3c5361");
        double rectHeight = state.getBarWidth();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "eb36f6c1-b81e-4ea6-900c-775d8fed821b");
        double rectWidth = Math.abs(transY2 - transY1);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "0fb2f8e7-4bae-4b2c-8a69-283e3eff4593");
        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "14bfb158-8c0f-45ea-b6b5-847ea0ada624");
        Paint itemPaint = getItemPaint(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "1fe3bab4-a14e-445f-a8cf-36838ace43ed");
        GradientPaintTransformer t = getGradientPaintTransformer();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "f4e77562-9518-42f6-adae-14eecb97f505");
        if (t != null && itemPaint instanceof GradientPaint) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "c3ef2b42-4a0a-4aeb-9fb1-d2a81263eba4");
            itemPaint = t.transform((GradientPaint) itemPaint, bar);
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "f2fd31d4-7779-4cbb-9963-310053187d45");
        g2.setPaint(itemPaint);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "3faed012-d2ec-4c0d-b55f-d9529802cc00");
        g2.fill(bar);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "ba243116-209b-4be0-93fc-5f0514a43f33");
        if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "3654d12a-ecb3-4d97-9f5b-4b85664f9328");
            Stroke stroke = getItemOutlineStroke(row, column);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "0f03e1da-8e38-4295-af48-ce2b999cbeec");
            Paint paint = getItemOutlinePaint(row, column);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "0edcbf9a-d29e-4c37-a35a-979889b3b7df");
            if (stroke != null && paint != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "e1c9ff46-a49b-486f-8c9b-3177e59d55bf");
                g2.setStroke(stroke);
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "962078f1-0a25-459e-9f15-b284c63393f4");
                g2.setPaint(paint);
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "4aade484-2cef-46c1-b045-95f4455d99f4");
                g2.draw(bar);
            }
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "bd8854b0-2791-43d0-a13d-f12e6de3e798");
        Number n = dataset.getStdDevValue(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "01f2d59f-2426-425c-aef1-de8e895512a3");
        if (n != null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "befc39b2-27d9-418a-818d-574a111c7329");
            double valueDelta = n.doubleValue();
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "20a6c034-c274-4d86-b61e-728714717f94");
            double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, yAxisLocation);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "ed0a825a-b491-4162-b059-cc9aa98d6f38");
            double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, yAxisLocation);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "fef28820-2cc8-46e2-ad29-28011631b953");
            if (this.errorIndicatorPaint != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "9fbf5eb4-573b-40b9-be6e-913b0d6b3400");
                g2.setPaint(this.errorIndicatorPaint);
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "e4afbdff-50af-4ee7-a1c6-0d24a89354d5");
                g2.setPaint(getItemOutlinePaint(row, column));
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "74c94115-79c5-47d1-87fc-a2ccdfb3ef83");
            if (this.errorIndicatorStroke != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "f48cb413-f95c-4b03-943e-920ed925a2c8");
                g2.setStroke(this.errorIndicatorStroke);
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "d58fcae8-031b-413c-9e30-d3314a78130b");
                g2.setStroke(getItemOutlineStroke(row, column));
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "4d19514a-c106-4958-b232-a8e44a3b1e7a");
            Line2D line;
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "4a4fa180-8d92-47c0-af45-a64613092395");
            line = new Line2D.Double(lowVal, rectY + rectHeight / 2.0d, highVal, rectY + rectHeight / 2.0d);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "f3a05efe-741e-4e1c-8418-f9e2dabace89");
            g2.draw(line);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "a586c104-2bf3-425b-8828-775d77476a82");
            line = new Line2D.Double(highVal, rectY + rectHeight * 0.25, highVal, rectY + rectHeight * 0.75);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "0098918d-0972-45e6-b2d7-ac4aa4749e13");
            g2.draw(line);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "c5c3545a-5b12-4f3b-939f-9367b2b6be3d");
            line = new Line2D.Double(lowVal, rectY + rectHeight * 0.25, lowVal, rectY + rectHeight * 0.75);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "8094e442-7d65-4b93-a8c1-f13d9ee6c250");
            g2.draw(line);
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "b8cbc6db-6d43-4837-b40c-0ffc6ae1e6a0");
        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "1831caf2-1a97-4945-a407-b0e970919cee");
        if (generator != null && isItemLabelVisible(row, column)) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "f857564e-d442-414a-8243-a2c39911710d");
            drawItemLabel(g2, dataset, row, column, plot, generator, bar, (value < 0.0));
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "b10eb784-477c-4c8a-b871-504f457e41d6");
        EntityCollection entities = state.getEntityCollection();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "cfc0ae98-a38e-43ad-8546-f4c80d86105e");
        if (entities != null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "c78ef18e-2936-4896-854c-0a29d80fba75");
            addItemEntity(entities, dataset, row, column, bar);
        }
    }

    /**
     * Draws an item for a plot with a vertical orientation.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the data.
     * @param visibleRow  the visible row index.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     */
    protected void drawVerticalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int visibleRow, int row, int column) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "b33c701d-7d7c-4c22-b286-a6addd733b4c");
        double rectX = calculateBarW0(plot, PlotOrientation.VERTICAL, dataArea, domainAxis, state, visibleRow, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "fa23bc77-021e-4513-b7cf-8f71be768b85");
        Number meanValue = dataset.getMeanValue(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "33182914-1142-4a04-9c46-6454eb0151cd");
        if (meanValue == null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "7bf0ae12-541d-4815-95cd-59973cf3dcec");
            return;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "7c9365e9-b876-4e6e-8181-e567490ec6d8");
        double value = meanValue.doubleValue();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "630a6257-f310-4de2-931b-7a0c7a2dc4d3");
        double base = 0.0;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "807f99f8-0e8b-456b-982f-d1405c9547a0");
        double lclip = getLowerClip();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "3a6be151-01d8-4a68-bcef-97bcd9746c66");
        double uclip = getUpperClip();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "fa9689cc-43b2-415f-a767-0516105ba9ce");
        if (uclip <= 0.0) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "b5bc048a-071e-4a01-b64a-7c3ce77efaf1");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "71687054-d7b1-4ad9-b281-03ee1d691c91");
                return;
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "ec53cc23-913a-47a1-897f-92f26717f26f");
            base = uclip;
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "ed878d8c-a544-41a0-b47e-6b9f0966e0ed");
            if (value <= lclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "e9bb9031-d761-4f41-8c0b-02042744a9bc");
                value = lclip;
            }
        } else if (lclip <= 0.0) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "40c6d69b-9e61-4d01-9619-cd04cec26907");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "a371de1f-ac12-447b-a665-857931fb815d");
                value = uclip;
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "1676b4b0-f44f-4cf9-81b1-6839a150e97b");
                if (value <= lclip) {
                    writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "372e4245-71de-4247-aa41-0c7aea89bfb0");
                    value = lclip;
                }
            }
        } else {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "7b10e3bf-ae96-442d-98a0-349dc2b38388");
            if (value <= lclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "5416db75-f466-48ba-8d0d-13b61c34de7e");
                return;
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "4df44340-ddd0-4b1a-bf37-d21e17e657bf");
            base = getLowerClip();
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "96c47bf3-4d1e-4815-8cd9-b67d7081d806");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "012d336e-9743-4f5b-9d2c-1f95871fb9ee");
                value = uclip;
            }
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "bf55c6f2-b00d-418e-a4c0-45439d6cf1ec");
        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "96e14e35-3f40-4abe-b103-afd520734f5a");
        double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "48411963-1940-4aba-b997-4a88d29e4db7");
        double transY2 = rangeAxis.valueToJava2D(value, dataArea, yAxisLocation);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "886aeac1-1e33-4538-b879-cea473823ccb");
        double rectY = Math.min(transY2, transY1);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "117d2e9f-cbb8-4d09-9dec-d577b773d2d0");
        double rectWidth = state.getBarWidth();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "a228b28b-0438-4830-8afe-fd96d7c0b46c");
        double rectHeight = Math.abs(transY2 - transY1);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "73f08590-5413-4afc-bdc0-c288353674ac");
        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "01b7451b-5c97-48ff-93bd-fdc22851de41");
        Paint itemPaint = getItemPaint(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "fed8db71-34cc-4b30-9d46-b5495aef45b8");
        GradientPaintTransformer t = getGradientPaintTransformer();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "acacf4b0-f0ad-47f0-8de2-5657a52bad93");
        if (t != null && itemPaint instanceof GradientPaint) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "70632d48-9dc9-4362-b4a1-5b27733d0f79");
            itemPaint = t.transform((GradientPaint) itemPaint, bar);
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "bdc161f6-4a09-4bf8-8d10-e85c1026e281");
        g2.setPaint(itemPaint);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "ed3bab59-5f5c-44ce-9474-503eb1f0655a");
        g2.fill(bar);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "9cfd9ea4-92af-4d90-b794-6c40f00019a5");
        if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "30d60840-3c66-47a7-a4a3-d4e1fd23126e");
            Stroke stroke = getItemOutlineStroke(row, column);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "a502ce1a-3e60-492e-aba6-e3971412fbaf");
            Paint paint = getItemOutlinePaint(row, column);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "29566a92-fe1b-47b0-afa7-f49ae5c68540");
            if (stroke != null && paint != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "4961dd48-e09f-43bd-94b8-ab5844a7440f");
                g2.setStroke(stroke);
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "ab7649a3-eea8-4350-ab3d-b9832b5f5d88");
                g2.setPaint(paint);
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "b503e6e8-61f8-4819-b1a7-d336dd975e97");
                g2.draw(bar);
            }
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "37d82106-7b0d-44f6-bab8-368edce9c716");
        Number n = dataset.getStdDevValue(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "dbd5001b-3c3c-4de7-a20c-8a1372726c9d");
        if (n != null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "22da49a8-d049-4c3f-9c45-8abd97a1c4f8");
            double valueDelta = n.doubleValue();
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "dc9958c3-e048-48bb-af14-3fe26ace80f8");
            double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, yAxisLocation);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "73b2fc07-6b92-452a-bfbf-9b197fecfe05");
            double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, yAxisLocation);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "41a063f2-6940-41f1-8e93-52977f9377be");
            if (this.errorIndicatorPaint != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "c82d955c-af1b-4086-8173-9f572ee0d3ed");
                g2.setPaint(this.errorIndicatorPaint);
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "798e5fd7-bda4-4be5-8c41-736570be0e93");
                g2.setPaint(getItemOutlinePaint(row, column));
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "bbd183f9-e51d-48f9-b58c-75f230f29d7e");
            if (this.errorIndicatorStroke != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "cddf5894-5d04-46f0-b221-66be4e0a6281");
                g2.setStroke(this.errorIndicatorStroke);
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "03e1847b-b5e7-4d82-bf66-64692782873a");
                g2.setStroke(getItemOutlineStroke(row, column));
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "31e026ac-e4ac-4827-b70c-64d199ff3269");
            Line2D line;
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "bcd9a731-0ac6-4a12-89f1-c6c9d687c456");
            line = new Line2D.Double(rectX + rectWidth / 2.0d, lowVal, rectX + rectWidth / 2.0d, highVal);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "726753fe-df03-420c-82c0-62e479c2a824");
            g2.draw(line);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "d893f31c-5bb9-4451-beb4-c10d19f8a504");
            line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, highVal, rectX + rectWidth / 2.0d + 5.0d, highVal);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "b98f77c8-a26c-4a3c-9b98-b2d0b62a9851");
            g2.draw(line);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "97a437f5-05c0-4a72-a9bd-37ed8bb1d500");
            line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, lowVal, rectX + rectWidth / 2.0d + 5.0d, lowVal);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "2e1e9084-47b0-4b29-8e36-437807adc7ac");
            g2.draw(line);
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "af30f9f1-1844-466d-94ea-eb92c9ff641b");
        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "d6151efc-842b-496c-b58e-731791d077f9");
        if (generator != null && isItemLabelVisible(row, column)) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "9eb78130-f0e5-428d-81bf-4f09ffd9d6dc");
            drawItemLabel(g2, dataset, row, column, plot, generator, bar, (value < 0.0));
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "22bf27b1-fa4b-4509-a374-e1f078d60654");
        EntityCollection entities = state.getEntityCollection();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "90f99266-fe25-4f1f-beac-0a1826b03a21");
        if (entities != null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "2e0fdd1d-62d4-4768-9fe2-fc05da05a7d0");
            addItemEntity(entities, dataset, row, column, bar);
        }
    }

    /**
     * Tests this renderer for equality with an arbitrary object.
     *
     * @param obj  the object ({@code null} permitted).
     *
     * @return A boolean.
     */
    @Override
    public boolean equals(Object obj) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "418d3d1d-9358-4bd0-b7c0-e7e40334a091");
        if (obj == this) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "047c3351-05e8-4c87-9ff1-d5fb3f44583c");
            return true;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "a6e2c706-90de-4839-a412-bcc7ce595169");
        if (!(obj instanceof StatisticalBarRenderer)) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "244eb606-14b8-44d7-87b2-ce3b33e995e1");
            return false;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "10699818-2512-4df0-8ff7-fb422833dfcd");
        StatisticalBarRenderer that = (StatisticalBarRenderer) obj;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "626d64a9-065d-417b-a464-a334b6d408ad");
        if (!PaintUtils.equal(this.errorIndicatorPaint, that.errorIndicatorPaint)) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "97c3fb6c-0e66-4db5-8bce-b75a0235b7b8");
            return false;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "d3378a81-f328-479b-a5a8-2af1334cdb68");
        if (!ObjectUtils.equal(this.errorIndicatorStroke, that.errorIndicatorStroke)) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "3217643b-250b-4a9f-8782-7ed377c6d684");
            return false;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "47e741c3-309d-469f-819a-ecbd115c6785");
        return super.equals(obj);
    }

    /**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */
    private void writeObject(ObjectOutputStream stream) throws IOException {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "a2fc6862-e1ff-400b-be70-786ce7b9451b");
        stream.defaultWriteObject();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "dd3d7edf-e314-45ac-844e-88c708ebaaa4");
        SerialUtils.writePaint(this.errorIndicatorPaint, stream);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "b54d0d8e-e50e-42fe-9504-ca95fdcd82f3");
        SerialUtils.writeStroke(this.errorIndicatorStroke, stream);
    }

    /**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */
    private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "82c6c1b8-21cb-4adb-8a57-51d9fca9613f");
        stream.defaultReadObject();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "89ef33ae-7635-4101-8e6c-bb774001e237");
        this.errorIndicatorPaint = SerialUtils.readPaint(stream);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_7_10.coverage", "be2eab83-0d74-4fe8-87e2-014723fe1833");
        this.errorIndicatorStroke = SerialUtils.readStroke(stream);
    }

    public void writeline(String fullFilePath, String text) {
        try {
            java.io.File file = new File(fullFilePath);
            FileWriter fileWriter = new FileWriter(file, true);
            BufferedWriter output = new BufferedWriter(fileWriter);
            output.append(text);
            output.newLine();
            output.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
