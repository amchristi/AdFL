package org.jfree.chart.renderer.category;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.ui.GradientPaintTransformer;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.util.ObjectUtils;
import org.jfree.chart.util.PaintUtils;
import org.jfree.chart.util.PublicCloneable;
import org.jfree.chart.util.SerialUtils;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.statistics.StatisticalCategoryDataset;
import java.io.*;

/**
 * A renderer that handles the drawing a bar plot where
 * each bar has a mean value and a standard deviation line.  The example shown
 * here is generated by the {@code StatisticalBarChartDemo1.java} program
 * included in the JFreeChart Demo Collection:
 * <br><br>
 * <img src="../../../../../images/StatisticalBarRendererSample.png"
 * alt="StatisticalBarRendererSample.png">
 */
public class StatisticalBarRenderer extends BarRenderer implements CategoryItemRenderer, Cloneable, PublicCloneable, Serializable {

    /** For serialization. */
    private static final long serialVersionUID = -4986038395414039117L;

    /** The paint used to show the error indicator. */
    private transient Paint errorIndicatorPaint;

    /**
     * The stroke used to draw the error indicators.
     *
     * @since 1.0.8
     */
    private transient Stroke errorIndicatorStroke;

    /**
     * Default constructor.
     */
    public StatisticalBarRenderer() {
        super();
        this.errorIndicatorPaint = Color.gray;
        this.errorIndicatorStroke = new BasicStroke(1.0f);
    }

    /**
     * Returns the paint used for the error indicators.
     *
     * @return The paint used for the error indicators (possibly
     *         {@code null}).
     *
     * @see #setErrorIndicatorPaint(Paint)
     */
    public Paint getErrorIndicatorPaint() {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "27a59cd3-228b-46db-bed4-ffdc6a69b198");
        return this.errorIndicatorPaint;
    }

    /**
     * Sets the paint used for the error indicators (if {@code null},
     * the item outline paint is used instead) and sends a
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param paint  the paint ({@code null} permitted).
     *
     * @see #getErrorIndicatorPaint()
     */
    public void setErrorIndicatorPaint(Paint paint) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "77dbc7fc-4621-4090-a0c7-b334e30ab8fe");
        this.errorIndicatorPaint = paint;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "5a2afda7-5f61-45c2-ade3-e70a083fa6c2");
        fireChangeEvent();
    }

    /**
     * Returns the stroke used to draw the error indicators.  If this is
     * {@code null}, the renderer will use the item outline stroke).
     *
     * @return The stroke (possibly {@code null}).
     *
     * @see #setErrorIndicatorStroke(Stroke)
     *
     * @since 1.0.8
     */
    public Stroke getErrorIndicatorStroke() {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "2e5ab590-0882-49e9-94f3-8416477ca1ed");
        return this.errorIndicatorStroke;
    }

    /**
     * Sets the stroke used to draw the error indicators, and sends a
     * {@link RendererChangeEvent} to all registered listeners.  If you set
     * this to {@code null}, the renderer will use the item outline
     * stroke.
     *
     * @param stroke  the stroke ({@code null} permitted).
     *
     * @see #getErrorIndicatorStroke()
     *
     * @since 1.0.8
     */
    public void setErrorIndicatorStroke(Stroke stroke) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "b7b59a74-28b3-48a0-a313-4696c7c23c3c");
        this.errorIndicatorStroke = stroke;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "be6b1c8a-b7bd-4b1d-bff6-8689e054bf28");
        fireChangeEvent();
    }

    /**
     * Returns the range of values the renderer requires to display all the
     * items from the specified dataset. This takes into account the range
     * between the min/max values, possibly ignoring invisible series.
     *
     * @param dataset  the dataset ({@code null} permitted).
     *
     * @return The range (or {@code null} if the dataset is
     *         {@code null} or empty).
     */
    @Override
    public Range findRangeBounds(CategoryDataset dataset) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "88d02c12-4b03-4c47-833b-e8a20a3fcf10");
        return findRangeBounds(dataset, true);
    }

    /**
     * Draws the bar with its standard deviation line range for a single
     * (series, category) data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param data  the data.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * @param pass  the pass index.
     */
    @Override
    public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset data, int row, int column, int pass) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "29e2453f-afd5-40d1-96fa-a8ad101cb61d");
        int visibleRow = state.getVisibleSeriesIndex(row);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "94775369-d0db-4b0f-a1cd-77b2c4336501");
        if (visibleRow < 0) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "6a75000c-0593-476b-bf5e-8778f9bccd26");
            return;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "aee645a7-6e5b-4b12-b27c-beb75d053675");
        if (!(data instanceof StatisticalCategoryDataset)) {
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "79bb76fc-4c62-4912-9cd2-36945e2635c8");
        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "c16a19f8-6805-41bf-90d6-4d43b979cdd7");
        PlotOrientation orientation = plot.getOrientation();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "c3446b89-e2b6-46e3-af1a-67e825dbed04");
        if (orientation == PlotOrientation.HORIZONTAL) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "7ff3494b-670d-4a86-97d5-4fbed00f0af2");
            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, visibleRow, row, column);
        } else if (orientation == PlotOrientation.VERTICAL) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "d76f896b-a26b-4336-ab9b-352a36804d01");
            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, visibleRow, row, column);
        }
    }

    /**
     * Draws an item for a plot with a horizontal orientation.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the data.
     * @param visibleRow  the visible row index.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     */
    protected void drawHorizontalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int visibleRow, int row, int column) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "e8fcd9a3-8ecc-436c-815c-bb907278eb61");
        double rectY = calculateBarW0(plot, PlotOrientation.HORIZONTAL, dataArea, domainAxis, state, visibleRow, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "372603c7-65c0-4fa5-b59d-719386fcb5a8");
        Number meanValue = dataset.getMeanValue(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "fdce430a-b664-466e-afff-a897d02a3231");
        if (meanValue == null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "6037aa0e-2fdf-414a-bc86-e4c01ce611b7");
            return;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "15b600a2-a0cc-4e7b-afec-a7ddb7f98436");
        double value = meanValue.doubleValue();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "444beb79-32c5-49a4-82c7-f56a25e1e12d");
        double base = 0.0;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "f31f58bd-4305-47c7-8a99-3a6452b75b2b");
        double lclip = getLowerClip();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "89eca352-a3b7-461e-849e-687a9c60070e");
        double uclip = getUpperClip();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "83b6a3fb-0ffe-4049-883d-937c2cf717e9");
        if (uclip <= 0.0) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "e55f1087-f12c-4f5e-b8a1-e55d02b04928");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "43db47e7-3a84-4a52-af2a-da790372fd77");
                return;
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "45f14afe-f41a-4d33-9ec8-4312b857353c");
            base = uclip;
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "857516f1-84fc-486f-b682-8418f40e78c5");
            if (value <= lclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "eef781fb-9a86-48f1-9eac-dd1c085ccf96");
                value = lclip;
            }
        } else if (lclip <= 0.0) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "4ecf96bf-1d8f-44cf-b5c7-234c58cc6b2d");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "d071f104-044e-487b-b3d6-1caf55bc74c9");
                value = uclip;
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "16d61715-9281-4bd9-8288-b28adeb36aad");
                if (value <= lclip) {
                    writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "54da072b-fbc8-4c33-a6b9-6fc5c1812fe7");
                    value = lclip;
                }
            }
        } else {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "777eee87-2272-4ba0-b092-9c167443861b");
            if (value <= lclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "3db46f94-fa19-40a5-9df9-1dcb85ea9ecf");
                return;
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "9f72bfe5-03b0-41fc-8ab5-dc26cc96bfe6");
            base = getLowerClip();
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "b6e5291a-b0d6-429f-975c-5c9360a40c9b");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "b6459e97-19ee-42fd-b7d4-086b6d7b065a");
                value = uclip;
            }
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "8b5c6ae6-dfe4-4d77-a9c6-5b6f132cc11a");
        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "26cde038-3267-4fab-b65c-0f5525499abe");
        double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "a1c1a309-2c3f-4e84-9c98-3105b338348e");
        double transY2 = rangeAxis.valueToJava2D(value, dataArea, yAxisLocation);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "95319129-9b5e-4094-902c-7809b729ebee");
        double rectX = Math.min(transY2, transY1);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "08d82727-a509-4db9-af09-29728f2aaba1");
        double rectHeight = state.getBarWidth();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "820ab5c5-532a-47de-9c13-cdba7cb83995");
        double rectWidth = Math.abs(transY2 - transY1);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "d7bfa271-6738-4088-91cc-4e84f1e29c5b");
        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "d8ae8ad4-c798-4543-acc1-43c4ff026b59");
        Paint itemPaint = getItemPaint(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "7bab471b-67db-40db-b119-1461227a4cca");
        GradientPaintTransformer t = getGradientPaintTransformer();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "faa154ad-1b05-4ec2-8b17-423cb2e363b3");
        if (t != null && itemPaint instanceof GradientPaint) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "2175289a-b3a7-4b5f-b94a-f45b9b2ab500");
            itemPaint = t.transform((GradientPaint) itemPaint, bar);
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "41735de8-df0e-4d85-9886-46ebc71441da");
        g2.setPaint(itemPaint);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "9bc12daf-2011-487e-9c75-1faefbde9c4f");
        g2.fill(bar);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "0d816184-2b33-4d3e-a996-3b07ec30e001");
        if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "ceefedcb-c342-42df-88fe-d4436bd9febd");
            Stroke stroke = getItemOutlineStroke(row, column);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "ebf9cfa7-b7ea-47d0-9de1-721d995bbc28");
            Paint paint = getItemOutlinePaint(row, column);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "d0fa4bb1-d5f6-4d67-bd27-7807fe615583");
            if (stroke != null && paint != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "a654e229-1d18-4732-ab82-867a7c06432d");
                g2.setStroke(stroke);
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "53479750-78b3-40ff-93ca-95a960354de3");
                g2.setPaint(paint);
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "a9c233df-a157-472e-beae-881875615d63");
                g2.draw(bar);
            }
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "54ee0bad-26cd-4b71-a8fb-e7ee124e30ce");
        Number n = dataset.getStdDevValue(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "ac1305d9-c1ef-47e7-a7e6-4760336611a7");
        if (n != null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "391e6ca6-e363-45ef-9411-daaffcde241e");
            double valueDelta = n.doubleValue();
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "1c90d44d-a826-4b5b-a762-ea0b3f6a9633");
            double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, yAxisLocation);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "da8636f3-fb58-47d9-ae7d-6e44a2068cc1");
            double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, yAxisLocation);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "318ad75e-d830-4e13-9696-de7209dd64f4");
            if (this.errorIndicatorPaint != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "ae14ccc5-8cbc-44d8-aa6e-beabe24448dc");
                g2.setPaint(this.errorIndicatorPaint);
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "c611b34e-d68a-4d89-9fc3-a26ffaa20e3a");
                g2.setPaint(getItemOutlinePaint(row, column));
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "5e4795ed-c24d-4b08-85a4-e77fc594bc73");
            if (this.errorIndicatorStroke != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "8d428ea2-10f9-4655-ab9e-c42349e18d6e");
                g2.setStroke(this.errorIndicatorStroke);
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "8a543ddd-adea-4415-b7a4-bdfff0a44e7e");
                g2.setStroke(getItemOutlineStroke(row, column));
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "7cb2eb76-a1d3-4c46-9c14-68b2b07b89c9");
            Line2D line;
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "0b16eebb-fcfa-44e9-83d6-484d80b4d2f4");
            line = new Line2D.Double(lowVal, rectY + rectHeight / 2.0d, highVal, rectY + rectHeight / 2.0d);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "64017009-5df8-4c10-8e2b-73d16ae82c6b");
            g2.draw(line);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "445ea484-5cbf-4140-9b40-234f741f2386");
            line = new Line2D.Double(highVal, rectY + rectHeight * 0.25, highVal, rectY + rectHeight * 0.75);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "04c19e3b-2839-45de-9b18-530f33c9d10d");
            g2.draw(line);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "581e0990-c5c1-4fa8-b8ff-21f1461237a9");
            line = new Line2D.Double(lowVal, rectY + rectHeight * 0.25, lowVal, rectY + rectHeight * 0.75);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "82ca68af-c36d-4538-adfb-80cd147757b3");
            g2.draw(line);
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "1e93da8a-1750-4278-aeed-2347c9aa415d");
        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "66c457af-b901-4ebb-a37e-2e20bab6410d");
        if (generator != null && isItemLabelVisible(row, column)) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "29b9fbf9-893b-4602-900e-f52b2d93b458");
            drawItemLabel(g2, dataset, row, column, plot, generator, bar, (value < 0.0));
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "e5dc63f8-4291-4b0a-94ea-ec631b6025d7");
        EntityCollection entities = state.getEntityCollection();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "2a4926ae-eca3-40cf-b6d1-05dbde03385d");
        if (entities != null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "2eb7a3c9-3b33-4e14-be9c-120e7047a6f7");
            addItemEntity(entities, dataset, row, column, bar);
        }
    }

    /**
     * Draws an item for a plot with a vertical orientation.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the data.
     * @param visibleRow  the visible row index.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     */
    protected void drawVerticalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int visibleRow, int row, int column) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "95f64f55-c17b-4427-8d4f-e1da59fef404");
        double rectX = calculateBarW0(plot, PlotOrientation.VERTICAL, dataArea, domainAxis, state, visibleRow, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "7b747e17-8b7d-42f4-9f57-3128f8428e92");
        Number meanValue = dataset.getMeanValue(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "4924816c-0ad6-45fe-92ab-df10c327db97");
        if (meanValue == null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "d5312e17-6f91-4e90-ac99-ec8b1b0393a5");
            return;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "cc1a0626-1a1a-4b59-805e-5dcb1c9f0ff5");
        double value = meanValue.doubleValue();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "523d2847-3e0f-44c9-81df-8f478de4ee6c");
        double base = 0.0;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "cd1f4d85-ae35-4125-88f8-4cb4239f532f");
        double lclip = getLowerClip();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "9a9c5ff4-62b1-43cc-af9e-6ff907786f5d");
        double uclip = getUpperClip();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "9b0b4bc2-6329-4190-a2fc-f713b1d2593b");
        if (uclip <= 0.0) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "844db117-41c5-4121-a3ee-83a06185f06e");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "1ace8486-59e6-4609-a4fe-469d5a6e6600");
                return;
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "6d616488-7ea7-477a-bcee-bc18030b29d3");
            base = uclip;
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "de8c039c-6a94-4073-821a-95bf6f3bd9d1");
            if (value <= lclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "c60de554-d382-48ad-ae60-e697b97a5760");
                value = lclip;
            }
        } else if (lclip <= 0.0) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "4d2ecde9-4895-4e42-92e9-b0ab258cf339");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "edabf9be-83e4-4dce-ae08-a99fd24fa4da");
                value = uclip;
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "73fcac13-2103-4d82-a214-b7fd3ae4ec32");
                if (value <= lclip) {
                    writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "720de6f5-9bd2-47da-bbe9-a6c99b02580a");
                    value = lclip;
                }
            }
        } else {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "dcfdc0cd-9b7a-4882-80a1-51f3c84520d7");
            if (value <= lclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "19a0ab07-06b0-4df9-84a9-4951d4c2b0d7");
                return;
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "f4593232-ce6e-43ae-8f87-57a3aa3b82cb");
            base = getLowerClip();
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "afaa96f2-857c-43e8-b5b4-55012d7d5369");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "1234c25b-c0ad-44d9-b9da-db7744fc9d55");
                value = uclip;
            }
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "9e65953d-4e6d-46bd-b1ca-aa2a3678da67");
        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "28ab58d3-c271-4818-b9aa-7e1270e87846");
        double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "0e0fcc8e-f5a0-4655-b6f3-7ca2af3bf795");
        double transY2 = rangeAxis.valueToJava2D(value, dataArea, yAxisLocation);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "f03508b2-466f-436f-a46d-7073d6776c79");
        double rectY = Math.min(transY2, transY1);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "ec3c64c7-ed7a-4769-8347-25ca8831dd68");
        double rectWidth = state.getBarWidth();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "e03a40bf-bb9b-4ec8-bb0d-c43b8145a8cc");
        double rectHeight = Math.abs(transY2 - transY1);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "734e9d45-ca1d-479c-b510-de02fc8280f4");
        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "4d426f75-4972-4711-bac1-be9ef9c3b0df");
        Paint itemPaint = getItemPaint(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "9fb5dda4-b785-4920-a1ae-37a236ca846e");
        GradientPaintTransformer t = getGradientPaintTransformer();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "4ea9aa3b-83ac-4891-95a1-3107c1f3f348");
        if (t != null && itemPaint instanceof GradientPaint) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "e4e8131f-ab11-41a1-8a25-c4f095d81cde");
            itemPaint = t.transform((GradientPaint) itemPaint, bar);
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "1a6936ec-831c-438e-8909-f4b59c40fbba");
        g2.setPaint(itemPaint);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "ebad7814-8da4-439d-aa49-15405c32c4f5");
        g2.fill(bar);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "dce9bd37-7c6b-4827-87a8-1b021eea0605");
        if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "472f1583-93f0-4707-904c-94c84cc1fc47");
            Stroke stroke = getItemOutlineStroke(row, column);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "51aa8e95-50ea-4e7a-a5cc-ee8e51cd0dcb");
            Paint paint = getItemOutlinePaint(row, column);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "3446cd6d-26ee-4600-98ea-6ffc2cb7a368");
            if (stroke != null && paint != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "75d8c048-885c-4899-89d9-38b8a3d2409c");
                g2.setStroke(stroke);
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "09ff70fd-d77f-430b-83eb-e7454abb4c9e");
                g2.setPaint(paint);
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "de9448d4-b755-43e4-827f-3dd5828aabad");
                g2.draw(bar);
            }
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "f6d538dc-b151-412f-814b-056eb38f089f");
        Number n = dataset.getStdDevValue(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "991755f2-1434-435d-ae5a-4468b3da0aff");
        if (n != null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "50cf2232-87d7-4dd6-92b6-4010a9bdaef3");
            double valueDelta = n.doubleValue();
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "38eaa815-987c-45ec-8065-2430ba4f6b2f");
            double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, yAxisLocation);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "675788be-320c-4a9c-a99e-695d3cd012f4");
            double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, yAxisLocation);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "57bd353a-097b-4711-ba8b-a771fdd50aab");
            if (this.errorIndicatorPaint != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "6343b98b-0dd1-4e03-9a2e-1e5b6b950c8c");
                g2.setPaint(this.errorIndicatorPaint);
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "8fa97e04-3da9-4e9b-9cf8-d908c8d1d3b9");
                g2.setPaint(getItemOutlinePaint(row, column));
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "9722e700-6283-45eb-9907-97a300bda6f2");
            if (this.errorIndicatorStroke != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "cc7991bc-650b-4e1d-8080-b3d7bd3b075c");
                g2.setStroke(this.errorIndicatorStroke);
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "f99596d3-c24d-4ff0-95ed-b0dcbdf4acc3");
                g2.setStroke(getItemOutlineStroke(row, column));
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "a8767f80-6634-46b0-a57a-e5b2d3201b8f");
            Line2D line;
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "18a4509d-3c3b-4f93-b4ff-5fd3b128e118");
            line = new Line2D.Double(rectX + rectWidth / 2.0d, lowVal, rectX + rectWidth / 2.0d, highVal);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "b8210d6b-2c69-4a1b-9ecb-d05e29e38c32");
            g2.draw(line);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "640dd96c-7c8d-4893-bd4a-eac2b00d858c");
            line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, highVal, rectX + rectWidth / 2.0d + 5.0d, highVal);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "5ce9a001-2247-466c-bd8c-9beafeff3644");
            g2.draw(line);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "853d6e8f-1469-4d22-8819-085e5f16e53e");
            line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, lowVal, rectX + rectWidth / 2.0d + 5.0d, lowVal);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "b16d5a45-9e04-498b-9bd4-950b40101a27");
            g2.draw(line);
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "87af8340-ab7a-408a-b8f0-ca62a94cb889");
        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "836a3cdc-e6bf-4129-89d8-6f62e3ebf04b");
        if (generator != null && isItemLabelVisible(row, column)) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "3c9df9e2-3272-410e-a6fa-5113f83f9b7f");
            drawItemLabel(g2, dataset, row, column, plot, generator, bar, (value < 0.0));
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "7a6cd33d-74e6-4dbf-af23-4f73ffb20e18");
        EntityCollection entities = state.getEntityCollection();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "dcf76631-818d-40a7-aafd-29cdd70aee6d");
        if (entities != null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "958e9007-31d9-4cc9-8b69-3acde23d4eeb");
            addItemEntity(entities, dataset, row, column, bar);
        }
    }

    /**
     * Tests this renderer for equality with an arbitrary object.
     *
     * @param obj  the object ({@code null} permitted).
     *
     * @return A boolean.
     */
    @Override
    public boolean equals(Object obj) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "9dc19a10-6b51-4f6a-8ec7-a65e836f40c1");
        if (obj == this) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "37f2670b-a231-4e36-9673-774e220b9c22");
            return true;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "ec36a58b-6eaa-4faa-98af-323b246d07a8");
        if (!(obj instanceof StatisticalBarRenderer)) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "21ca9dc0-b512-4f0a-b89c-207ad4f0a6b0");
            return false;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "70c5fdc2-0864-45bc-9573-4055089483a1");
        StatisticalBarRenderer that = (StatisticalBarRenderer) obj;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "eeb19990-367f-4da7-a59e-4868d2fee4cd");
        if (!PaintUtils.equal(this.errorIndicatorPaint, that.errorIndicatorPaint)) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "30118dd6-5797-4cb5-8b3e-ed09a0d3053e");
            return false;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "17850f7d-09e0-4831-a618-0fded13910b8");
        if (!ObjectUtils.equal(this.errorIndicatorStroke, that.errorIndicatorStroke)) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "64f7d4bf-7703-4cf0-9881-50c818aba8cf");
            return false;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "3f678e1b-5d41-47ce-b6bd-1fbfa9c4a6b4");
        return super.equals(obj);
    }

    /**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */
    private void writeObject(ObjectOutputStream stream) throws IOException {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "6d3ffb6a-ca25-43a9-a0d8-8cd6d51b4cd9");
        stream.defaultWriteObject();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "abc9624c-5d52-4f61-bca6-5c3087b804bf");
        SerialUtils.writePaint(this.errorIndicatorPaint, stream);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "aedf9d29-2603-4ae1-b07e-8a0e8aa72602");
        SerialUtils.writeStroke(this.errorIndicatorStroke, stream);
    }

    /**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */
    private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "55da1223-6711-4b9d-bf8d-a6c5399dd093");
        stream.defaultReadObject();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "1bdbdc48-c5d4-4a6e-9c1e-bbea3d148ce3");
        this.errorIndicatorPaint = SerialUtils.readPaint(stream);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_10_10.coverage", "3b6fb5f0-720e-4423-94ca-cc087fa65081");
        this.errorIndicatorStroke = SerialUtils.readStroke(stream);
    }

    public void writeline(String fullFilePath, String text) {
        try {
            java.io.File file = new File(fullFilePath);
            FileWriter fileWriter = new FileWriter(file, true);
            BufferedWriter output = new BufferedWriter(fileWriter);
            output.append(text);
            output.newLine();
            output.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
