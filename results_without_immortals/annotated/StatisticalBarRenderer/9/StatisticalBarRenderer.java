package org.jfree.chart.renderer.category;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.ui.GradientPaintTransformer;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.util.ObjectUtils;
import org.jfree.chart.util.PaintUtils;
import org.jfree.chart.util.PublicCloneable;
import org.jfree.chart.util.SerialUtils;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.statistics.StatisticalCategoryDataset;
import java.io.*;

/**
 * A renderer that handles the drawing a bar plot where
 * each bar has a mean value and a standard deviation line.  The example shown
 * here is generated by the {@code StatisticalBarChartDemo1.java} program
 * included in the JFreeChart Demo Collection:
 * <br><br>
 * <img src="../../../../../images/StatisticalBarRendererSample.png"
 * alt="StatisticalBarRendererSample.png">
 */
public class StatisticalBarRenderer extends BarRenderer implements CategoryItemRenderer, Cloneable, PublicCloneable, Serializable {

    /** For serialization. */
    private static final long serialVersionUID = -4986038395414039117L;

    /** The paint used to show the error indicator. */
    private transient Paint errorIndicatorPaint;

    /**
     * The stroke used to draw the error indicators.
     *
     * @since 1.0.8
     */
    private transient Stroke errorIndicatorStroke;

    /**
     * Default constructor.
     */
    public StatisticalBarRenderer() {
        super();
        this.errorIndicatorPaint = Color.gray;
        this.errorIndicatorStroke = new BasicStroke(1.0f);
    }

    /**
     * Returns the paint used for the error indicators.
     *
     * @return The paint used for the error indicators (possibly
     *         {@code null}).
     *
     * @see #setErrorIndicatorPaint(Paint)
     */
    public Paint getErrorIndicatorPaint() {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "f1d75783-09bc-41b3-88fe-09dfc2cb3655");
        return this.errorIndicatorPaint;
    }

    /**
     * Sets the paint used for the error indicators (if {@code null},
     * the item outline paint is used instead) and sends a
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param paint  the paint ({@code null} permitted).
     *
     * @see #getErrorIndicatorPaint()
     */
    public void setErrorIndicatorPaint(Paint paint) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "bcfd2a53-d190-419c-9179-72f4780af8a0");
        this.errorIndicatorPaint = paint;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "1cbab84b-ad9b-4532-bef0-15af28186318");
        fireChangeEvent();
    }

    /**
     * Returns the stroke used to draw the error indicators.  If this is
     * {@code null}, the renderer will use the item outline stroke).
     *
     * @return The stroke (possibly {@code null}).
     *
     * @see #setErrorIndicatorStroke(Stroke)
     *
     * @since 1.0.8
     */
    public Stroke getErrorIndicatorStroke() {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "429801ea-a67d-44fd-a21e-0cb46ba702a1");
        return this.errorIndicatorStroke;
    }

    /**
     * Sets the stroke used to draw the error indicators, and sends a
     * {@link RendererChangeEvent} to all registered listeners.  If you set
     * this to {@code null}, the renderer will use the item outline
     * stroke.
     *
     * @param stroke  the stroke ({@code null} permitted).
     *
     * @see #getErrorIndicatorStroke()
     *
     * @since 1.0.8
     */
    public void setErrorIndicatorStroke(Stroke stroke) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "4eb862e7-f85a-42de-acff-e7fa44f7fa3e");
        this.errorIndicatorStroke = stroke;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "d8531875-505a-407e-b9ca-ace695ccf883");
        fireChangeEvent();
    }

    /**
     * Returns the range of values the renderer requires to display all the
     * items from the specified dataset. This takes into account the range
     * between the min/max values, possibly ignoring invisible series.
     *
     * @param dataset  the dataset ({@code null} permitted).
     *
     * @return The range (or {@code null} if the dataset is
     *         {@code null} or empty).
     */
    @Override
    public Range findRangeBounds(CategoryDataset dataset) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "78590fe0-7ff5-4668-b4c1-29ee93245552");
        return findRangeBounds(dataset, true);
    }

    /**
     * Draws the bar with its standard deviation line range for a single
     * (series, category) data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param data  the data.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * @param pass  the pass index.
     */
    @Override
    public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset data, int row, int column, int pass) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "8192ec03-c804-4c6a-a9c1-93e0e39e4c0c");
        int visibleRow = state.getVisibleSeriesIndex(row);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "2e2b0c68-0444-4846-abb1-4825c2c380f9");
        if (visibleRow < 0) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "00cf62ba-b8f8-4ce6-91d2-61dd6b5ce297");
            return;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "654aac0e-a203-46b5-adb3-3c958327f167");
        if (!(data instanceof StatisticalCategoryDataset)) {
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "234c0cdb-95b0-41e2-af34-3ae142300187");
        StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "77d81338-74af-4f3c-b59e-6ac247af4acb");
        PlotOrientation orientation = plot.getOrientation();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "4a47b2aa-33d2-45a9-a081-bd011a1f47d1");
        if (orientation == PlotOrientation.HORIZONTAL) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "359c2fda-3803-4a61-b9b5-d847e3becf24");
            drawHorizontalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, visibleRow, row, column);
        } else if (orientation == PlotOrientation.VERTICAL) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "6a1c89f3-4d1c-4e7e-85a7-469918009f44");
            drawVerticalItem(g2, state, dataArea, plot, domainAxis, rangeAxis, statData, visibleRow, row, column);
        }
    }

    /**
     * Draws an item for a plot with a horizontal orientation.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the data.
     * @param visibleRow  the visible row index.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     */
    protected void drawHorizontalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int visibleRow, int row, int column) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "a1d2a3d3-5f5d-4f31-9fe0-b5f3203e6a4e");
        double rectY = calculateBarW0(plot, PlotOrientation.HORIZONTAL, dataArea, domainAxis, state, visibleRow, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "f62dd963-d233-4e02-8cc8-2ec57e444fa7");
        Number meanValue = dataset.getMeanValue(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "93c95c83-f340-4c9f-a29e-0604f7518c39");
        if (meanValue == null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "71e87789-e8b1-48bf-b1ab-02a8f87aee6b");
            return;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "6c854cfa-fb50-44ac-91d2-e18fc5f91b06");
        double value = meanValue.doubleValue();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "f8c79034-356f-4c28-abb2-af607dfad41e");
        double base = 0.0;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "ac51b682-db78-4165-97e8-b85a6b57ae6b");
        double lclip = getLowerClip();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "72eb1c62-d4a6-42d2-8c7e-16c746f3d30b");
        double uclip = getUpperClip();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "106559b8-85a5-41cf-af14-df59a7df0820");
        if (uclip <= 0.0) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "19850af5-5cb4-41d9-ae59-91e55a0ff38a");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "c03da858-de4a-4be2-a11d-a0fd74cc4213");
                return;
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "ecbfc840-b86d-437a-b340-a14be21149ff");
            base = uclip;
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "0cf5d8a6-143d-4ae8-9be0-8f32531adf31");
            if (value <= lclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "975a7efb-b376-46a9-98e3-ff3f76f11384");
                value = lclip;
            }
        } else if (lclip <= 0.0) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "2f4d2adf-e089-448f-962f-180f6bbb2d54");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "309fb340-8a32-4efd-9b8a-e67037c5f20b");
                value = uclip;
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "3097531e-b993-4451-a003-3e4d01de5b76");
                if (value <= lclip) {
                    writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "946cc792-3f49-40c0-8e24-4ce5ec9a346b");
                    value = lclip;
                }
            }
        } else {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "283e46b8-35eb-4b25-bce5-ef49684cca25");
            if (value <= lclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "9f96c33f-593a-4d4f-aade-0626ccb3c090");
                return;
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "436ba61a-f82f-4bef-b7ab-9dd5e739a6e9");
            base = getLowerClip();
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "be24cacb-6fb8-4554-a250-cd15770aacbf");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "ec8a53a3-8c52-499e-84d0-fc90d4d10d40");
                value = uclip;
            }
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "02321c40-d8c3-4eeb-9449-b7839f79e284");
        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "57954806-f4af-4f6b-808f-f1eb076a263f");
        double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "18dfd383-9e6c-4b1a-97b7-485131354740");
        double transY2 = rangeAxis.valueToJava2D(value, dataArea, yAxisLocation);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "3587c1ec-6e32-4e1e-aa17-c4c95dbdd40b");
        double rectX = Math.min(transY2, transY1);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "40a27bdc-a7c6-415c-a3ab-9179d444cc9c");
        double rectHeight = state.getBarWidth();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "84a107f2-91e8-4e87-a6ee-d2fb0556eef2");
        double rectWidth = Math.abs(transY2 - transY1);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "2dd27e53-ee3a-446c-9557-9f11fc13aaef");
        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "96259b1b-b6f6-4c29-ab56-75f045a35f5a");
        Paint itemPaint = getItemPaint(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "c8e9b8c8-faa9-412d-84ae-f63f32c055ba");
        GradientPaintTransformer t = getGradientPaintTransformer();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "991ce2fd-a8e0-4f79-9060-5cf7f3461ff0");
        if (t != null && itemPaint instanceof GradientPaint) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "9e71c93e-aebf-488b-9bbb-a0ca6238c12e");
            itemPaint = t.transform((GradientPaint) itemPaint, bar);
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "3ab95814-f7eb-4f5d-a57e-91729f8ad3a0");
        g2.setPaint(itemPaint);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "2c7651d7-f65a-4ade-b798-4145a3b90051");
        g2.fill(bar);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "2b445ff3-4b85-49e7-914d-149d54a004c7");
        if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "4a7f1baa-93ff-403e-8875-0c333536facd");
            Stroke stroke = getItemOutlineStroke(row, column);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "4f6201cc-21fd-4f99-9c92-37fc0a47eeb7");
            Paint paint = getItemOutlinePaint(row, column);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "518596d8-afd6-49b4-8ea3-fe70903d4946");
            if (stroke != null && paint != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "4d8b238c-cf59-426f-8579-668297b89b85");
                g2.setStroke(stroke);
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "6147f3fc-68bc-436e-b373-10b7943262eb");
                g2.setPaint(paint);
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "fd6b79c9-6f54-4c54-8b14-86fec52a39b0");
                g2.draw(bar);
            }
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "656b4f05-fcdb-4a37-97b7-494f568c2d90");
        Number n = dataset.getStdDevValue(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "bec7675b-89a2-414e-818a-fdc2aa912b5f");
        if (n != null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "a3cc9f0a-8ed4-4afb-a0a3-9d3a886151da");
            double valueDelta = n.doubleValue();
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "74cacc90-11d5-4cdd-98c1-d6d64f3e567c");
            double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, yAxisLocation);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "dfeea5ce-d29d-4264-ae54-c216c69af43a");
            double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, yAxisLocation);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "9ca1d401-4a6b-4675-96a8-3a1cb9daf612");
            if (this.errorIndicatorPaint != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "9ada21a7-bf89-4e64-8d68-578a8ead0b55");
                g2.setPaint(this.errorIndicatorPaint);
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "783a4f4f-bbe9-4a39-b647-eb537d3d195a");
                g2.setPaint(getItemOutlinePaint(row, column));
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "3de51b2e-3737-4dcb-81be-373e41273afc");
            if (this.errorIndicatorStroke != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "58023d80-d887-448b-abf4-025593a2c403");
                g2.setStroke(this.errorIndicatorStroke);
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "6ec209d0-ee47-44a5-8433-832bb064451b");
                g2.setStroke(getItemOutlineStroke(row, column));
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "182f9a55-912e-479c-a1da-ee338408aab3");
            Line2D line;
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "87a823ee-9708-48cb-8cfc-972002bac95d");
            line = new Line2D.Double(lowVal, rectY + rectHeight / 2.0d, highVal, rectY + rectHeight / 2.0d);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "2325841f-180d-458a-9e56-ec7deae94924");
            g2.draw(line);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "ae8329ea-a0a2-41eb-9c2e-20b4bb9fc6f4");
            line = new Line2D.Double(highVal, rectY + rectHeight * 0.25, highVal, rectY + rectHeight * 0.75);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "85ff17b5-866e-440b-9b72-88277e5973ae");
            g2.draw(line);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "f6574385-7906-4bf8-8a7d-3a8c88d75fb3");
            line = new Line2D.Double(lowVal, rectY + rectHeight * 0.25, lowVal, rectY + rectHeight * 0.75);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "586a1d89-c9c0-4a4f-84d6-652b4c42b5cc");
            g2.draw(line);
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "86cf82c8-1082-4c6d-a786-e310acf871b9");
        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "0753465a-ff69-4c17-be4e-7a7f4ec4db0e");
        if (generator != null && isItemLabelVisible(row, column)) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "f220200c-0855-41f6-8ccc-026e77ea288a");
            drawItemLabel(g2, dataset, row, column, plot, generator, bar, (value < 0.0));
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "e243b964-0adc-4070-a03c-c1b3f4723e6b");
        EntityCollection entities = state.getEntityCollection();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "b9369dec-4ef8-4034-bfa2-dec7294fb51f");
        if (entities != null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "f201e290-270d-4644-a38d-a9df1e937b4c");
            addItemEntity(entities, dataset, row, column, bar);
        }
    }

    /**
     * Draws an item for a plot with a vertical orientation.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the data.
     * @param visibleRow  the visible row index.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     */
    protected void drawVerticalItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, StatisticalCategoryDataset dataset, int visibleRow, int row, int column) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "946fa04a-5318-4578-b40f-fa229ae1e7ef");
        double rectX = calculateBarW0(plot, PlotOrientation.VERTICAL, dataArea, domainAxis, state, visibleRow, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "edc48b8d-0d21-469a-ba11-273fd52e9d7b");
        Number meanValue = dataset.getMeanValue(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "7428aef6-172e-44c6-be18-81aef8623b65");
        if (meanValue == null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "7edf6aa9-8254-4fe3-9eae-22e81af26b68");
            return;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "fd153d0d-d5ee-4abf-b0d9-e4ff5370c747");
        double value = meanValue.doubleValue();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "3b6245cc-987c-42e9-b3cf-d4cf340e003a");
        double base = 0.0;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "b2915e5f-6826-40f6-a28e-5dbca96cd03d");
        double lclip = getLowerClip();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "a38288a8-7c99-4d9a-ba42-cb6d2a6af572");
        double uclip = getUpperClip();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "623df76b-9b5e-4caa-b25f-90d7b2807dc5");
        if (uclip <= 0.0) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "5d245d04-4235-4773-987b-dd8b8ad58f67");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "bb3630ec-2db4-4804-bc16-77b216fd6521");
                return;
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "5683f30c-067c-4425-8549-07e31da71025");
            base = uclip;
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "29f962c9-c196-459a-a370-51a7866f5386");
            if (value <= lclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "b7d80b9d-6b1c-40c4-9d02-5fe0bda32dc1");
                value = lclip;
            }
        } else if (lclip <= 0.0) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "5fb2962e-d6b5-4918-9462-4ae851b155e1");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "71f34f47-b91f-42bd-9178-a9d607dfd9a0");
                value = uclip;
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "61999216-25be-49e8-ac8a-506a5dc13aef");
                if (value <= lclip) {
                    writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "7eefd95b-0275-48d3-8309-8b4ce1059995");
                    value = lclip;
                }
            }
        } else {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "32d3cabc-8974-46f3-bb1d-4fc12a0a4ee5");
            if (value <= lclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "eb42c6aa-dd3b-4f4c-be25-48befe75d00b");
                return;
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "e472e83c-f35c-46b5-ac37-323ca3d2b4a3");
            base = getLowerClip();
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "41fdda53-5585-4a71-b392-72cf933f2fb0");
            if (value >= uclip) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "e993edd2-8cdf-4d51-94d6-ee86dba9febe");
                value = uclip;
            }
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "c37242f1-f981-4c85-960a-094e625f182b");
        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "354b2bd0-43f4-45e6-8128-6cc02ebb759f");
        double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "400f3ad3-9948-46e3-968d-5bda447b4d9c");
        double transY2 = rangeAxis.valueToJava2D(value, dataArea, yAxisLocation);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "d95033df-ff9b-4db0-9814-d5a1f9abb831");
        double rectY = Math.min(transY2, transY1);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "7ab888e4-9295-46d3-a7a8-b8d16297230f");
        double rectWidth = state.getBarWidth();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "cf15e38f-bf7b-4eac-8adf-1bc3cce31175");
        double rectHeight = Math.abs(transY2 - transY1);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "bb613100-0867-4861-b93a-29841875fd2e");
        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth, rectHeight);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "2c2d362d-4100-4006-848f-08cdf398b894");
        Paint itemPaint = getItemPaint(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "62e01610-b2a3-473f-886b-e14ae055c6c7");
        GradientPaintTransformer t = getGradientPaintTransformer();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "421ea736-a7ed-4fe3-a197-271262c84766");
        if (t != null && itemPaint instanceof GradientPaint) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "d56cc384-3d36-4e7a-988a-be2517d9afc4");
            itemPaint = t.transform((GradientPaint) itemPaint, bar);
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "8f32c4a3-cabd-43ba-b9f5-b88ae0502d1a");
        g2.setPaint(itemPaint);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "7b000a8c-33b6-4c55-90b0-8c573b0dd2ba");
        g2.fill(bar);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "a45fd301-0141-4133-9bb6-3941c970fbec");
        if (isDrawBarOutline() && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "68fb6fdd-115b-4575-a7d8-8e2eca75d1f2");
            Stroke stroke = getItemOutlineStroke(row, column);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "f69cc3dc-e462-4f0b-bae2-3251ae7ab3b9");
            Paint paint = getItemOutlinePaint(row, column);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "d71b5a2f-0669-4832-9662-ee51aa9ee2a9");
            if (stroke != null && paint != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "f6c1a3c7-2e5d-4f34-b329-183fc415f84c");
                g2.setStroke(stroke);
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "cdf90315-e12d-47a6-921d-8bd55ee24fd8");
                g2.setPaint(paint);
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "0e9497dd-6d82-49d8-979f-41111d13799d");
                g2.draw(bar);
            }
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "abe83065-774e-41fe-bbc0-344155557480");
        Number n = dataset.getStdDevValue(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "ff91c621-4f3d-445d-a24f-5b88b6639ffa");
        if (n != null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "6a6f8a30-64df-4e0b-99aa-85306c86aa23");
            double valueDelta = n.doubleValue();
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "ebef9068-f3fa-471c-8412-bfbbe12b9730");
            double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() + valueDelta, dataArea, yAxisLocation);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "8b102410-6b2a-4513-bc17-0a918584e45d");
            double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() - valueDelta, dataArea, yAxisLocation);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "f4e4dff1-e45d-40b1-b685-e0b2601fb39f");
            if (this.errorIndicatorPaint != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "210af3c3-3f19-4644-88bb-53c0ff5a9cd3");
                g2.setPaint(this.errorIndicatorPaint);
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "84702fa7-f3bb-4acd-a8fc-68e7336a28ba");
                g2.setPaint(getItemOutlinePaint(row, column));
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "f9439b07-83e7-49d8-8025-760dd8edafcc");
            if (this.errorIndicatorStroke != null) {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "249fc191-5899-4444-8b08-f1573067ae50");
                g2.setStroke(this.errorIndicatorStroke);
            } else {
                writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "f32ecab1-24c5-4cd4-ac07-ee18f7c42122");
                g2.setStroke(getItemOutlineStroke(row, column));
            }
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "f3c7888f-2c2d-4df2-bf71-84697b5a95f8");
            Line2D line;
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "0cc10d73-37b1-4aa9-b401-ff08e7075826");
            line = new Line2D.Double(rectX + rectWidth / 2.0d, lowVal, rectX + rectWidth / 2.0d, highVal);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "13429b7c-5c4e-4da8-b506-a8eed5010eb8");
            g2.draw(line);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "90976c23-58e3-484f-8143-13e2e7cfff38");
            line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, highVal, rectX + rectWidth / 2.0d + 5.0d, highVal);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "d08c39f2-5aad-4419-be31-be483e42e49f");
            g2.draw(line);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "db72459d-06ce-416f-87eb-a6ae5a9d27f9");
            line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, lowVal, rectX + rectWidth / 2.0d + 5.0d, lowVal);
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "49e02f53-fc6f-44c9-8d30-a02a362c1a79");
            g2.draw(line);
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "437d2798-89e5-4b6d-9e4c-309891da3b66");
        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, column);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "8800c42a-84f0-47c4-9e72-5160b4d68132");
        if (generator != null && isItemLabelVisible(row, column)) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "56f6ec86-008b-4946-8f45-4a7f61b2ebe0");
            drawItemLabel(g2, dataset, row, column, plot, generator, bar, (value < 0.0));
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "a97a06c6-746e-427f-8d44-6e88872159b1");
        EntityCollection entities = state.getEntityCollection();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "34c19545-f6c6-4779-af37-01515a66be55");
        if (entities != null) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "cc08b33f-f5be-4eb7-ba33-b17f378a2645");
            addItemEntity(entities, dataset, row, column, bar);
        }
    }

    /**
     * Tests this renderer for equality with an arbitrary object.
     *
     * @param obj  the object ({@code null} permitted).
     *
     * @return A boolean.
     */
    @Override
    public boolean equals(Object obj) {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "294bc509-d381-40e2-b0b0-99dc93c5cc90");
        if (obj == this) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "050948be-378b-484f-8b40-bc222b6a8832");
            return true;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "33df6ee2-bc39-452c-82b8-9819e761b91f");
        if (!(obj instanceof StatisticalBarRenderer)) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "5863f8f5-e28f-4300-b6b7-a9496a781f93");
            return false;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "25012453-e147-43fe-857a-d265ae6b46bc");
        StatisticalBarRenderer that = (StatisticalBarRenderer) obj;
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "3572d20b-dc4d-4615-b4eb-7512da544646");
        if (!PaintUtils.equal(this.errorIndicatorPaint, that.errorIndicatorPaint)) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "8bae51fd-f5ae-4b74-806d-268474d9cf59");
            return false;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "24a908fa-259c-48ff-b7e9-61358fd990a7");
        if (!ObjectUtils.equal(this.errorIndicatorStroke, that.errorIndicatorStroke)) {
            writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "9e42f9d5-9fe2-4730-a98f-4cca0c119602");
            return false;
        }
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "5907454f-3d0b-4c9c-adfc-ba1539f3f630");
        return super.equals(obj);
    }

    /**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */
    private void writeObject(ObjectOutputStream stream) throws IOException {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "a789e978-5ed7-47ad-ad8e-85c635a2e907");
        stream.defaultWriteObject();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "29d2a514-bd9f-49b5-ae51-e78d1e0e3b56");
        SerialUtils.writePaint(this.errorIndicatorPaint, stream);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "ce9f72f3-7c5a-477f-8a26-9258c0233967");
        SerialUtils.writeStroke(this.errorIndicatorStroke, stream);
    }

    /**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */
    private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "18bc22ca-2572-41b4-bca1-afebef6032d1");
        stream.defaultReadObject();
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "d29e557c-f7f4-47c4-8e9d-d1a6df92aa55");
        this.errorIndicatorPaint = SerialUtils.readPaint(stream);
        writeline("/home/ubuntu/results/coverage/StatisticalBarRenderer/StatisticalBarRenderer_9_10.coverage", "c7056bad-0d84-4806-a83c-7d9385709b90");
        this.errorIndicatorStroke = SerialUtils.readStroke(stream);
    }

    public void writeline(String fullFilePath, String text) {
        try {
            java.io.File file = new File(fullFilePath);
            FileWriter fileWriter = new FileWriter(file, true);
            BufferedWriter output = new BufferedWriter(fileWriter);
            output.append(text);
            output.newLine();
            output.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
